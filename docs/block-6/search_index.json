[["differential-equations.html", "Chapter 41 Differential equations 41.1 The language for change 41.2 State 41.3 Dynamics 41.4 State space and flow field 41.5 Exercises", " Chapter 41 Differential equations Explain the format in which we present dynamics as opposed to trajectories Find qualitative solutions from an initial condition Articulate the difference between state, dynamics, and trajectory Vocabulary Differential equation Initial condition (or, initial value or boundary value) State &amp; state variable &amp; state space Solution Time series (state variable versus time) Trajectory (Movement in the state space) Fixed point Flow field Euler integration (iteration) Examples Bank interest or sapling growth. Gompertz growth Logistic growth (e.g. population, or change in height of tree versus height). Pendulum Disease Rocket 41.1 The language for change Calculus is the dominant means of describing change. Developed initially in the 1600s as a means of relating planetary motion to the force of gravity felt on Earth, it nonetheless remained the way of describing heat, sound, and electromagnetism in the 1800s. It the 1900s, calculus was turned to representing the basic mechanisms of quantum mechanics. The beginning student may see calculus as consisting of manipulations and transformations (e.g. differentiation and integration). The first stages of learning calculus consists of applying such manipulations and transformations to textbook exercises. To use these observations productively in solving real-world problems, you need to have a way of describing the world and the mechanisms of the world in terms of calculus. For this, you need to start seeing calculus as a language for description. We’ll use four concepts of language in describing calculus: nouns, verbs, clauses, and sentences. A calculus noun is an object such as a function, scalar, vector, or matrix. A calculus verb is an operation such as differentiation and accumulation. Other verbs come from arithmetic and algebra: square roots, addition, multiplication, and so on. A calculus clause is the application of a verb to one or more nouns to produce a new noun. For instance, if the original noun is the function \\(x(t)\\) representing the position of an object in time, then the application of the verb \\(\\partial_t\\) to the function is a new function \\(\\partial_t\\, x(t)\\), which we interpret as velocity. A calculus sentence is an equation: a statement of the equivalence of two nouns. Natural languages such as English or Chinese are much more complicated. Calculus involves sentences such as “The color of John’s bike is blue,” where “is” stands for equality: \\[\\underbrace{\\text{The color of John&#39;s bike}}_{\\text{noun}}\\ \\underbrace{\\text{is}}_{=}\\ \\underbrace{\\text{blue.}}_{\\text{noun}}\\] In both calculus and natural languages, such sentences allow us to draw conclusions that may be useful or informative. For instance, combined with the sentence, “The bike I see is red,” a conclusion might be, “The bike I see is not John’s.” Early calculus sentences were often about positions, velocities, forces, and accelerations, for instance \\[F_\\text{air} = \\alpha v^2\\] which is a simple model of the force due to air resistance. In this Block, we’ll use the language of calculus to represent dynamics, situations of motion, growth, decay, and oscillation. This Chapter introduces some of the nouns involved. 41.2 State Here are a few of the situations we will construct calculus-language descriptions of: physics swing of a pendulum bobbing of a mass hanging from a string. a rocket shooting up from the launch pad commerce investment growth growth in equity in a house as a mortgage is paid up. (“Equity” is the amount of the value of the house that belongs to you.) biology growth of animal populations, including predator and prey. growth of a tumor growth of an organism or a crop. A model describing such situation has a basic component called the dynamical state, as in “the state of affairs,” or “his mental state,” or “the state of their finances.” One of the things you learn when you study a field such as physics or epidemiology or engineering is what constitutes a useful description of the dynamical state for different situations. As an example, consider the rather simple physical system of a pendulum. A pendulum, as you know, consists of a mass hanging from a rod or rope pivoting to another object such as the ceiling. In physics, you learn the essential elements of the pendulum system: the length of the rod, the gravitational acceleration. These aspects of the system are fixed, they don’t change in time. Although such characteristics may be important in describing the system, they are not elements of the dynamical state. The dynamical state consists of the aspects of the system that are changing in time, seen instantaneously. For instance, the angle that the pendulum makes from the vertical changes in time. Such changing aspects, seen at each instant of time, constitute the dynamical state. We say, for example, that angle-from-the-vertical is a state variable and that the state at any instant is the angle at that instant.. In a physics class, you learn that angle is not a complete description of state. You need also to know the velocity of the pendulum, described for instance as the velocity of the mass at the end of the pendulum. To be complete, the dynamical state of a system has to include all those changing aspects of the system that allow you to calculate from the state at this instant what the state will be at the next instant. For example, from the angle of the pendulum at an instant it’s not possible so say what the angle will be at the next instant. You need to know which way the pendulum is swinging and how fast. And you also need to know the relevant fixed aspects of the system, such as the length of the pendulum.1 Figuring out what constitutes the dynamical state requires knowledge of the mechanics of the system, e.g. the action of gravity, the constraint imposed by the pivot of the pendulum. You get that knowledge by studying the relevant field: electrical engineering, economics, epidemiology, etc. You also learn what aspects of the system change slowly enough that they can be considered fixed. But there are a few things we can say mathematically about states that provide a valuable clue about the state of any continuous-time system. If the change is monotonic, the state can consist of just a single element. If the change is non-monotonic, that is, oscillates back and forth, the state must have two or more elements. If the change is irregular, the state must have at least three elements. In this book, we will work almost exclusively with systems that have a one- or two-dimensional state. The methods you learn will be broadly applicable to systems with higher-dimensional state. One of the ways in which calculus is the language of change can be seen in the words used in this section. For instance, instantaneous, continuous-time, and monotonic are all words introduced in Block 1 of this book. What does it take to describe the dynamical state of an epidemic? News reports of the COVID pandemic usually focus on the number of new cases each day and the fraction of the population that has been vaccinated. But this is not adequate, even for a simple description of the dynamics. From a history of new-case counts over time (e.g. Figure 41.1) you can see that the number of new cases waxes and wanes. Knowing that the number of cases today is, say, 100 thousand doesn’t tell you what the number of cases will be in two weeks: 100 thousand is encountered both on the way up and on the way down. Figure 41.1: COVID-19 new-case counts in the US over the first two years of the pandemic. Source: [New York Times] 41.3 Dynamics The dynamics of a system is a description of how the individual components of the state change as a function of the entire set of components of the state. A simple example is the dynamics of retirement-account interest. In a retirement account, you put aside money—this is called “contributing”—each month. The value \\(V(t)\\) of the account accumulates over time, both due to new monthly deposits and to the interest \\(r\\) earned on the current account value. If you are setting aside \\(M\\) dollars per month, the dynamics are: \\[\\partial_t V(t) = (1+r) V(t) + M\\ .\\] For the sake of simplicity, we can imagine that the interest rate and monthly contribution are constants: they are not part of the dynamical state. This leaves \\(V\\) at any given time as the state variable. The dynamics tell the rate of change in the state variable, \\(\\partial_t V(t)\\) as a function of the current value \\(V(t)\\) of the state variable. There is a special name for they equation describing dynamics: differential equation. The above differential equation, having just one component to the state, is sometimes called a first-order differential equation. Another way to recognize a first-order equation is that it is a single equation with just a first-order derivative appearing. A more complete model might include the monthly contribution \\(M(t)\\) changing with time. For instance if you income changes over the years, your contribution will likely change along with it. Similarly, interest rates are notoriously variable over time. Still, these are not included in the dynamical state There’s a simple reason: we don’t have usually have any model describing how \\(r(t)\\) and \\(M(t)\\) change as a function of the state. That is, we can’t say how \\(r(t)\\) changes as a function of \\(V(t)\\), \\(r(t)\\), and \\(M(t)\\). Quantities such as interest rate and contribution amount are said to be exogenous meaning “outside the system.” (The word comes from the root “exo,” meaning “outside,” and “indigenous,” meaning “native to.”) Your retirement account doesn’t determine the interest rate; interest rate is something (from your perspective) that comes from outside, largely uncontrollable factors. Another example, found in physics textbooks, is the dynamics of the pendulum. In studying physics, you learn how to identify and keep track of the forces involved. Without getting involved much with the physics, we note that the oscillatory nature of pendulum movement means that there must be at least two state variable. We’ll take these to be the angle \\(\\theta(t)\\) of the rod with respect to the vertical, and the angular velocity \\(v_\\theta(t)\\) telling how the velocity changes with time. The dynamics consist of two functions, the first being \\(\\partial_t \\theta(t)\\) and the second \\(\\partial_t v_\\theta(t)\\). They are: \\[\\partial_t \\theta(t) = v_\\theta(t)\\\\ \\partial_t v_\\theta(t) = - \\sin(\\theta) \\] Why did you bother to define a state variable \\(v_\\theta(t)\\) when it is, by definition, exactly the same as \\(\\partial_t \\theta(t)\\)? Even though the dynamical equation \\(\\partial_t \\theta(t) = v_\\theta(t)\\) is a calculus tautology, we need always to be explicit about what are the two quantities in the dynamical state. The first of the two dynamical equations comes for free from basic calculus concepts. The second equation, however, is about the physics, the relationship between forces and acceleration. There is a style of writing dynamics equations that discards such tautologies. For example, the pendulum dynamics are often written \\[\\partial_{tt} \\theta(t) = - \\sin(\\theta)\\ .\\] This sort of equation, containing a second-order derivative, is called a second-order differential equation. It’s exactly equivalent to the pair of first order equations, one for \\(\\partial_t \\theta(t)\\) and one for \\(\\partial v_\\theta(t)\\). We’ll return to this style in Chapter ??. We are avoiding this style because it obscures the fact that there are two state variables: \\(\\theta(t)\\) and \\(v_\\theta(t)\\), Example 41.1 Consider the population of two interacting species, say rabbits and foxes. As you know, the relationship between rabbits and foxes is rather unhappy from the rabbits’ point of view even if it is fulfilling for the foxes. Many people assume that such populations are more or less fixed: that the rabbits are in a steady balance with the foxes. In fact, as any gardener can tell you, some years there are lots of rabbits and others not: an oscillation. Just from this fact, we know that the dynamical state must have at least two components. In a simple, but informative, model, the two components of the dynamical state are \\(R(t)\\) and \\(F(t)\\), the population of rabbits and foxes respectively. In the absence of foxes, the dynamics of rabbits are exponential growth; each successive generation is larger than the previous one. This can be described by a dynamical equation \\(\\partial_t R(t) = \\alpha R(t)\\), where \\(\\alpha\\) is a fixed quantity that describes rabbit fecundity. Similarly, in the absence of food (rabbits are fox food), the foxes will starve or emigrate, so the dynamical equation for foxes is very similar \\(\\partial_t F(t) = - \\gamma F(t)\\), where \\(\\gamma\\) is a fixed quantity that indicates the rate at which foxes die or emigrate. Of course, in real ecosystems there are many other quantities that change and that are relevant. For instance, foxes eat not only rabbits, but birds and frogs and earthworms and berries. And the diet of rabbits eat weeds and grass (which is generally in plentiful supply), but also the gardener’s flowers and carrots (and other vegetables). Growth in the rabbit population leads to decrease in available flowers and vegetables, which in turn leads to slower growth (or even population decline) for rabbits. In the spirit of illustrating dynamics, we’ll leave out these important complexities and imagine that the state consists of just two numbers: how many rabbits there are and how many foxes. The dynamics therefore involve two equations, one for \\(\\partial_t R(t)\\) and one for \\(\\partial_t F(t)\\), usually written: \\[\\partial_t R(t) = \\alpha\\, R(t) - \\beta\\, F(t) R(t)\\\\ \\partial_t F(t) = \\delta\\, R(t) F(t) - \\gamma\\, F(t)\\] The quantities \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), and \\(\\delta\\) quantify the biology of the system: the reproduction rate of rabbits, the need of foxes for food (rabbits) in order to reproduce, the hunting success of foxes, and the death or emigration of foxes in response to a shortage of food. Coming up with this description of dynamics requires knowing something about rabbits and foxes. The particular forms used, for instance the interaction term \\(R(t) F(t)\\), coming from modeling experience. When we write such dynamics here, the point is to illustrate some of the forms commonly used to represent real-world phenomena. For instance, the interaction term is well named because it is about the literal, biological interaction of foxes and rabbits, for better (\\(+ \\delta R(t) F(t)\\)) or for worse (\\(-\\gamma R(t) F(t)\\)) depending on which species we are looking at. 41.4 State space and flow field A helpful representation of dynamics for the purpose of developing intuition is to represent the instantaneous state as a point in a graphical frame and the dynamics as a field of vectors showing how, for each possible state, the state changes. For instance, in the Rabbit-Fox dynamics, the state is the pair \\((R, F)\\) and the state space is the coordinate plane spanned by \\(R\\) and \\(F\\). The present state of the system might be any point in the state space. But if we know the present state, the vectors tell us how the state is changing with time: move the state in the direction of the vector at the present state. Let’s illustrate with the Rabbit-Fox system, whose dynamical equations are given above. To make a plot, we need numerical values for all the parameters in those equations. The vector field corresponding to the dynamics is called a flow, as if it were a pool of swirling water. Figure 41.2 shows the flow of the rabbit/fox system. Figure 41.2: The dynamics of the rabbit/fox system shown as a vector field over the state space. The parameters have been set, for the purpose of illustration, to \\(\\alpha = 2/3\\), \\(\\beta = 4/3\\), \\(\\gamma = 1\\), and \\(\\delta = 1\\). Staying with the analogy to a pool of swirling water or the currents in a river, you can place a lightweight marker such as a leaf at some point in the flow and follow its path over time. This path—position in state space as a function of time—is called the trajectory of the flow. There are many possible trajectories, depending on where you place the leaf. In Chapter 33 we considered the path followed by a robot arm. In that chapter, we separated out the \\(x\\)- and \\(y\\)-components of the arm’s position over time, calling them functions \\(x(t)\\) and \\(y(t)\\). Analogously, the the decomposition of a trajectory from an initial condition in the flow—this would be \\(R(t)\\) and \\(F(t)\\) for the rabbit/fox system—gives us the solution to the differential equation. Each component of the solution is called a time series and is often plotted as a function of time, for instance \\(R(t)\\) versus \\(t\\). From the flow field, you can approximate the trajectory that will be followed from any initial condition. Starting from the initial condition, just follow the flow. You already have some practice following a flow from your study of the gradient ascent method of optimization described in Chapter 23. At the argmax, the gradient is nil. Thus, the gradient ascent method stops at the argmax. We’ll see an analogous behavior in dynamical systems: any place where the flow is nil is a potential resting point for the state, called a fixed point. Example 41.2 Let’s return to the pendulum and examine its flow field. We’ll modify the equations just a little bit to include air resistance in the model. Air resistance is a force, so we know it will appear in the \\(\\partial_t v_\\theta(t)\\) equation. A common model for air resistance has it proportional in size to the square of the velocity and with a direction that is the opposite of the velocity. In a differential equation, the model of air resistance can be written as \\(- \\alpha\\, L\\, \\text{sign}(v(t))\\ v(t)^2\\), where \\(\\text{sign}()\\) is a piecewise function that has the value \\(+1\\) when the argument is positive and \\(-1\\) when the argument is negative. \\(L\\) is the length of the pendulum. \\[\\partial_t \\theta = v_\\theta\\\\ \\partial_t v_\\theta = - \\sin(\\theta) - \\alpha\\,L\\, \\text{sign}(v)\\ v^2\\] Note that we’ve dropped the \\((t)\\) in \\(\\theta(t)\\) and in \\(v_\\theta(t)\\). Whenever you have a state variable, you know that it’s a function of time and so the explicit \\((t)\\) is often omitted for the sake of conciseness. Figure 41.3 shows the flow field of the pendulum. Also shown is a trajectory and the two time series corresponding to that trajectory. Figure 41.3: The flow field of a pendulum with air resistance. From the initial condition (marked by \\(\\color{red}{\\text{x}}\\)), a trajectory is sketched out for \\(0 \\leq t \\leq 20\\). The individual components of that trajectory are graphed as time series. The pendulum was started out by lifting it to an angle of \\(45^\\circ\\) and giving it an initial upward velocity. The bob swings up for a bit before being reversed by gravity and swinging toward \\(\\theta = 0\\) and beyond. Due to air resistance, the amplitude of swinging decreases over time. 41.5 Exercises Exercise XX.XX: DtLAhm Question A If today is \\(n\\), what is the day after tomorrow?     \\(n-1\\)︎✘ \\(n-1\\) is yesterday.       \\(n\\)︎✘ \\(n\\) is today.       \\(n+1\\)︎✘ \\(n+1\\) is tomorrow.       \\(n+2\\)\\(\\heartsuit\\ \\)       \\(n=3\\)︎✘ Question B If today is \\(n\\), what is the day one week from now?     \\(7n\\)︎✘        \\(n + 1 week\\)︎✘ Although \\(n\\) stands for “today”, \\(n\\) is a pure number.       \\(n+7\\)\\(\\heartsuit\\ \\) Question C If today is \\(n\\), what is the day one week ago?     \\(-7 n\\)︎✘        \\(n - 1\\) week︎✘ Although \\(n\\) stands for “today”, \\(n\\) is a pure number.       \\(n-7\\)\\(\\heartsuit\\ \\) Question D Given \\({\\mathbf S}_{n+1} = g({\\mathbf S}_n)\\), what is \\({\\mathbf S}_{n+3}\\) ? \\(g(g(g({\\mathbf S}_n)))\\)Excellent!  \\(3 g({\\mathbf S}_n)\\)︎✘ \\(3 g({\\mathbf S}_n)\\) is “three times \\({\\mathbf S}_{n+1}\\)”, not \\({\\mathbf S}_{n+3}\\). \\(g({\\mathbf S}_n)^3\\)︎✘ \\(g({\\mathbf S}_n) + 2 {\\mathbf S}_{n}\\)︎✘ Question E Given \\({\\mathbf S}_{n+1} = g({\\mathbf S}_n)\\), which of these is not \\({\\mathbf S}_{n+1}\\) ? \\(g(g(g({\\mathbf S}_{n-2})))\\)︎✘ \\(g({\\mathbf S}_{n-1})\\)Nice! This is \\({\\mathbf S}_{n}\\). \\(g(g({\\mathbf S}_{n-1}))\\)︎✘ \\(g(g(g(g(g(g(g(g({\\mathbf S}_{n-7}))))))))\\)︎✘ These 8 applications of \\(g()\\) will take \\({\\mathbf S}_{n-7}\\) up to \\({\\mathbf S}_{n+1}\\) Exercise XX.XX: mJRDLy Question A Given the system \\({\\mathbf S}_{n+1} = g( {\\mathbf S}_n)\\) with \\(g(S) \\equiv 5 + S/2\\), which of these is a trajectory of the system? {16, 13, 11.5, 10.75, 10.375, 10.1875, 10.09375}Nice!  {16, 8, 4, 2, 1}︎✘ {5, 7.5, 10, 12.5, 15}︎✘ {0, 5, 10, 15, 20, 25}︎✘ Question B Given the system \\({\\mathbf S}_{n+1} = g( {\\mathbf S}_n)\\) with \\(g(S) \\equiv 5 + S/2\\), which of these is NOT a trajectory of the system? {0, 5, 7.5, 8.75, 9.375, 9.6875, 9.84375, 9.921875, 9.9609375, 9.98046875, 9.990234375}︎✘ {1, 5.5, 7.75, 8.875, 9.4375, 9.71875, 9.859375, 9.9296875, 9.96484375, 9.982421875, 9.9912109375}︎✘ {-4, 3, 6.5, 8.25, 9.125, 9.5625, 9.78125, 9.890625, 9.9453125, 9.97265625, 9.986328125}︎✘ {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}︎✘ {4, 7, 10, 13}Good.  Exercise XX.XX: DzIhgb Question A Use the sandbox above to construct 50 steps of the dynamics of \\(g(x) \\equiv -0.8 x + 2\\) starting at \\(x_0 = 10\\). Which of these best describes the graph \\(x_n\\) versus \\(n\\)? (Hint: It’s always best to try to figure out the command on your own. If you get stuck, press the ‘Solution’ button in the sandbox.) A steady exponential decay to about \\(x=3\\).︎✘ An oscillating exponential growth.︎✘ An oscillating exponential decay to about \\(x=1.1\\).Nice!  A sine wave with period \\(P=\\pi\\).︎✘ Exercise XX.XX: 9mSE8t Question A For the arithmetic sequence with \\(x_0 = 2\\) and \\(b=3\\), what is the numerical value \\(x_{100}\\)?     203︎✘        230︎✘        302\\(\\heartsuit\\ \\)       320︎✘        Not enough information given.︎✘ Question B For the geometric sequence with \\(x_0 = 2\\) and \\(\\alpha = \\frac{1}{2}\\), what is the numerical value \\(x_{10}\\)? 1/1028︎✘ 1/512Excellent! \\(2 \\times \\frac{1}{2}^{10} = 2 / 1024 = 1/512\\) 512︎✘ 1028︎✘ Not enough information given.︎✘ Question C For the affine sequence with \\(x_0 = 2\\) and \\(\\alpha = \\frac{1}{2}\\) and \\(b=10\\), what is the numerical value of \\(x_{100}\\)? (These answers are shown to only one decimal point.) Hint: What is \\(\\alpha^{100}\\)?     20.0\\(\\heartsuit\\ \\)       -20.0︎✘        \\((1/2)^{100}\\)︎✘        0.0︎✘ Exercise XX.XX: FUIt1Q A debit card is a way to make withdrawals from a bank account. Funds in the account earn interest. In the economic environment of 2021, the interest rate is practically zero. But to make it possible to see the growth on a graph, we will stipulate it to be 4% per year. But if the account is in debt, then the debt grows at a much faster rate, perhaps 15% per year. Suppose the amount in the bank account is \\(m\\) (in dollars) and time is \\(t\\) (in years). If \\(m\\) is positive, you are earning interest. If negative, you are in debt and the debt will grow. Which of the following graphs reflects the dynamics of the system? Figure 41.4: Scenarios A and B Figure 41.5: Scenarios C and D On the graph paper below, sketch out the modifications of the bank-card dynamics described. Identify any fixed points by marking them on the graph and say if they are stable or unstable. In addition to the normal bank-card dynamics, your employer makes a steady retirement deposit into your account at the rate of $100 per year. Your darling aunt looks at your account balance. If you have less than $300 in your account, she will add money daily at a rate of $100 per year. Otherwise, she does nothing. Exercise XX.XX: Amzsqx We will be using a handful of Greek letters in our mathematical notation. You should learn these by heart: \\(\\alpha\\) : alpha (lowercase) \\(\\beta\\) : beta (lowercase) \\(\\gamma\\) : gamma (lowercase) \\(\\delta\\) : delta lowercase \\(\\lambda\\) : lambda (lowercase) \\(\\Lambda\\) : lambda (uppercase) \\(\\omega\\) : omega (lowercase) \\(\\xi\\) : xi (lowercase), pronounced “ex-eee” \\(\\eta\\) : eta (lowercase) The last two of these, \\(\\xi\\) and \\(\\eta\\) are the Greek equivalents to the familiar \\(x\\) and \\(y\\). We’ll see \\(\\xi\\) and \\(\\eta\\) as arguments to functions that we will quickly be re-scaling and renaming \\(x\\) and \\(y\\). On a piece of paper, write out each of the following Greek letters and, alongside it, the name of the letter. \\(\\gamma\\) \\(\\beta\\) $ \\(\\xi\\) \\(\\Lambda\\) \\(\\lambda\\) \\(\\eta\\) \\(\\alpha\\) Exercise 24.20: uifJjv Recall the medieval math problem about rabbits, which we wrote as a dynamical system \\[x_{n+1} = x_n + y_n\\\\y_{n+1} = x_n \\ \\ \\ \\ \\ \\ \\ \\ \\ \\] Rewrite this system in matrix form \\[{\\mathbf X}_{n+1} = {\\mathbf A} \\cdot {\\mathbf X}_n\\ \\ \\ \\text{where}\\ \\ {\\mathbf X}_n \\equiv \\left[\\begin{array}{c}x_n\\\\y_n\\end{array}\\right]\\] Here are several candidates for the matrix \\({\\mathbf A}\\) that implements the rabbit dynamics: \\[{\\mathbf A}_1 \\equiv \\left[\\begin{array}{cc}1 &amp; 1 \\\\ 0 &amp; 1\\end{array}\\right], \\ \\ {\\mathbf A}_2 \\equiv \\left[\\begin{array}{cc}1 &amp; 0 \\\\ 0 &amp; 1\\end{array}\\right], \\ \\ {\\mathbf A}_3 \\equiv \\left[\\begin{array}{cc}1 &amp; 0 \\\\ 1 &amp; 1\\end{array}\\right], \\\\ {\\mathbf A}_4 \\equiv \\left[\\begin{array}{cc}1 &amp; 1 \\\\ 1 &amp; 1\\end{array}\\right], \\ \\ {\\mathbf A}_5 \\equiv \\left[\\begin{array}{cc}1 &amp; 1 \\\\ 1 &amp; 0\\end{array}\\right], \\ \\ {\\mathbf A}_6 \\equiv \\left[\\begin{array}{cc}1 &amp; 0 \\\\ 1 &amp; 0\\end{array}\\right]\\ \\] Question A Which of the candidates will implement the rabbit dynamics? \\({\\mathbf A}_1\\)︎✘ \\({\\mathbf A}_2\\)︎✘ \\({\\mathbf A}_3\\)︎✘ \\({\\mathbf A}_4\\)︎✘ \\({\\mathbf A}_5\\)Good.  \\({\\mathbf A}_6\\)︎✘ If you want to iterate the system \\({\\mathbf X}_{n+1} = {\\mathbf A}\\, {\\mathbf X}_n\\), you can use the Iterate() operator, handing it the matrix \\({\\mathbf A}\\) as argument \\(A=\\). Use the sandbox to create a matrix named A corresponding to the rabbit dynamics from the initial condition \\((1, 0)\\). (Note: the matrix that’s given by default is just a placeholder. It’s not the correct rabbit-dynamics matrix.) # enter your matrix here A &lt;- matrix(c(0.5, 1, 1, 0), nrow=2, byrow=TRUE) A # print the matrix so you can confirm you have it right Iterate(A = A, x0 = c(1, 0), n=10) Once you have your matrix \\({\\mathbf A}\\) correctly defined for the rabbit dynamics, and have confirmed the trajectory is what it should be, replace the initial condition (1, 0) with this one: (0.5247311, -0.8506508) That’s a funny initial condition for modeling rabbits, because you can’t have fractional rabbits and especially you can’t have negative rabbits. But that initial condition—even if it’s not about rabbits—produces a very special kind of dynamics. Question B Iterate the rabbit matrix \\({\\mathbf A}\\) from the initial condition \\((0.5247311, -0.8506508)\\). (Double check that you have entered it exactly as spelled out here.) The rabbit population starting at initial condition \\((1, 0)\\) grew in an unbounded way. What happens when you use the funny initial condition instead? The fixed point at (0,0) becomes stable.︎✘ The stability of the fixed point depends only on the \\({\\mathbf A}\\) matrix, not on the initial conditions. The x value oscillates and grows, then gets smaller again.︎✘ The x value oscillates and gets smaller, then grows without bound.Right!  The x value oscillates around and around, without getting larger in magnitude.︎✘ This behavior may seem strange now. You’ll understand it better when we introduce a powerful way of looking at matrix dynamics: eigenvalues and eigenvectors. More generally, since the rod has mass and the pendulum bob is not a single point, you need to know the distribution of mass along the pendulum, from which you can calculate quantities such as the moment of inertia.↩︎ "],["solve-DE.html", "Chapter 42 Finding a solution 42.1 The flow field 42.2 Euler method 42.3 Symbolic solutions 42.4 Exercises", " Chapter 42 Finding a solution Idea of accumulation Numerical solution: Euler method and iteration Analytic solution: Ansatze and confirming a solution Some special cases, separable equations Laplace transforms As you saw in the previous chapter, a differential equation relates the derivative of a function to the function itself, for instance \\[\\partial_t x(t) = x(t)\\,(1-x(t))\\ .\\] Solving a differential equation means to find a function \\(x(t)\\) that is consistent with the equation. This chapter is about techniques for finding solutions. It’s tempting—but not usually possible—to apply the symbolic anti-differentiation techniques from Block 3 to the problem. After all \\[\\int \\partial_t x(t) dt = x(t)\\,\\] as described in the “fundamental theorem of calculus”. Following this logic, we would translate the equation to \\[x(t) = \\int x(t)\\, (1-x(t))dt\\ .\\] But in order to carry out the anti-differentiation, we would need to know \\(x(t)\\) itself, which is the function we are trying to find. Nonetheless, it’s common to refer to integrating a differential equation, but this should be broadly understood as accumulating the increments \\(\\partial_t x(t)\\) starting at some initial condition \\(x(t_0)\\), even if that accumulation is not carried out by symbolic anti-differentiation. In this chapter we’ll introduce four different techniques to accumulating a solution to a differential equation or a pair of such equations. First, we’ll look again at the graphical method of “following the flow” in a plot of the flow field. This technique is mainly of use for developing intuition about the dynamics. Second, we’ll develop a simple Euler method for accumulating a solution. Third, we’ll explore how to take a guess about the solution and, when the guess is good enough, refine that into an actual solution. This is called the method of ansëtze. Fourth, and briefly, we’ll look at some of the situations where symbolic anti-differentiation can be used. This includes a very brief introduction to transform methods. A differential equation like \\[\\partial_t x(t) = x(t)\\,(1-x(t))\\] is very busy typographically. One reason is the repeated \\((t)\\) which play no role other than to state explicitly that \\(x\\) is a function of \\(t\\). A convenient shorthand simply replaces \\(x(t)\\) to make the “is a function of \\(t\\)” implicit. Thus the equation appears as \\[\\partial_t x = x (1-x)\\ .\\] It’s the reader’s responsibility, knowing that he or she is working with a differential equation, to remember that \\(x\\) is a function of \\(t\\). An even more concise notation, originated by Isaac Newton, is to replace the \\(\\partial_t\\) with a simple \\(\\dot{\\ }\\). With this notation the equation looks like \\[\\dot{x} = x (1-x)\\ ,\\] about as simple as it gets. This dot notation is even more expressive when working with second-order differential equations involving second derivative. In the dot notation, \\(\\partial_{tt}\\) is written \\(\\ddot{\\ }\\). 42.1 The flow field With a pair of differential equations, as with the pendulum or the rabbit-fox model, each equation gives one component of the change in state. To draw the flow field, pick one point at a time from the state space, and calculate the right-hand sides of the differential equation from each equation. If the parameters in the model have been assigned numerical values, the result of evaluating the right-hand sides will be two numbers. A case in point is the rabbit-fox model where the state variables are \\(r\\) and \\(f\\). The differential equations are \\[\\partial_t r = 0.66 r - 1.33 r f\\\\ \\partial_t f = -f + rf\\\\ \\] To draw the flow arrow at, say, \\(r=2, f=1/4\\), plug those values into the right-hand side: \\[\\partial_t r = 1.33 - 0.66 = 0.66\\\\ \\partial_t f = -0.25 + 0.5 = 0.25\\ .\\] Since \\(r\\) has units of rabbit density, \\(\\partial_t\\) has units rabbit density per day (or some other time unit). Similarly \\(\\partial_t f\\) has units of fox density per day. The coordinate axis of rabbit-fox state space have units of rabbit density and fox density. We can’t therefore plot rabbit density per day and fox density per day in the state space. However, the ratio \\(\\frac{\\partial_t f}{\\partial_t r}\\) has units fox density per rabbit density. These are the units of a slope in the state space. Centered at coordinate \\((r=2, f = 1/4)\\), draw an sloping line segment. Given the values \\(\\partial_t f = 0.25\\) and \\(\\partial_t f = 0.66\\), the segment should have slope \\(0.25/0.66 = 0.379\\). Also, place an arrowhead on the segment. You can decide which end of the segment it goes by noting the signs of \\(\\partial_t f\\) and \\(\\partial_t r\\). Both are positive in this example, so the arrowhead should point up and to the right. This flow arrow is drawn in Figure 42.1. Figure 42.1: The flow arrow for the state value \\((r=2, f=1/4)\\). To draw the entire flow field, repeat this process at many other points in the state space. To trace out the trajectory, select the initial condition for the system. Then follow the flow, taking only a small step in state space. The next step should be in the direction of the flow arrow at the end of the previous step. The trajectory you draw will be only a sketch, but it can be effective for developing intuition. Figure 42.2 shows a semi-automated version of the go-with-the-flow method. The computer has been used to draw the arrows. When you click in the plot, the computer also undertakes calculation of the trajectory. Figure 42.2: The flow field for the rabbit/fox dynamics. Click at an initial state to generate the trajectory from that state. Regretably, from such a sketch of the trajectory, you can’t easily construct \\(r(t)\\) and \\(f(t)\\) for time-series plots. Also, you don’t get a sense of how slow or fast the flow is going. Click at different initial conditions in the flow and you will see different trajectories, each of which is a closed loop. But the shape of the trajectory doesn’t tell you whether it takes a long time or a short time to complete a loop. The next section will show you how the computer constructed the trajectory and how we can get information on the speed of the flow. 42.2 Euler method Recall from Block 2 the limit definition of the derivative: \\[\\partial_t x(t) = \\lim_{dt \\rightarrow 0} \\frac{x(t + dt) - x(t)}{dt}\\ .\\] We’re going to use this definition to develop a very general way to solve differential equations: the Euler method. From the differential equations, we already know \\(\\partial_t x(t)\\), so we don’t have to worry about whether the limit exists; it does. So we’ll disregard the limit except to note that \\(dt\\) must be small. How small? Pick \\(dt\\) to be small enough that the result wouldn’t change in any substantial way if we used an even smaller time increment, say \\(dt/10\\). Our starting point for solving each differential equation is to re-write it as a finite difference. To illustrate, we’ll solve the equation \\(\\partial_t x = x (1 - x)\\), which is often called the logistic equation. Applying the finite difference definition, we get \\[\\frac{f(t + dt)- f(t)}{dt} = x (1-x)\\\\\\text{implying}\\\\ \\ \\\\ \\underbrace{f(t + dt)}_{\\text{future state}} = \\underbrace{f(t)}_{\\text{current state}} +\\ \\ \\ \\underbrace{x (1-x) dt}_{\\text{step}}\\] We call this last equation the Euler formula. To use this, we start at the initial condition, say \\(x(t=0) = 0.2\\). This initial condition gives us the first row of a tabular representation of the function \\(x(t)\\): time state 0 0.2 Next, pick a value for \\(dt\\) that we will use for all the following steps, each of which will add a new row to the table. For the example, we’ll set \\(dt = 0.1\\). When we have constructed the whole table we can go back and check whether that was small enough. To fill in the next row, we apply the Euler formula. Sine \\(dt = 0.1\\), the next time step will be \\(0.1\\). Plug in the current state—which is 0.2 right now—to calculate the future state. The step will be \\(0.2 (1-0.2)\\, dt = \\color{brown}{0.016}\\). Add this step to the current state to get the future state. The table now looks like this: time state 0.0 \\(0.2\\) 0.1 \\(0.2 + \\color{brown}{0.016} = \\color{blue}{0.216}\\) The next step will bring us to time \\(0.2\\). Use the Euler formula, pluggin in the value of the present state, \\(\\color{blue}{0.216}\\), to find the step. Here that will be \\(0.216 (1-0.216)\\, dt = \\color{magenta}{0.0169.}\\). Now the table looks like time state 0.0 \\(0.2\\) 0.1 \\(0.2 + \\color{brown}{0.016} = \\color{blue}{0.216}\\) 0.2 \\(\\color{blue}{0.216} + \\color{magenta}{0.0169} = 0.2329\\) Add as many rows to the table as you like; the process will be the same. You will recognize this as an iterative process, as discussed in Chapter 32. Example 42.1 As is so often the case, it’s wise to think about carrying out processes in terms of fundamental tasks accomplished by calculus operations—evaluate, differentiate, anti-differentiate, solve, find argmax, iterate. The obvious choice for integrating differential equations is “anti-differentiate,” but as described previously, the techniques we covered in Block 3 are not sufficient for the task. Instead, we use iteration to solve differential equations. In this example we’re going to use the software you have already seen, Iterate(), to carry out the task. In practice, however, you will use a special form of Iterate() called integrateODE() that makes use of interpolation techniques to give a more precise answer. To implement the iteration to solve \\(\\partial_t x = x (1-x)\\), we need to create a function that takes the current state as input and produces the next state as output. Our one-step function can be this: next_step &lt;- function(t, x, dt=0.1) { t &lt;- t + dt x &lt;- x + x*(1-x)*dt c(t=t, x=x) # return value } Notice that we wrote next_step() with an input slot for \\(dt\\). This will not be part of the state being iterated, just a parameter that allows us easily to explore different values for \\(dt\\). Use Iterate() to carry out the iteration of next_step(). Note that we use the fargs argument to Iterate() to pass our selected value for dt to the function next_step(). We’ll run the iteration for 100 steps. With \\(dt=0.1\\), those 100 steps will 10 units of time. Soln &lt;- Iterate(next_step, x0=c(t=0, x=0.2), n=100, fargs=list(dt=0.1)) n t x 0 0.0 0.2000000 1 0.1 0.2160000 2 0.2 0.2329344 … and so on … 99 9.9 0.9998595 100 10.0 0.9998736 We can now plot the time series \\(x\\) vs \\(t\\): Figure 42.3: The time series by the Euler method with \\(dt=0.01\\). In the previous example using Iterate() to solve a differential equation, the output of the iteration was a data frame containing values for the solution at discrete times: 0, 0.1, 0.2, and so on. A data table is a perfectly good way to represent a function, but it’s handier to have a function in a form that operations like slice_plot() and D() can be applied to. Another way to look at things is that, mathematically, the solution to a differential equation should be a continuous-time function. Fortunately, we have at hand the interpolation techniques covered in Chapter 33 to carry out the construction of a continuous-time function from a tabular representation. The R/mosaic function integrateODE() connects together the iteration and interpolation to provide a solution that is in the form of continuous-time function(s). Use the R/mosaic function integrateODE() to solve differential equations numerically. It is a specialized function that handles sets of first-order differential equations, but any high-order differential equation can be separated into a set of first-order equations. To illustrate, this command will solve the differential equation \\(\\partial_t x = x (1-x)\\) that we took on in the previous example with Iterate(). Soln2 &lt;- integrateODE(dx ~ x*(1-x), x = 0.2, tdur=list(from=0, to=10, dt=0.01)) The first argument is a tilde expression, but in a form that’s different from from that used in functions such as D() or contour_plot(), etc. To the left of the tilde is a single name composed of the state variable—x here—prefixed by a d. The d is just a reminder that we are describing not x itself, but \\(\\partial_t\\ \\mathtt{x}\\). On the right of the tilde is the function from the differential equation, in this case, \\(x(1-x)\\). The next argument is the initial condition. We’re starting the integration at \\(x=0.2\\). Finally, the argument named tdur= consists of a description of the starting and ending times and the time-step size \\(dt\\). The output of integrateODE() is an R structure that is new to us. It contains the function created by integrateODE() which you refer to by name (x) using a special form of R punctuation $. In other words, Soln2$x will be a function, which you can plot like any other function, for instance: slice_plot(Soln2$x(t) ~ t, domain(t=0:10)) An important feature of integrateODE() is its ability to handle sets of first-order differential equations. For instance, the rabbit/fox system \\[\\partial_t r = 0.66\\, r - 1.33\\, r f\\\\ \\partial_t f = -f + rf\\] will be integrated by this command: Eco_soln &lt;- integrateODE( dr ~ 0.66*r - 1.33*r*f, df ~ -f + r*f, r = 2, f = 0.5, #initial conditions tdur=list(from=0, to=5, dt=0.1)) You can plot the time series using slice_plot() slice_plot(Eco_soln$r(t) ~ t, domain(t=0:5)) %&gt;% gf_labs(title=&quot;Rabbits&quot;) slice_plot(Eco_soln$f(t) ~ t, domain(t=0:5)) %&gt;% gf_labs(title=&quot;Foxes&quot;) Figure 42.4: Times series of the rabbit and fox densities. To plot the trajectory, use the traj_plot() function. Unlike slice_plot(), which creates a time series plot, traj_plot() shows the trajectory. traj_plot(f(t) ~ r(t), Eco_soln, nt=10) 42.3 Symbolic solutions Occasionally it is possible to integrate a differential equation using symbolic techniques. This is particularly true for differential equations that are linear. The example we will handle here is the first-order linear differential equation \\[\\partial_t x = a\\, x\\ .\\] An advantage of symbolic solutions is that parameters can be handled symbolically. A method we will use repeatedly in this block is called the “method of ansätze.” An ansatz (singular of the German “ansätze”) is, in this context, a guess for the solution. Since differential equations have been a central part of science for more than 200 years, you can imagine that a large library of equations and their solutions has been assembled. For the equations that are most frequently used and that can be solved symbolically, the solutions are already known. Thus, the “guess” for the solution can be a very well informed guess. Let’s see how this works for \\(\\partial_t x = a\\, x\\). From experience, the ansatz will be an exponential function of time, which we can write \\(x(t) \\equiv A e^{\\omega t}\\). We don’t yet know what is the value of \\(\\omega\\) or \\(A\\), so we plug the ansatz into both the left and right sides of the differential equation to work it out. Plugging in the ansatz, translates the differential equation to a new form: \\[\\underbrace{A \\omega e^{\\omega t}}_{\\partial_t x(t)}\\ =\\ \\underbrace{a A e^{\\omega t}}_{a x(t)}\\ .\\] Cancelling out the terms that appear on both sides of the equation gives \\[\\omega = a\\ \\ \\ \\text{which implies}\\ \\ \\ x(t) = A e^{a t}\\ .\\] The ansatz substitution didn’t give any result at all for \\(A\\). That is to say, unlike \\(\\omega\\), the \\(A\\) is not determined by the differential equation itself. This means that \\(A\\) must be related to the initial condition. Setting \\(t=0\\) gives \\(x(0) = A\\), so in this simple differential equation, \\(A\\) is the initial condition. A technique that doesn’t involve such guesses can work for differential equations that are separable. This is mainly valuable, now that there are libraries of symbolic solutions to the common differential equations that have them, as a way of demonstrating to students where the solution comes from. We’ll demonstrate by integrating \\(\\partial_t x = x (1-x)\\). The method is made more plausible by using the Leibnizian notation for derivatives, with which the differential equation has this form: \\[\\frac{dx}{dt} = x(1-x)\\ .\\] The Leibnizian notation can be interpreted as the ratio of two differentials: \\(dx\\) and \\(dt\\) in this case. The idea of separating the differential equation is to algebraically move all the \\(x\\) terms to the left side of the equation and all the \\(t\\) terms to the right and then to integrate each side of the equation. \\[dx = x(1-x) dt \\ \\ \\ \\implies \\ \\ \\ \\frac{1}{x(x-1)}dx = dt\\ \\ \\ \\implies\\ \\ \\ \\int\\frac{1}{x(x-1)}dx = \\int dt .\\] The integral on the right side, \\(\\int dt\\), should be easily recognizable, giving \\(\\int dt = t + F\\), where \\(F\\) is the “constant of integration.” The integral on the left side may not be as familiar, but the person solving this problem for the second time will remember that \\[\\frac{1}{x(1-x)} = \\frac{1}{x} + \\frac{1}{1-x}\\] as you can confirm by putting the right side over a common denominator. Each of \\(1/x\\) and \\(1/(1-x)\\) have integrals that are logs: \\(\\int dx/x = \\ln(x) + D\\) and \\(\\int dx/(1-x) = - \\ln(1-x) + E\\). Putting the equation back together again, produces \\[\\ln(x) + D - \\ln(1-x) + E = t + F\\ .\\] At this point, move all the constants of integration over to the right side and consolate them into a single constant of integration \\(C\\). At the same time, collect together the two logarithmic terms, giving: \\[\\ln\\left(\\frac{x}{1-x}\\right) = t + C\\ .\\] Exponentiate both sides to get: \\[\\frac{x}{1-x} = \\underbrace{e^C}_{A} e^t\\ .\\] Since \\(e^C\\) is just a constant, we’ll write it more simply as \\(A\\). Now we have \\[x = Ae^t - x A e^t \\ \\ \\implies\\ \\ \\ x (1 + Ae^t) = Ae^t\\] which gives our solution \\[x = \\frac{Ae^t}{1 + Ae^t}\\ .\\] To find the initial condition symbolically, plug in \\(t=0\\), giving \\(x_0 = A/(1+A)\\) or, equivalently \\(A = x_0/(1-x_0)\\). Our previous examples used \\(x_0 = 0.2\\), for which \\(A = 0.2/0.8 = 0.25\\). Graphing this solution gives us the familiar sigmoid: Symb_soln = makeFun(A*exp(t)/(1 + A*exp(t)) ~ t) slice_plot(Symb_soln(t, A=0.2) ~ t, domain(t=-5:10)) Not all differential equations can be separated in this way, and even for those that can, the integrals may not be tractable. So this route to a solution is not a general-purpose one, unlike the Euler method. Still, the Euler method gives only an approximate solution, so with Euler we need to take care that the approximation is close enough for the purpose at hand. In this case, we have both an Euler solution (with \\(dt=0.1\\)) and a symbolic solution. Figure 42.5 shows the difference between the two solutions, which ideally should be zero. To show more of the time domain of the solution, we’ll reset the initial condition to \\(x_0 = 0.01\\). This corresponds to \\(A = 1/99\\). Figure 42.5: The difference between the Euler and the symbolic solution to \\(\\partial_t x = x (1-x)\\) as a fraction of the symbolic solution. At the worst, the Euler solution is off by 1.5 parts in one-million. 42.4 Exercises Exercise XX.XX: Z3Mq3G Figure 42.4 shows time series for the rabbit and fox population density starting at the initial condition \\(r=2, f=0.5\\) for the first 5 time units thereafter. The fox graph looks like a hump function, the rabbit graph show a little uptick near \\(t=5\\). Using the R/mosaic commands given in the text to make Figure 42.4, integrate the equations from \\(t=0\\) to \\(t=15\\) and plot the time series for both rabbits and foxes. A. Using the time-series plots, estimate the period of the cyclic oscillations. - What is the period of the fox population cycle? - How large in amplitude (peak to trough) is the fox population cycle? - How do the cycle period and amplitude for the rabbits compare to those for the foxes? B. Change the initial condition from \\(r=2, f=0.5\\) to \\(r=1, f=0.5\\) and plot the time series. - What is the period of the fox population cycle? - How large in amplitude (peak-to-trough) is the fox population cycle? Exercise XX.XX: Ul19SO Figure 42.5 shows the difference between the symbolic solution to \\(\\partial_t x = x (1-x)\\) and the Euler solution. The figure shows that the Euler solution (with \\(dt=0.1\\)) has an approximation error that’s small. The worst case is when \\(t \\approx 3\\) at which point it is less than 1.5 parts per million. Another good way to quantify this is the decimal place at which the calculated solutions differ. Euler &lt;- integrateODE(dx ~ x*(1-x), x=0.01, tdur=list(from=0, to=20, dt=0.1)) Symb_soln = makeFun(A*exp(t)/(1 + A*exp(t)) ~ t, A=1/99) Symb_soln(3) ## [1] 0.1686648 Euler$x(3) ## [1] 0.1686645 The approximation error occurs in the seventh decimal point. A. How large can \\(dt\\) be to keep the approximation error in the fourth decimal place of the answer. B. How large can \\(dt\\) be to keep the approximation error in the second decimal place of the answer. Exercise XX.XX: jd6HE8 The differential equation \\(\\partial_t x = a x\\) is so commonly encountered that you should simply memorize the solution: \\[x(t) = A e^{a t}\\] which you can recognize as exponential growth (or decay, if \\(a &lt; 0\\)) from an initial condition \\(x_0 = A\\). Exponential growth is considered fast, but there are far faster forms of growth. To illustrate, consider the differential equation \\[\\partial_t x = a x^2\\ .\\] This can be interpreted in terms of a model of the size of the flame as one lights a match. Think of the flame as a ball of hot gas of radius \\(x\\); the gas include oxygen (O_2_), nitrogen, and carbon dioxide, as well as a vapor of the combustible material such as the potassium chlorate of the match head. Within the ball of flame, O_2_ reacts with the cumbustible material to produce the products of combustion and heat. Needless to say, this reaction eliminates the O_2_ in the ball. But O_2_ can diffuse into the ball from outside. The O_2_ infusion rate available in this way is proportional to the surface area of the ball, that is, \\(a x^2\\). Thus the differential equation models the growth of the flame ball. The match-flame equation is one that can be separated into parts: all the \\(x\\) components on one side, the \\(t\\) on the other. That is: \\[\\underbrace{\\frac{dx}{dt} = a x^2}_{\\text{original DE}}\\ \\ \\ \\implies \\underbrace{\\frac{dx}{x^2} = a dt}_{\\text{separated DE}}\\] Integrating both sides of the separated equation will produce \\(a t + C\\) on the right side. A. Integrate the left side of the separated equation and use that to find a relationship between \\(x\\) and \\(a t + C\\). B. The constant of integration, \\(C\\), will reflect the initial condition. Plug in \\(t=0\\) and calculate from the relationship in (A) what is \\(C\\) in terms of \\(x_0\\). C. Replace \\(C\\) in your relationship with the expression in terms of \\(x_0\\) you found in (B). Confirm that this is \\[x(t) = \\frac{1}{a t - 1/x_0}\\ .\\] D. \\(x(t)\\) has a vertical asymptote. Find it. E. Use integrateODE() to integrate the original differential equation. You will have to pick some numerical value for \\(a\\) and \\(x_0\\). Take care to make \\(dt\\) small enough. You’ll know that \\(dt\\) is small enough when you get the approximately same solution using \\(dt/10\\). F. Describe in everyday words what the solution says and how big the ball of flame becomes. The model \\(\\partial_t x = a x^2\\), like all models, includes some features of the real-world system and excludes others. In this case, once the ball reaches a critical diameter, there is no longer enough combustion product to continue the reaction at the rate depicted in the model. If you watch a match being lit, you will see both the explosion and the eventual exhaustion of the combustion material. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
