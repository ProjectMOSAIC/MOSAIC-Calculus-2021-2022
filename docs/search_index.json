[["welcome-to-calculus.html", "MOSAIC Calculus Welcome to calculus Computing and apps Exercises and feedback Practice, practice, practice Software for the course", " MOSAIC Calculus Daniel Kaplan 2021-10-15 Welcome to calculus Calculus is the set of concepts and techniques that form the mathematical basis for dealing with motion, growth, decay, and oscillation. The phenomena can be as simple as a ball arcing ballistically through the air or as complex as the airflow over a wing that generates lift. Calculus is used in biology and business, chemistry, physics and engineering. It is the foundation for weather prediction and understanding climate change. It is the basis for the algorithms for heart rate and blood oxygen measurement by wristwatches. It is a key part of the language of science. The electron orbitals of chemistry, the stresses of bones and beams, and the business cycle of recession and rebound are all understood primarily through calculus. 10 Calculus has been central to science from the very beginnings. It is no coincidence that the scientific method was introduced and the language of calculus was invented by the same small group of people during the historical period known as the Enlightenment. Learning calculus has always been a badge of honor and an entry ticket to professions. Millions of students’ career ambitions have been enhanced by passing a calculus course or thwarted by lack of access to one. In the 1880s, a hit musical featured “the very model of a modern major general.” One of his claims for modernity: “I’m very good at integral and differential calculus.” (Watch here.) What was modern in 1880 is not modern anymore. Yet, amazingly, calculus today is every bit as central to science and technology as it ever was and is much more important to logistics, economics and myriad other fields than ever before. The reason is that science, engineering, and society have now fully adopted the computer for almost all aspects of work, study, and life. The collection and use of data is growing dramatically. Machine learning has become the way human decision makers interact with such data. Think about what it means to become “computerized.” To take an everyday example, consider video. Over the span of a human life, we moved from a system which involved people going to theaters to watch the shadows recorded on cellulose film to the distribution over the airwaves by low-resolution television, to the introduction of high-def broadcast video, to on demand streaming from huge libraries of movies. Just about anyone can record, edit, and distribute their own video. The range of topics (including calculus) on which you can access a video tutorial or demonstration is incredibly vast. All of this recent progress is owed to computers. 20 The “stuff” on which computers operate, transform, and transmit is always mathematical representations stored as bits. The creation of mathematical representations of objects and events in the real world is essential to every task of any sort that any computer performs. Calculus is a key component of inventing and using such representations. You may be scratching your head. If calculus is so important, why is it that many of your friends who took calculus came away wondering what it is for? What’s so important about “slopes” and “areas” and how come your high-school teacher might have had trouble telling you what calculus is for? The disconnect between the enthusiasm expressed in the preceding paragraphs and the lived experience of students is very real. There are two major reasons for that disconnect, both of which we tackle head-on in this book. First, teachers of mathematics have a deep respect for tradition. Such respect has its merits, but the result is that almost all calculus is taught using methods that were appropriate for the era of paper and pencil–not for the computer era. As you will see, in this book we express the concepts of calculus in a way that carries directly over to the uses of calculus on computers and in genuine work. 30 Second, the uses of calculus are enabled not by the topics of Calc I and Calc II alone, but the courses for which Calc I/II are a preliminary: linear algebra and dynamics. Only a small fraction of students who start in Calc I ever reach the parts of calculus that are the most useful. Fortunately, there is a large amount of bloat in the standard textbook topics of Calc I/II which can be removed to make room for the more important topics. We try to do that in this book. Computing and apps The text provides two complementary ways to access computing. The most intuitive is designed purely to exercise and visualize mathematical concepts through mouse-driven, graphical apps. To illustrate, here is an app that we’ll use in Block 6. You can click on the snapshot to open the app in your browser. More fundamentally, you will be carrying out computing by composing computer commands and text and having a computer carry out the commands. One good way to do this is in a sandbox–a kind of app which provides a safe place to enter the commands. You’ll access the sandbox in your browser (click on the image below to try it now). Once you’ve entered the computer commands, you press the “Run” button to have the commands carried out. (You can also press CTRL+Enter on your keyboard.)40 An important technique for teaching and learning computing is to present scaffolding for computer commands. At first, the scaffolding may be complete, correct commands that can be cut-and-pasted into a sandbox where the calculation will be carried out. Other times it will be left to the student to modify or fill in missing parts of the scaffolding. For example, when we introduce drawing graphs of functions and the choice of a domain, you might see a scaffold that has blanks to be filled in: slice_plot( exp(-3*t) ~ t, domain( --fill in domain-- )) You can hardly be expected at this point to make sense of any part of the above command, but soon you will. After you get used to computing in a sandbox, you may prefer to install the R and RStudio software on your own laptop. This usually provides a faster response to you and lowers the load on the sandbox cloud servers being used by other students. Experienced R users may even prefer to skip the sandbox entirely and use the standard resources of RStudio to edit and evaluate their computer commands. You’d use exactly the same R commands regardless of whether you use a cloud server or your own laptop. Exercises and feedback Learning is facilitated by rapid, formative feedback. Many of the exercises in this book are arranged to give this.50 Short answer exercises are often arranged to give immediate feedback that goes beyond right-or-wrong. In other words, when an answer is incorrect, we try to tell you why it is incorrect to provide a hint to guide you to the correct answer. To see the feedback, place your cursor just after the end an answer choice. You’ll notice that the cursor changes from an I to an arrow when you are in the right spot. For instance, in the following frivolous example , try placing your cursor just after the period in “The element calcium.” It takes several seconds for the feedback to appear, so leave your cursor in place until you see the feedback. Question A What does the word calculus mean literally? A small stoneCorrect. Such stones were part of an apparatus for doing numerical calculations, back in the days before the pencil was invented. A source of trouble to students.︎✘ Calculus sometimes has that reputation, but as they say, “No pain, no gain.” Find a better answer. The element calcium.︎✘ No, but when you get the right answer you’ll realize the two are related in some cases. Some exercises are meant as drill, and provide only right-or-wrong feedback. Still other exercises provide no feedback at all. Typically, these are intended to raise the stakes for graded work, encouraging you to think carefully before choosing an answer. Practice, practice, practice It’s a good practice to practice! The Drill app provides multiple-choice questions designed to be answered at a glance or a very small amount of work on scratch paper. Once you choose a topic, the questions are presented in random order. You get immediate feedback on your answer. If your answer was wrong, the question is queued up again so that you’ll have another chance. At the point where you are answering almost all questions correctly, you’re ready to move on. Software for the course You can get started with the course using just a web browser. In addition to this textbook, bookmark the SANDBOX and DRILL QUESTIONS so you can get to them easily. If you find that the web sites are too slow, you can install both the sandbox and drill apps on your own computer. (You’ll need a computer running Windows or OS-X or Linux. Smartphones or tablets won’t let you do this.) If you already use RStudio, you can skip to step (3). You can use the MOSAIC Calculus software directly from RStudio as an alternative to the sandbox. See step (5). Here are the steps. Steps (1), (2), and (3) together will take almost half an hour. Once they are completed, you will not need to do them again on that computer. If you already have R and RStudio installed, skip to Step (3). Install the R software. You can find reasonable video instructions on the Internet, for instance at YouTube R installer for Windows. R installer for OS-X Install RStudio RStudio installer Not everyone has full permission to install external apps on their laptop. This is particularly true when the computer has been issued by your educational institution. If you are in this situation or, for other reasons, can’t complete steps (1) and (2) completely, seek help from a local expert. Both (1) and (2) have been installed by students on tens of millions of computers. Install the MOSAIC Calculus packages within R. Launch the RStudio app, just as you would launch any other app. When the RStudio app starts, the upper left pane will be labeled “Console” and there will be a prompt: &gt; Copy and paste these commands, one at a time, after the console prompt, pressing return after each command: install.apps(c(&quot;remotes&quot;, &quot;distillr&quot;)) remotes::install_github(&quot;dtkaplan/Zcalc&quot;) The first command will take about 15 seconds to complete and will display some messages in the Console, which you can ignore. NOTE: If you are given a message asking if you want to install in a “personal” or “private” library, say yes. But if you administer a system used by multiple people who need the software, select the option to install for all users. The second command will take about 5 minutes. Hundreds of incomprehensible messages will appear in the Console, all of which you can ignore. (If you are are working from a previous installation of R, you may be asked to update existing packages. Since you can do this at any time in the future, decline the update now.) On a daily basis, whenever you need to use the MOSAIC Calculus software. Open the RStudio App in the usual way for your operating system. In the RStudio console, give these two commands after the console prompt: library(Zcalc) Sandbox() The computing sandbox will open in a browser tab. Closing that tab will return control to the console. When you want to practice with the drill questions for this book, give the command Drill() instead of Sandbox(). Most people find it convenient, when using the software several times a week, simply to keep the RStudio session open and similarly with the browser tab with the Sandbox. Not required. Many students are taught how to use RStudio directly. If you are in this situation, you will be able to take advantage of the many features provided by this sophisticated software. There are two things to keep in mind: At the start of an RStudio session, give the command library(Zcalc) in the console. If you are writing RMarkdown documents, then the following should make sense to you: Include library(Zcalc) in the start-up chunk so that it will run whenever you compile your document. "],["change.html", "Chapter 1 Change 1.1 Quantity vs number 1.2 Functions 1.3 Fundamental model of change 1.4 Exercises", " Chapter 1 Change Calculus is about change, and change is about relationships. Consider the complex and intricate network of relationships that determine climate: a changing climate implies that there is a relationship between, say, global average temperature and time. Scientists know temperature changes with levels of CO2 and methane which themselves change due to their production or elimination by atmospheric and geological processes. A change in one component of climate (e.g., ocean acidification or pH level) provokes change in others. Calculus is foundational to the study of such change relationships. 100 This book presents calculus in terms of two simple concepts central to the study of change: quantities and functions. Those words have everyday meanings which are, happily, close to the specific mathematical concepts that we will be using over and over again. Close … but not identical. So, pay careful attention to the brief descriptions that follow. 1.1 Quantity vs number A mathematical quantity is an amount. How we measure amounts depends on the kind of stuff we are measuring. The real-world stuff might be mass or time or length. It equally well can be velocity or volume or momentum or corn yield per acre. We live in a world of such stuff, some of which is tangible (e.g., corn, mass, force) and some of which is harder to get your hands on and your minds around (acceleration, crop yield, fuel economy). An important use of calculus is helping us conceptualize the abstract kinds of stuff as mathematical compositions of simpler stuff. For example, crop yield incorporates mass with length and time. Later, you’ll see us using the more scientific-sounding term dimension instead of “stuff.” In fact, Chapter 16 is entirely dedicated to the topic of dimensions, but for now it’s sufficient for you to understand that numbers alone are not quantities. Most people are inclined to think “quantity” is the same as “number”; they conflate the two. This is understandable but misguided. By itself a number is meaningless. What meaning does the number 5 have without more context? Quantity, on the other hand, combines a number with the appropriate context to describe some amount of stuff. The first thing you need to know about any quantity is the kind of stuff it describes. A “mile” is a kind of stuff: length. A meter is the same kind of stuff: length. A liter is a different kind of stuff: volume. A gallon and an acre-foot are the same kind of stuff: volume. But an inch (length) is not the same kind of stuff as an hour (time). “Stuff,” as we mean it here, is what we measure. As you know, we measure with units. Which units are appropriate depends on the kind of stuff. Meters, miles, microns are all appropriate units of length, even though the actual lengths of these units differ markedly. (A mile is roughly 1.6 million millimeters.) 110 Only after you know the dimension and units does the number have meaning. Thus, a number is only part of specifying a quantity. Here’s the salient difference between number and quantity when it comes to calculus: All sorts of arithmetic and other mathematical operations can be performed to combine numbers: addition, multiplication, square roots, etc. When performing mathematics on quantities, only multiplication and division are universally allowed. For addition and subtraction, square roots, and such, the operation makes sense only if the dimensions are suitable. The mathematics of units and dimension are to the technical world what common sense is in our everyday world. For instance (and this may not make sense at this point), if people tell me they are taking the square root of 10 liters, I know immediately that either they are just mistaken or that they haven’t told me essential elements of the situation. It’s just as if someone said, “I swam across the tennis court.” You know that person either used the wrong verb—walk or run would work—or that it wasn’t a tennis court, or that something important was unstated, perhaps, “During the flood, I swam across the tennis court.” 1.2 Functions The other central concept in the book is functions in their mathematical and computing sense. Functions are the primary topic for Block 1. A function is something that takes one or more inputs and returns an output. In calculus, we’ll deal mainly with functions that take one or more quantities as inputs and return another quantity as output. But sometimes we’ll work with functions that take functions as input and return a quantity as output. And there will even be functions that take a function as an input and return a function as output. A function is something that takes one or more inputs and returns an output. You’ve almost certainly seen functions expressed in the mathematical form \\(f(x)\\). The function is \\(f()\\), the input is \\(x\\). Perhaps it’s obvious at this point that \\(x\\) is a quantity. \\(f(x)\\) means to apply the function \\(f()\\) to the input quantity \\(x\\), creating the output \\(f(x)\\). In computing, there are explicit notations to identify the output of a function. Strangely, in high-school mathematics there is not. This is a major source of confusion both to students learning calculus and to professionals using computers to do the work of calculus. 120 It’s possible to present calculus without functions. For instance, Isaac Newton, the inventor of calculus, spoke of “flowing quantities.”1 It’s practically impossible (and generally unwise) to do computing without functions. They are a basic building block of every mainstream modern computer language. Since the operations of calculus in actual practice are performed on the computer, common sense suggests that we should describe calculus in terms of functions. That’s what we will do in this book. For you, this may take a bit of getting used to. The reason is that the notation used in high-school algebra and in almost all calculus texts is not the notation of functions. For example, many students are familiar with this famous equation: \\[y = m x + b\\] Using the language of math classes, we can say that the equation involves two “variables.” And from your experience, you know that the variables are \\(x\\) and \\(y\\). The other letters, \\(m\\) and \\(b\\), are something else. Many students will reflexively call them the “slope” and “intercept” of the “line.” You are so used to this that you probably don’t see the huge ambiguity involved. For instance, what is a variable? Common sense suggest that it’s a thing that varies. But if we know the value of \\(x\\), is it still a variable? In statistics, a variable is something else entirely: a trait. Since statistics and mathematics are used together, this is bound to bring confusion. 130 The notation of equations is a poor substitute for the notation of functions. For instance, what is the input and what is the output? It’s not explicitly stated in the equation. If, using the allowed manipulations of algebra, we re-arrange \\[y = m x + b \\ \\ \\text{into}\\ \\ \\ m = \\frac{y-b}{x}\\] do we still have a function? If so, is it the same function as \\(m x + b\\)? Would \\(x\\) be the input or would both \\(x\\) and \\(y\\) be inputs? How about \\(b\\)? And in the re-arrangement, we have a problem if \\(x\\) is zero, a problem we would never encounter in the original \\(y=mx+b\\). The engineers and mathematicians who invented computer languages realized that they had to be explicit in identifying the input, the output, and the function itself; computers demand unambiguous instructions.2 Sorting this out was a difficult process even for those mathematically talented and skilled pioneers of notation. So, you can be forgiven for the occasional confusion you have when dealing with notation that pre-dates computing. 140 In this book we’ll be explicit and consistent in the ways we denote functions so that you can always figure out what are the inputs and how they are being translated into the output. A good start in learning to read the function notation is to see the equivalent of \\(y=m x + b\\) in that notation: \\[g(x) \\equiv m x + b\\] Notice that we’re using \\(\\equiv\\) (with three parallel bars) rather than \\(=\\). Pronounce \\(\\equiv\\) as “is defined to be,” or “equiv” for short. There’s no \\(y\\). The \\(x\\) appears in parentheses on the left side of \\(\\equiv\\) to say explicitly “\\(x\\) stands for the input.” The notation provides a place to state the name of the function, in this case \\(g()\\), so that we can refer to the function unambiguously when we are doing operations on it. Since often we’ll be using many functions at the same time, it’s helpful to have a way to distinguish them by name. The functional notation makes it easy to create many different names, e.g. \\(g_\\star()\\), \\(h_\\text{altitude}()\\), azimuth(), and so on. The high-school habit of using \\(y\\) doesn’t give such flexibility. 1.3 Fundamental model of change At the start of the chapter, it says, “Calculus is about change, and change is about relationships.” The idea of a function gives a definite perspective on this. The relationship is between a function’s input and the function’s output. The input might be day of the year (1-365, often called the “Julian Date”), and the output cumulative rainfall up to that day. Every day it rains, the cumulative rainfall increases. For another function(, the input might be the altitude on your hike up Pikes Peak and the output the air temperature. Typically, as you gain altitude the temperature goes down. With still another function, the input might be the number of hours after noon, the output the brightness of sunlight. As the sun goes down, the light grows dimmer, but only to a point. 150 The rate of change is based on a simple question: If the input changes from \\(x = A\\) to \\(x = B\\), how much does the output change? Of course, the output from function \\(f(x)\\) will be \\(f(x=A)\\) and \\(f(x=B)\\) respectively. The rate-of-change relationship is the ratio \\[\\frac{\\color{red}{f(x=B) - f(x=A)}}{\\color{blue}{B-A}}\\ \\ \\text{also written}\\ \\ \\frac{\\color{red}{\\text{rise}}}{\\color{blue}{\\text{run}}}\\] Why do we focus on the rate of change rather than something simpler, for example the net change \\(\\color{red}{f(x=B) - f(x=A)}\\)? The reason goes back to a scientific breakthrough in the 1600s: the writing down of the Newton’s laws of motion. The language in which these laws were first successfully expressed is the language of rates of change. In the intervening 400 years, the laws have been updated with the theory of relativity and quantum mechanics. These laws too are expressed as rates of change. In undertaking to study just about any quantitative field from engineering to economics you’ll find that theory is expressed using functions and rates of change. You may recognize in the formula for the rate of change a familiar quantity: the slope of a line. Everyone understands what a line is, but the geometry is not our primary concern here. We describe relationships using functions and for us the straight-line function will be a fundamental way of expressing a relationship. Straight-line functions can be written in several ways, but we’ll tend to use two predominant forms: \\[\\line(x) \\equiv a x + b\\ \\ \\ \\text{or}\\ \\ \\ \\ \\line(x) \\equiv a [x - x_0]\\] The two forms are interchangeable, but as you’ll see in upcoming chapters, sometimes it’s more convenient to use one form or the other. In either case, the rate of change is, quantitatively, the value of the parameter \\(a\\). 160 The simple function \\(\\line(x)\\), whose change relationship we understand intuitively, will be used to approximate more complicated change relationships. With the approximation in place, we can do calculations about the change relationships much more easily. Collectively, the set of mathematical concepts and techniques that support describing and calculating on change relationships has the name Calculus. In writing \\(\\line(x) \\equiv a [x - x_0]\\) I used square braces \\(\\left[\\strut\\ \\right]\\) rather than parentheses \\(\\left(\\strut\\ \\right)\\) to surround \\(x - x_0\\). Either could be used and there is no difference in meaning. In traditional mathematical notation, either serves to demarcate a sub-expression. We’ll be using parentheses very extensively in expressions like \\(\\line(x)\\), so it’s nice to have a visual break. 1.4 Exercises Exercise 1.1: VDKUI Since the inputs to functions are quantities, it’s convenient to give them names that remind the human reader what they stand for. The most common name we will use in this book for an input to a function will be: \\(\\large x\\) a general-purpose name that complies with the practice in high-school algebra. Remember, for us \\(x\\) is not an “unknown” as it so often is in algebra; in calculus \\(x\\) is the name of an input. Perhaps next most common as an input name is \\(\\large t\\). This name is typically used when the input is meant to be time. So if we were creating a function to represent the relationship between time (of day) and outdoor brightness, we might use this notation: \\(\\text{brightness}(t)\\) Other input names we will use in this book are \\(y\\), \\(z\\), \\(u\\), \\(v\\), \\(w\\). But we won’t shy away from more descriptive names, like \\(T\\) for “temperature” or \\(V\\) for volume, or even \\(\\text{altitude}\\) (which describes itself). For each of the following function definitions, what is the input name? Question A Input name in \\(g(t) \\equiv 2 t^2 + 8\\)?     t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ Question B Input name in \\(\\line(z) \\equiv a z + b\\)?     t︎✘        u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z\\(\\heartsuit\\ \\) Question C Input name in \\(h(t) \\equiv 2 t^2 + 8 w\\)?     t\\(\\heartsuit\\ \\)       u︎✘        v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ Question D Input name in \\(f(u) \\equiv a u + b + u^2\\)?     t︎✘        u\\(\\heartsuit\\ \\)       v︎✘        w︎✘        x︎✘        y︎✘        z︎✘ Question E Input name in \\(g(w) \\equiv x + 4\\)? t︎✘ u︎✘ v︎✘ wNice!  x︎✘ Tricked you! It’s the name in the parentheses on the left side of \\(\\equiv\\) that matters. Evidently, the output of \\(g(w)\\) doesn’t depend on \\(w\\). That’s not much of a relationship, but it is a common one. y︎✘ z︎✘ Exercise 1.2: KHDUE Each of the plots shows the graph of a function with two inputs, \\(A\\) and \\(B\\), marked. Question A In plot (1), what is the rate of change over the interval \\(A\\) to \\(B\\)? (Pick the closest answer.) -15/2︎✘ Remember to take the difference: \\(f(B) - f(A)\\). 15/2︎✘ The order of A and B is significant! 2/15︎✘ It’s “rise” over “run,” not the other way around. -2/15︎✘ It’s “rise” over “run,” not the other way around. 8/2︎✘ The order of A and B is significant! -8/2Nice!  2/8︎✘ The order of A and B is significant! -2/8︎✘ It’s “rise” over “run,” not the other way around. -15/5︎✘ Remember to take the difference: \\(B - A\\) Question B In plot (2), what is the rate of change over the interval \\(A\\) to \\(B\\)? (Pick the closest answer.) -17/2︎✘ Remember to take the difference: \\(f(B) - f(A)\\). 2/17︎✘ It’s “rise” over “run,” not the other way around. -10/2︎✘ The order of A and B is significant! 10/2Nice!  2/10︎✘ The order of A and B is significant! -2/10︎✘ It’s “rise” over “run,” not the other way around. -17/-5︎✘ Remember to take the difference: \\(B - A\\) Question C We haven’t told you exactly how to do this yet, but give it a try. What is the rate of change near the point marked \\(C\\)? (Pick the closest answer.))     -1/2︎✘        -1︎✘        -2︎✘        -3︎✘        -3/2︎✘        -4︎✘        -5\\(\\heartsuit\\ \\) In Newton’s language, a “flowing quantity” was a fluent and the change in a flowing quantity was a fluxion.↩︎ Actually, it’s common to give computers ambiguous instructions. The computer will carry out the instruction in the way it does, which may not be anything like what the programmer expected or intended.↩︎ "],["pattern-book.html", "Chapter 2 Functions for modeling 2.1 Pattern-book functions 2.2 The power-law family 2.3 Constructing functions 2.4 Function shapes 2.5 Exercises", " Chapter 2 Functions for modeling Mathematical modeling is a process where mathematics is used to understand, analyze, or predict a real-world situation. This process often occurs in cycles that revisit each of the following three stages: 200 Translate the real-world situation into a mathematical form (called a model) Shape the model to answer the question at hand Evaluate the model’s reliability and agreement with the real-world situation We’ll discuss each stage of the modeling process in the following paragraphs and explore as a concrete example the way Sir Isaac Newton applied his theory of universal gravitation to the motion of planets. The first stage of mathematical modeling involves translating the real-world situation into a mathematical form; the output or result of this stage is called a mathematical model. In this book the objective of the translation phase will almost always be to choose or construct one or more functions that represent the relationships involved in the system being studied. You’ll learn several strategies for turning what you know about the system into appropriate functions. And you’ll learn some standard frameworks for organizing your ideas to help you determine how functions will be related, for instance Newton’s framework relating position, velocity, and acceleration as rates of change of one another. 210 As a concrete example of this first stage, consider how Newton had to translate observations about planetary motion into a mathematical form. He was trying to make sense of the motion of planets in light of his novel theory that gravity is a universal force of attraction between all masses, rather than something peculiar to celestial bodies. He showed that the motions of planets, moons, and the Sun are governed by the same basic principles as an apple falling from a tree. To do this, he modeled force as a quantity that can be measured, simplified the complexity of the planets to mere masses (another measurable quantity), and supposed that position and motion were related. His theory of the motion of planets was based on two fundamental mathematical models: First, \\[F = ma\\ \\ \\ \\text{(Newton&#39;s Second Law)}\\] which relates force, mass, and acceleration. Second, the \\[F = \\frac{G m_1 m_2}{d^2}\\ \\ \\ \\text{(Law of Universal Gravitation)}\\] (sometimes called the inverse square law), which relates the mass of two objects (\\(m_1\\) and \\(m_2\\)), and the distance between them to the force of gravitation. We’ll get to the purpose of the \\(G\\) in Chapter 16, but for the moment, understand that this process of translating observations about planetary motion into a mathematical form is characteristic of the first stage of the modeling process. The second stage of modeling involves doing mathematical work to shape the model into a form that can directly answer the modeler’s question of interest. For instance, Newton knew from previous astronomical observations and Kepler’s theorizing that planets’ orbits are elliptical in shape that he needed to do some work on his two models in order to deduce the orbital shapes consistent with his Second Law and Universal Gravitation. In this book you’ll learn to use several key tools for doing mathematical work on functions. We might as well name them now: differentiation, anti-differentiation, optimization, and zero-finding. These tools derive directly from Newton’s work on planetary motion, but thankfully, we are not constrained to using the technology of his day in their application. Instead, we will leverage modern computers to make each tool easier to use. Your job is to learn enough about them that you will know when, how, and why to use each tool. The third and final stage of mathematical modeling often involves evaluating the model. The goal is to determine how reliable is the model’s answer and to see if the consequences of the model are consistent with what happens in the real world. The evaluation often leads to a re-assessment of the model and a return to stage 1 to improve things. The resulting loop is called the modeling cycle. For example, it seems likely that Newton did not start out knowing that gravitation follows an inverse square law. Perhaps he went through several modeling cycles until he found the form that was consistent with Kepler’s elliptical orbits. In this book you’ll learn techniques for comparing models to data and for making predictions from models that can be compared to observations. You’ll also see examples of when the evaluation of a function suggests revisions that might improve the model. 2.1 Pattern-book functions In this section, we introduce the Pattern-book functions–a short list of simple mathematical functions that provide a large majority of the tools for representing the real world as a mathematical object. Think of the items in this list as different actors, each of whom is skilled in portraying an archetypical character: hero, outlaw, lover, fool, comic. A play brings together different characters, costumes them, and relates them to one another through dialog or other means. All this is for the purpose of telling a story and providing insight into human relationships and emotions. 230 A mathematical model is a kind of story and a mathematical modeler a kind of playwright. She combines mathematical character types to tell a story about relationships. But there is only a handful of archetypal mathematical functions, the analog of the character actors in drama and comedy. In creating a mathematical model, you clothe the actors to suit the era and location and assemble them together in harmony or discord. Costume designers and others do not start from nothing. There are reference guides that collect patterns which a designer can customize to the needs at hand. These reference guides are sometimes called “pattern books.” (See Figure 2.1 for an example.) Figure 2.1: A pattern book of theatrical costumes Similarly, we will start with a pattern set of functions that have been collected from generations of experience. To remind us of their role in modeling, we’ll call these pattern-book functions. These pattern-book functions are useful in describing diverse aspects of the real world and have simple calculus-related properties that make them relatively easy to deal with. There are just a handful pattern-book functions from which untold numbers of useful modeling functions can be constructed. Mastering calculus is in part a matter of becoming familiar with the mathematical connections among the pattern-book functions. (You’ll see these in due time.) Here is a list of our pattern-book functions showing both a traditional notation and the R formula: Pattern name Traditional notation R notation exponential \\(e^x\\) exp(x) logarithm (“natural log”) \\(\\ln(x)\\) log(x) sinusoid \\(\\sin(x)\\) sin(x) square \\(x^2\\) x^2 proportional \\(x\\) x constant \\(1\\) 1 reciprocal \\(1/x\\) or \\(x^{-1}\\) 1/x gaussian \\(\\dnorm(x)\\) dnorm(x) sigmoid \\(\\pnorm(x)\\) pnorm(x) These functions are shown with a traditional formula notation to highlight the connections to the math you already studied, and \\(x\\) is used as the input to these functions out of tradition. 240 The list of pattern-book functions is short. You should memorize the names and be able easily to associate each name with the traditional notation. Over the next several chapters, we will introduce several features of functions. These features include: monotonicity up or down concavity up or down horizontal asymptotes vertical asymptotes periodicity continuity By the end of Block 1, you should be able to list all the basic pattern-book functions and describe the features relevant to each. 250 These pattern-book functions are widely applicable. But nobody would confuse the pictures in a pattern book with costumes that are ready for wear. Each pattern must be tailored to fit the actor and customized to fit the theme, setting, and action of the story. 260 Similarly, the mathematical functions used in real-world applications—as opposed to the pattern-book functions—are adorned with parameters. Parameters do the work of fitting the pattern to the units and dimensions of the input and output quantities. Continuing our analogy, if the pattern is for a sock, the parameter is the size needed to fit the foot. And just as there are different systems for sizing shirts, trousers, shoes, and so on, tradition has favored idioms for parameterizing the different kinds of pattern-book functions. We haven’t yet introduced these idioms, but when we do in Chapter 7 you are well advised to learn to interpret them at a glance. There is universal agreement about the names of all of the pattern-book functions except for two: the gaussian and the logarithm. The name “gaussian” is not descriptive; the graph of a gaussian function looks like a camel’s hump, the curve of a bell, or a bump in the road. There are all sorts of bell-shaped functions that differ slightly in their origins and detailed shape. In this book, we may use the terms “hump,” “bell,” or “bump” to remind you of the basic shape, but the specific mathematical function we have in mind is called the gaussian function, named after a tremendously influential mathematician, Carl Friedrich Gauss (1777-1855). This function, first published in 1718 (before Gauss was born), has an important role throughout physical science, technology, and data science. In probability theory and the social sciences, the shape of the function is given the simple name “normal distribution”; it shows up in so many places to be considered utterly unsurprising and “normal.” The name “logarithm” is anything but descriptive. The name was coined by the inventor, John Napier (1550-1617), to emphasize the original purpose of his invention: to simplify the work of multiplication and exponentiation. The name comes from the Greek words logos, meaning “reasoning” or “reckoning,” and arithmos, meaning “number.” A catchy marketing term for the new invention, at least for those who speak Greek! Although invented for the practical work of numerical calculation, the logarithm function has become central to mathematical theory as well as modern disciplines such as thermodynamics and information theory. The logarithm is key to the measurement of information and magnitude. As you know, there are units of information used particularly to describe the information storage capacity of computers: bits, bytes, megabytes, gigabytes, and so on. Very much in the way that there are different units for length (cm, meter, kilometer, inch, mile, …), there are different units for information and magnitude. For almost everything that is measured, we speak of the “units” of measurement. For logarithms, instead of “units” by tradition another word is used: the base of the logarithm. The most common units outside of theoretical mathematics are base-2 (“bit”) and base-10 (“decade”). But the unit that is most convenient in mathematical notation is “base e,” where \\(e = 2.71828182845905...\\). This is genuinely a good choice for the units of the logarithm, but that’s hardly obvious to anyone encountering it for the first time. To make the choice more palatable, it’s marketed as the “base of the natural logarithm.” In this book, we’ll be using this natural logarithm as our official pattern-book logarithm. 2.2 The power-law family Three of the pattern-book functions—\\(1/x\\), \\(x\\), \\(x^2\\)—actually belong to an infinite family called the power-law functions. The three shown above occur so often and are so closely related to the other pattern-book functions that they receive their own special names (inverse, proportional, and square) and place in our list; however, it is the family of power-law functions that form the more general pattern needed for modeling. Some other examples of power-law functions are \\(x^3, x^4, \\ldots\\) as well as \\(x^{1/2}\\) (also written \\(\\sqrt{x}\\)), \\(x^{1.36}\\), and so on. Some of these also have special (albiet less frequently used) names, but all of the power-law functions can be written as \\(x^p\\), where \\(x\\) is the input and \\(p\\) is a number. 290. Within the power-law family, it is helpful to know and be able to differentiate between several overlapping groups: The monomials. These are power-law functions such as \\(m_0(x) \\equiv x^0\\), \\(m_1(x) \\equiv x^1\\), \\(m_2(x) \\equiv x^2\\), \\(\\ldots\\), \\(m_p(x) \\equiv x^p\\), \\(\\ldots\\), where \\(p\\) is a whole number (i.e., a non-negative integer). Of course, \\(m_0()\\) is exactly the same as the constant function, since \\(x^0 = 1\\). Likewise, \\(m_1(x)\\) is the same as the identity function since \\(x^1 = x\\). As for the rest, they have just two general shapes: both arms up for even powers of \\(p\\) (like in \\(x^2\\), a parabola); one arm up and the other down for odd powers of \\(p\\) (like in \\(x^3\\), a cubic). Figure 2.2: Graphs of the monomial functions from order 2 to 5. The negative powers. These are power-law functions where \\(p&lt;0\\), such as \\(f(x) \\equiv x^{-1}\\), \\(g(x) \\equiv x^{-2}\\), \\(h(x) \\equiv x^{-1.5}\\). For negative powers, the size of the output is inversely proportional to the size of the input. In other words, when the input is large (not close to zero) the output is small, and when the input is small (close to zero), the output is very large. This behavior happens because a negative exponent like \\(x^{-2}\\) can be rewritten as \\(\\frac{1}{x^2}\\); the input is inverted and becomes the denominator, hence the term “inversely proportional.” Figure 2.3: Graphs of power-law functions with negative exponents. Note that the function output is very large when \\(x\\) is near zero. The non-integer powers, e.g. \\(f(x) = \\sqrt{x}\\), \\(g(x) = x^\\pi\\), and so on. When \\(p\\) is either a fraction or an irrational number (like \\(\\pi\\)), the real-valued power-function \\(x^p\\) can only take non-negative numbers as input. In other words, the domain of \\(x^p\\) is \\(0\\) to \\(\\infty\\) when \\(p\\) is not an integer. You have likely already encountered this domain restriction when using the power law with \\(p=\\frac{1}{2}\\), since \\(f(x)\\equiv x^{1/2}=\\sqrt{x}\\), and the square root of a negative number is not a real number. Some of you may have heard about the imaginary numbers that allow you to take the square root of a negative number, but for the moment, you only need to understand that when working with real-valued power-law functions with non-integer exponents, the input must be non-negative. (The story is actually a bit more complicated since, algebraically, rational exponents like \\(1/3\\) or \\(1/5\\) with an odd-valued denominator can be applied to negative numbers. Computer arithmetic, however, does not recognize these exceptions.) Figure 2.4: The domain of power-law functions with non-integer power is \\(0 \\leq x &lt; \\infty\\). 2.3 Constructing functions Often, modeling involves building a complicated function out of the simple shapes provided by the pattern-book functions. This is not yet the time to say much more, but we do want to show you what such a construction looks like in both a traditional style of notation and the style used for programming computers. As you’ll see later, in Chapter 11, to make complicated functions we generally combine simpler functions in one or more of three different ways: linear combinations, products, and composition. 270 As a very brief introduction, consider these examples. A polynomial is a linear combination of simple functions called “monomials.” These are likely familiar to you in traditional notation: \\[g(x) \\equiv 2 + 3 x - 7x^2\\] In the R/mosaic computer notation we will be using the function \\(g()\\) would be defined like this: g &lt;- makeFun(2 + 3*x - 7*x^2 ~ x) Notice that the R/mosaic notation has most elements in common with the traditional notation, but the order is somewhat different. g &lt;- means to give the function the name \\(g.\\) (In this book, I usually write function names with a pair of parentheses as a suffix, e.g. \\(g(x).\\) This reminds you that the name refers to a function. But the R name is simply g, even though I often write it as g() in the text.) The &lt;- is called the assignment operator, the instruction in R to give a name to an object. Here, the object will be the R function created by makeFun(). 2 + 3*x - 7*x^2 is the formula for the function, that is, the expression found on the right-hand side of \\(\\equiv\\) in the traditional notation. ~ x is the part of the R/mosaic notation that says, “The name of the input will be x.” In traditional notation, the name of the input is in parentheses following the name of the function \\(g\\,{\\mathbf{(x)}}\\), but in R/mosaic notation, the two are in different places: the function name is to the left of the assignment operator (&lt;-) and the name of the name of the input follows the tilde (~). The formula and the name of the input are always related in the R/mosaic notation by what is called a tilde expression. The formula is on the left-hand side of the tilde (~) and the argument name is on the right-hand side of the tilde. If there is more than one argument, all the names go on the right-hand side of the tilde expression, separated by &amp;. (Some people prefer to use + as the separator. That’s fine, but we use the &amp; convention throughout this book.) makeFun() is the R/mosaic operator that takes the information contained in the tilde expression and turns it into an R function; it literally “makes an R function,” hence the name, makeFun(). Functions constructed as a product of simple functions can look like this in tradition notation: \\[h(t) \\equiv \\sin(t) e^{-t}\\] and like this in computer notation: h &lt;- makeFun(sin(t)*exp(-t) ~ t) In function composition, the output of one function is the input to a second function, as with \\[H(t) \\equiv \\sin\\left(e^{-t}\\right)\\] or, in computer notation, H &lt;- makeFun(sin(exp(-t)) ~ t) 2.4 Function shapes You are going to be building models by selecting an appropriate function or by putting functions together in various ways. This might remind you of Lego blocks. As you know, Legos come in different shapes: \\(6\\times 2\\), \\(4\\times 2\\), \\(2\\times 2\\), and so on. Similarly, each of the pattern-book functions has a distinctively shaped graph. Knowing the shapes by name will help you when you need to build a model. 280 The proportional function and the constant function have extremely simple shapes. Note that the graph of a constant function is not just any line, but a line with zero slope. ## Warning in validate_domain(domain, free_args): Missing domain names: x ## Warning in validate_domain(domain, free_args): Missing domain names: x It is tempting to deny that the constant function is a function. After all, the output does not depend on the input. Still, this situation arises frequently in modeling: you start out supposing that one quantity depends on another, but it sometimes turns out that it does not. Since functions are our way of representing relationships, it is helpful to have a function for the situation of “no relationship.” The constant function does this job. You may also notice the proportional function shown above does nothing to change the input; it simply returns as output the same value it received as input. For this reason, the proportional pattern-book function (\\(f(x)=x\\)) is sometimes called the identity function. Later we will show how this simple pattern-book function can be endowed with parameters that form the basis of many change relationships. Functions like sin(), log(), pnorm() are always referred to by name with parentheses enclosing the arguments. Other functions are traditionally written without a name, for instance, like \\(e^x\\) or \\(1/x\\). These two different conventions can lead to confusion. There is little that can be done to avoid that confusion, since the dual conventions appear throughout technical work. If absolute consistency of notation were the prime goal, we could have written this book in a style that gives a name to every pattern-book function writes it in the name/parentheses style. Something like this: reciprocal &lt;- makeFun(1/t ~ t) constant &lt;- makeFun(1 ~ z) square &lt;- makeFun(x^2 ~ x) These would be used in the ordinary way, for instance: reciprocal(7) ## [1] 0.1428571 constant(123.67) ## [1] 1 square(19) ## [1] 361 Writing reciprocal(\\(x\\)) instead of \\(1/x\\) is long-winded, which is perhaps why you never see it. But when you see \\(1/x\\) you should think of it as a function being applied to \\(x\\) and not as a bit of arithmetic. By the way … I used different names for the inputs in these three functions just to remind the reader that, for functions with one input, the name has no significance. You just have to make sure to use the same name on the left- and right-hand sides of the tilde expression. 2.5 Exercises Exercise 2.1: H2KG3 Copy and paste the R/mosaic command below into a SANDBOX. The command shows a simple way to graph a function, in this case exp(). Press “Run code” to execute the command and draw the graph. slice_plot(exp(x) ~ x, domain(x=c(-3, 3))) In this exercise, you’ll be modifying the sandbox code to draw different functions, so you can examine their shapes. Your task is to read and interpret the graphs of the basic modeling functions. Here, you will be looking for zero-crossings: the neighborhood of a point in the function’s domain where the output of the function is negative for inputs on one side and positive for inputs on the other side. If zero is touched but not crossed, we’ll call that “touched zero.” Make a list of the pattern-book functions. For each function in the list, say whether the function crosses zero, touches zero but doesn’t cross, or doesn’t touch at all in the part of the domain shown in the graphic: \\(-3 \\leq x \\leq 3\\). Also note if the value of the function appears to be reaching a horizontal asymptote at zero for very negative \\(x\\), for very positive \\(x\\), for both, or neither. We’ll show you the answers for the exponential function. You’ll have to modify the computer command to graph the other pattern-book functions. function name R formula zero in domain shown in graph asymptotic zero exponential exp(x) no zeros for very negative \\(x\\) logarithm sinusoid square proportional constant reciprocal gaussian sigmoid Exercise 2.2: Pdt9jy On a piece of paper, sketch from memory a graph of each of the nine pattern-book functions. Exercise 2.3: VIW7T For each of the pattern-book functions except the reciprocal, the graph crosses either the vertical axis (that is \\(x=0\\)) or the horizontal axis (that is, \\(f(x) = 0\\)), or both. It’s helpful to know the exact quantitative value for the output where the function graph crosses the vertical axis. To answer these questions, you will want to open a SANDBOX to try the various possibilities. Question A What is the exact output of the pattern-book exponential function when the input is \\(x=0\\)?     0︎✘        0.3989423︎✘        1/2︎✘        1\\(\\heartsuit\\ \\) Question B What is the exact output of the pattern-book sine function when the input is \\(x=0\\)?     0\\(\\heartsuit\\ \\)       0.3989423︎✘        1/2︎✘        1︎✘ Question C What is the exact output of the pattern-book sigmoid function when the input is \\(x=0\\)?     0︎✘        0.3989423︎✘        1/2\\(\\heartsuit\\ \\)       1︎✘ Question D What is the output (to several digits) of the pattern-book hump function when the input is \\(x=0\\)?     0︎✘        0.3989423\\(\\heartsuit\\ \\)Right. But 0.4 will do when you’re sketching a graph.       1/2︎✘        1︎✘ Question E What is the exact output of the pattern-book constant function?     0︎✘        0.3989423︎✘        1/2︎✘        1\\(\\heartsuit\\ \\) Exercise 2.4: Qj0JAr Some of our pattern-book functions have a distinctive property called scale invariance. This means the graph of the function looks the same even when plotted on very different horizontal and vertical axes. The function \\(\\ln(x)\\) plotted on two different scales in Figure 2.5 shows that the graph of the function has practically the same shape. Figure 2.5: The logarithm function has the same overall shape even when plotted on domains of very different scales. Figure 2.6 shows a power-law function, \\(g(x) \\equiv x^2\\), which is also scale invariant. Figure 2.6: The function \\(x^2\\) shown on two very different domain scales has the same overall shape. Other pattern-book functions are not scale invariant, for example \\(\\sin(x)\\). Figure 2.7: The sin( ) function is not scale invariant. In contrast to scale-invariant functions, some of our pattern-book functions have a characteristic scale. This is a domain length over which the whole of a characteristic feature of the function is evident. Graphing on larger domains simply squashes down the characteristic feature to a small part of the graphic domain. For instance, in the \\(\\sin()\\) function the cycle is a characteristic feature. The cycle in the pattern-book sinusoid has a characteristic length of \\(2 \\pi\\), the length of the cycle. Consequently, the graph looks different depending on the length of the graphics domain in multiples of the characteristic length. You can see from Figure 2.7 that the graph on the domain \\(-10 &lt; x &lt; 10\\), that is, about 3 times the characteristic scale, looks different from the graph on the larger domain that has a length 30 times the characteristic scale. The output of the sigmoid function runs from 0 to 1 but reaches these values only asymptotically, as \\(x \\rightarrow \\pm \\infty\\). In defining a characteristic scale, it would be reasonable to look at the length of the domain that takes the output from, say, 0.01 to 0.99. In other words, we want the characteristic scale to be defined in a way that captures almost all the action in the output of the function. For a gaussian, a reasonable definition of a characteristic scale would be the length of domain where the output falls to about, say, 1% of it’s peak output. Question A The gaussian (hump) function dnorm() has a characteristic scale. Which of these is a domain length that can encompass the characteristic shape of the gaussian?     0.1︎✘        1︎✘        6\\(\\heartsuit\\ \\)The domain \\(-3 &lt; x &lt; 3\\) supports practically everything.       16︎✘        256︎✘ Question B The sigmoid function pnorm() also has a characteristic scale. Which of these is a domain length that can encompass the characteristic shape of the sigmoid?     0.1︎✘        1︎✘        6\\(\\heartsuit\\ \\)       16︎✘        256︎✘ Throughout science, it’s common to set a standard approach to defining a characteristic scale. For instance, the characteristic scale of an aircraft could be taken as the length of body. Gaussian and sigmoids are so common throughout science that there is a convention for defining the characteristic scale called the standard deviation. For the pattern book gaussian and sigmoid, the standard deviation is 1. That’s much shorter than the domain that captures the bulk of action of the gaussian or sigmoid. For this reason, statisticians in practice use a characteristic scale of \\(\\pm 2\\) or \\(\\pm 3\\) standard deviations. "],["structure-of-a-function.html", "Chapter 3 Structure of a function 3.1 Inputs to output 3.2 A bureaucratic analogy 3.3 Domain: input space 3.4 Range: output space 3.5 Formulas in R 3.6 Exercises", " Chapter 3 Structure of a function [F-10] Recognize that functions are a way of representing (storing) what we know and be able to use properly the basic nomenclature of functions). The ideas which are here expressed so laboriously are extremely simple …. The difficulty lies, not in the new ideas, but in escaping from the old ones, which [branch]3, for those brought up as most of us have been, into every corner of our minds. — J. M Keynes, 1936, The General Theory of Employment, Interest, and Money, 1936 You’re used to mathematical functions being stated as formulas, expressions composed of addition, multiplication, square roots, and so on. 300 The expression \\(m x + b\\) uses a multiplication and an addition. \\(\\sqrt{\\strut 1 - x^2}\\) uses squaring (\\(x^2\\)), subtraction and square root. \\(3\\sin\\left(\\frac{2 \\pi}{P} x\\right) + 4\\) uses multiplications, division, sin function, and an addition There’s nothing in the mathematical concept of “function” that requires a formula. And computer functions in general are not based on an algebraic formula. The word used to describe the internals of a computer function is algorithm, which is a generalization of “formula” that includes many non-arithmetic operations such as looping and branching. When you press a function button like “sin” or “ln” or “exp” on a calculator, you likely have little idea what process is being set in action to create the result. Indeed, very few people do, even among professionals. This is not a problem. You can name the function that’s appropriate for your purpose, you can apply the function to an input, and you can do something with the output. This chapter is about what functions are and how functions are organized: where the name goes, where the input goes, and what determines the output. 3.1 Inputs to output We will be using formulas extensively, but best if you can visualize functions generally as something that’s not necessarily a formula. This section gives another perspective on how to describe and think about a function. Remember, functions take inputs and return the corresponding output. Any arrangement that accomplishes this (and ensures the same output is always returned for a given input) is a function, even if arithmetic is nowhere in sight. For example, a simple and useful framework for organizing information is the table, generally set up as an array of rows and columns. A table can be thought of as a function, despite it not containing any formulas or arithmetic: it relates one or more columns (the input) to another column (the output). For instance, here is a table about several internal combustion engines of various sizes: Engine mass BHP RPM bore stroke Webra Speed 20 0.25 0.78 22000 16.5 16 Enya 60-4C 0.61 0.84 11800 24.0 22 Honda 450 34.00 43.00 8500 70.0 58 Jacobs R-775 229.00 225.00 2000 133.0 127 Daimler-Benz 609 1400.00 2450.00 2800 165.0 180 Daimler-Benz 613 1960.00 3120.00 2700 162.0 180 Nordberg 5260.00 3000.00 400 356.0 407 Cooper-Bessemer V-250 13500.00 7250.00 330 457.0 508 Each row of the table reports on one, specific engine. Each column is one attribute of an engine. Using such tables can be easy. For example, if asked to report how fast the engine named “Enya 60-4C” spins, you would go down to the Enya 60-4C row and over to the “RPM” column and read off the answer: 11,800 revolutions per minute (RPM). A table like this describes the general relationships between engine attributes. For instance, we might want to understand the relationship (if any) between RPM and engine mass, or relate the diameter (that is, “bore”) and depth (that is, “stroke”) of the cylinders to the power generated by the engine. Any single entry in the table doesn’t tell us about such general relationships; we need to consider the rows and columns as a whole. 310 If you examined the relationship between engine power (BHP) and bore, stroke, and RPM, you will find that (as a rule) the larger the bore and stroke, the more powerful the engine. That’s a qualitative description of the relationship. Most educated people are able to understand such a qualitative description. Even if they don’t know exactly what “power” means, they have some rough conception of it. Often, we’re interested in having a quantitative description of a relationship such as the one (bore, stroke) \\(\\rightarrow\\) power. Remarkably, many otherwise well-educated people are uncomfortable with the idea of using quantitative descriptions of a relationship: what sort of language the description should be written with; how to perform the calculations to use the description; how to translate between data (such as in the table) and a quantitative description; how to translate the quantitative description to address a particular question or make a decision. This course is about constructing and using such quantitative descriptions: that is, mathematical modeling. Skills for modeling are essential for work in engineering and science, and highly valued in many other fields in commerce, management, and government. Often, the work of applying such quantitative skills is called calculation. The name calculus is used to describe the methods that are widely used for undertaking calculations. Functions are a fundamental way of organizing mathematical models and calculations. You have undoubtedly seen them in your previous mathematics education, but it’s worth reviewing them from the basics so that we can share a vocabulary for communicating about them. A function is a transformation from one or more inputs to an output. To keep things simple, for now we’ll focus on inputs and outputs that are numeric. Later, we’ll need a more nuanced view of “numeric” that takes into account the different kinds of things that are represented by numbers, e.g. length, power, RPM. 3.2 A bureaucratic analogy You’ll have many opportunities to work with functions defined by formulas. Here, the emphasis is that functions are really just a way of storing a correspondence of inputs to outputs and that formulas need have nothing to do with it except as one way of describing the pattern. Instead of a formula, imagine a long corridor with a sequence of offices, each identified by a room number. The input to the function is the room number. To evaluate the function for that input, you knock on the appropriate door and, in response, you’ll receive a piece of paper with a number to take away with you. That number is the output of the function. 320 This will sound at first too simple to be true, but … In a mathematical function each office gives out exactly the same number every time someone knocks on the door. Obviously, being a worker in such an office is highly tedious and requires no special skill. Every time someone knocks on the worker’s door, he or she writes down the same number on a piece of paper and hands it to the person knocking. What that person will do with the number is of absolutely no concern to the office worker. The utility of such functions depends on the artistry and insight of the person who creates them: the modeler. An important point of this course is to teach you some of that artistry. Hopefully you will learn through that artistry to translate your insight to the creation of functions that are useful in your own work. But even if you just use functions created by others, knowing how functions are built will be helpful in using them properly. In the sort of function just described, all the offices were along a single corridor. Such functions are said to have one input, or, equivalently, to be “functions of one variable.” To operate the function, you just need one number: the address of the office from which you’ll collect the output. Many functions have more than one input: two, three, four, … tens, hundreds, thousands, millions, …. In this course, we’ll work mainly with functions of two inputs, but the skills you develop will be applicable to functions of more than two inputs. What does a function of two inputs look like in our office analogy? Imagine that the office building has many parallel corridors, each with a numeric ID. To evaluate the function, you need two numeric inputs: the number of the corridor and the number of the door along that corridor. With those two numbers in hand, you locate the appropriate door, knock on it and receive the output number in return. 330 Three inputs? Think of a building with many floors, each floor having many parallel corridors, each corridor having many offices in sequence. Now you need three numbers to identify a particular office: floor, corridor, and door. Four inputs? A street with many three-input functions along it. Five inputs? A city with many parallel four-input streets. And on and on. Applying inputs to a function in order to receive an output is only a small part of most calculations. Calculations are usually organized as algorithms, which is just to say that algorithms are descriptions of a calculation. The calculation itself is … a function! How does the calculation work? Think of it as a business. People come to your business with one or more inputs. You take the inputs and, following a carefully designed protocol, hand them out to your staff, perhaps duplicating some or doing some simple arithmetic with them to create a new number. Thus equipped with the relevant numbers, each member of staff goes off to evaluate a particular function with those numbers. (That is, the staff member goes to the appropriate street, building, floor, corridor, and door, returning with the number provided at that office.) The staff re-assembles at your roadside stand, you do some sorting out of the numbers they have returned with, again following a strict protocol. Perhaps you combine the new numbers with the ones you were originally given as inputs. In any event, you send your staff out with their new instructions—each person’s instructions consist simply of a set of inputs which they head out to evaluate and return to you. At some point, perhaps after many such cycles, perhaps after just one, you are able to combine the numbers that you’ve assembled into a single result: a number that you return to the person who came to your business in the first place. A calculation might involve just one function evaluation, or involve a chain of them that sends workers buzzing around the city and visiting other businesses that in turn activate their own staff who add to the urban tumult. The reader familiar with floors and corridors and office doors may note that the addresses are discrete. That is, office 321 has offices 320 and 322 as neighbors. Calculus is about continuous functions, so we need a way to accept, say, 321.487… as an input. There is no such office. 340 A slight modification to the procedure will produce a continuous function. It works like this: for an input of 321.487… the messenger goes to both office 321 and 322 and collects their respective outputs. Let’s imagine that they are -14.3 and 12.5 respectively. All that’s needed is a small calculation, which in this case will look like \\[-14.3 \\times (1 - 0.487...) + 12.5 \\times 0.487...\\] This is called linear interpolation and lets us construct continuous functions out of discrete data. In Blocks 2 and 5 we’ll discuss other widely used ways to do this that produce not just continuous functions but smooth functions. Understanding the difference between continuous and smooth will have to wait until we introduce a couple more calculus concepts: derivatives and limits. 3.3 Domain: input space As you know, there is a powerful way of thinking about numbers in terms of space and geometry. For instance, a single number corresponds to a point on a line: the so-called number line. A pair of inputs, say, (x, y) corresponds to a point in a plane, often called the Cartesian coordinate plane. Three numbers corresponds to a point in space, perhaps organized into (x, y, z) of a Cartesian space. There are higher-dimensional spaces, but usually special training is needed to become comfortable with them. If you are having this discomfort, you might prefer to work with the office analogy. Just for fun, here’s how you can think of a 10-dimensional space: 10 numbers, one telling you which planet, the next specifying the continent on that planet, and so on for country, state, city, street, building, floor, corridor, door. The set of inputs with which the function can be evaluated is called the domain of the function. Sometimes we describe the domain as a space, e.g. the number line, the plane, and so on. Sometimes domains including more restrictions. For instance, a particular input might have meaning only when positive, with no offices corresponding to negative values for that input. Or, an input might be restricted to be in the interval 0 to 1. Sometimes in calculus, the domain excludes an isolated point. For instance, there may be no office at the door marked 0 but the neighboring doors open into working offices. 350 3.4 Range: output space The range of a function is the set of all the outputs that can be produced. Since at this stage we’re working only with functions that return a single number as output, it’s common to describe the range as all or part of the number line. For instance, some functions only have positive outputs. Other functions’ outputs are always in the interval 0 to 1. (This is the case, for instance, when the function returns a probability as the output.) Weather forecasting by numerical process Weather forecasting by numerical process is a highly influential book, from 1922, by Lewis Fry Richardson. He envisioned a calculation for a weather forecast as a kind of function. The domain for the forecast is the latitude and longitude of a point on the globe, rather than the rectilinear organization of corridor. One fantastic illustration of the idea shows a building constructed in the form of an inside-out globe. Source At each of many points on the globe, there is a business. (You can see this most clearly in the foreground, which shows several boxes of workers.) 360 Figure 3.1: An artist’s depiction of the organization of calculations for weather forecasting by Richardson’s system. In each business there is a person who will report the current air pressure at that point on the globe, another person who reports the temperature, another reporting humidity, and so on. To compute the predicted weather for the next day, the business has a staff assigned to visit the neighboring businesses to find out the pressure, temperature, humidity, etc. Still other staffers take the collected output from the neighbors and carry out the arithmetic to translate those outputs into the forecast for tomorrow. For instance, knowing the pressure at neighboring points enables the direction of wind to be calculated, thus the humidity and temperature of air coming in to and out of the region the business handles. In today’s numerical weather prediction models, the globe is divided very finely by latitude, longitude, and altitude, and software handles both the storage of present conditions and the calculation from that of the future a few minutes later. Repeating the process using the forecast enables a prediction to be made for a few minutes after that, and so on. Some of the most important concepts in calculus relate to the process of collecting outputs from neighboring points and combining them: for instance finding the difference or the sum. To illustrate, here is the first set of equations from Richardson’s Weather forecasting … written in the notation of calculus: 370 You can hardly be expected at this point to understand the calculations described by these equations, which involve the physics of air flow, the coriolis force, etc. but it’s worth pointing out some of the notation: The equations are about the momentum of a column of air at a particular latitude (\\(\\phi\\)) and longitude. \\(M_E\\) and \\(M_N\\) are east-west and north-south components of that momentum. \\(\\partial M_E /\\partial t\\) is the rate at which the east-west momentum will change in the next small interval of time (\\(\\partial t\\)). \\(p_G\\) is the air pressure at ground level from that column of air. \\(\\partial p_G / \\partial n\\) is about the difference between air pressure in the column of air and the columns to the north and south. Calculus provides both the notation for describing the physics of climate and the means to translate this physics into arithmetic calculation. 3.5 Formulas in R You’re familiar to some extent with traditional mathematical notation for formulas. Yet in applied work, you will often need to translate such formulas into computer notation. This book is written using R, but particularly when mathematical formulas are involved, commands are similar across many computer languages, so what you learn will be applicable to any other languages such as Python or MATLAB. The first high-level computer language was FORTRAN, released in 1957. The name stands for “formula translation.” FORTRAN enabled arithmetic operations to be written in a way very nearly that of traditional notation. Until then, computer programs were written using alpha-numeric codes that were meaningless to a casual reader. We unfortunately still use the term “computer code” to refer to programs, despite 70-years progress in improving legibility. The best way to learn to implement mathematical formulas in a computer language is to read examples and practice writing them. Here are some examples: Traditional notation R notation \\(3 + 2\\) 3 + 2 \\(3 \\div 2\\) 3 / 2 \\(6 \\times 4\\) 6 * 4 \\(\\sqrt{\\strut4}\\) sqrt(4) \\(\\ln 5\\) log(5) \\(2 \\pi\\) 2 * pi \\(\\frac{1}{2} 17\\) (1 / 2) * 17 \\(17 - 5 \\div 2\\) 17 - 5 / 2 \\(\\frac{17 - 5}{\\strut 2}\\) (17 - 5) / 2 \\(3^2\\) 3^2 \\(e^{-2}\\) exp(-2) Each of these examples has been written using numbers as inputs to the mathematical operations. The syntax will be exactly the same when using an input name such as x or y or altitude, for instance (x - y) / 2. In order for that command using x and y to work, some meaning must have been previously attached to the symbols. We’ll come back to this important topic on another day. Read through the above table of examples several times. Note down any that you find at all confusing. Then cover up the right side of the table and write down the R expression for each item on the left side. Similarly, cover up the left side of the table and translate the R expression into traditional notation. Open a SANDBOX and, one at a time, write and run the R expression for each of these traditional-notation expressions. We give the numerical result for each of the traditional expressions to let you confirm that your R version is correct. \\((16 - 3)/2\\) gives result 6.5 \\(\\sqrt{\\frac{19}{3}}\\) gives 2.5166115 \\(\\cos(\\frac{2 \\pi}{3})\\) gives -0.5 \\(\\pi^3 + 2\\) gives 33.0062767 \\(\\pi^{3+2}\\) gives 306.0196848 Once you have a grasp of how to render traditional-notation formulas into R, read these few principles to help consolidate your understanding. Computer languages generally, and R in particular, involve expressions that are written in a typewriter format: one conventional character after another in a straight line. There are no superscripts or subscripts used. So, \\(\\frac{1}{3}\\) will be written 1/3. The equivalent of \\(\\sqrt{7}\\) is sqrt(7). Parentheses: When an opening parenthesis directly follows a name, as in sqrt(, it means that the named operation is to be applied to the quantity inside the parentheses. So sqrt(7) means “take the square root of 7” and log(10) means “take the (natural) logarithm of 10.” The common mathematical functions typically take only one input. We’ll stick with those for now. When an opening parenthesis does not directly follow a name, as in 6 - (2+3), the parentheses stand for grouping in exactly the same way as in traditional notation. For instance, \\((6 + 15) / 3\\) is translated as (6 + 15) / 3. Multiplication and exponentiation are often written traditionally in terms of the relative position of quantities. So \\((3 + 2)\\pi\\) means to multiply 5 times \\(\\pi\\), even though there is no multiplication sign being written. Similar, \\(\\pi^{3 + 2}\\) means to raise \\(\\pi\\) to the fifth power. There is no “exponentiation sign” used, just the positioning of \\(3+2\\) as a superscript: \\(^{3+2}\\). In R (and almost every computer language) multiplication and exponentiation must be written explicitly. The quantities \\((3 + 2)\\pi\\) and \\(\\pi^{3 + 2}\\) would be translated as (3 + 2) * pi and pi^(3+2). One additional note: All these examples can be written with a single line of code, as is true for many short formulas. Later on, we’ll encounter longer formulas that could be written on a single line but are more readable when spread over two or more consecutive lines. When your R command is not a complete sentence, the SANDBOX will display an error like this: &lt;span style=&quot;font-color: red;&quot;&gt;&lt;code&gt;Error in parse(text = x, keep.source = TRUE) : &lt;text&gt;:5:0: unexpected end of input &lt;/code&gt;&lt;/span&gt; The “unexpected end of input” is the computer’s way of saying, “You haven’t finished your sentence so I don’t know what to do.” Each of these R expressions is incomplete. Your job, which you should do in a sandbox, is to turn each into a complete expression. Sometimes you’ll have to be creative, since when a sentence is incomplete you, like the computer, don’t really know what it means to say! But each of these erroneous expressions can be fixed by adding or changing text. Open a sandbox and copy each of the items below, one at a time, into a sandbox. Press “Run code” for that item and verify that you get an error message. For the first item, the sandbox will look like this: Figure 3.2: Running an invalid command will produce an error message. Then, fix the command so you get a numerical result rather than the error message. Working through all of these will help you develop an eye and finger-memory for R commands. sin 3 ((16 - 4) + (14 + 2) / sqrt(7) pnorm(3; mean=2, sd=4) log[7] 14(3 + 7) e^2 3 + 4 x + 2 x^2 3.6 Exercises Exercise 3.1: RLUCX Consider this graph of a function \\(g(x)\\): Question A What is the domain of \\(g(x)\\)? \\(-\\infty &lt; x &lt; \\infty\\)︎✘ \\(-3 \\leq x \\leq 2\\)Correct.  \\(-4 \\leq x \\leq 4\\)︎✘ This might be called the “graphics” domain, yet the function graph doesn’t extend over that whole interval. \\(-10 \\leq g(x) \\leq 40\\)︎✘ This is the vertical extent of the graphics frame. \\(-1 \\leq g(x) \\leq 33\\)︎✘ The domain refers to the horizontal axis. Question B What is the range of \\(g(x)\\)? \\(-\\infty &lt; x &lt; \\infty\\)︎✘ The range refers output of the function. \\(x\\) is the input. \\(-3 \\leq x \\leq 2\\)︎✘ The range refers output of the function. \\(x\\) is the input. \\(-4 \\leq y \\leq 4\\)︎✘ You’re used to calling the function output \\(y\\), but that’s a bad habit. Break it! \\(-10 \\leq g(x) \\leq 40\\)︎✘ This is the vertical extent of the graphics frame. \\(-1 \\leq g(x) \\leq 33\\)Good.  Exercise 3.2: pUKm4c Refer to the data on internal combustion engine characteristics in Section 3.1. How would you describe the relationship between engine power (BHP) and RPM? Which of the pattern-book functions shows a similar relationship between input and output? Exercise 3.3: DLWSA All but two of the pattern-book functions have a domain that runs over the whole number line: \\(-\\infty &lt; x &lt; \\infty\\). Which pattern-book function has a domain that excludes zero and negative numbers as inputs? Which pattern-book function has just a single value missing from its domain? Exercise 3.4: MNCLS2 A function’s domain is the set of possible inputs to the function. A function’s range is the set of possible outputs. For each of the pattern-book functions, specify what is the range. Question A What is the range of the pattern-book exponential function? All positive outputsNice!  All negative outputs︎✘ The whole number line︎✘ A closed, finite interval of possibilities︎✘ Question B What is the range of the pattern-book sine function? All positive outputs︎✘ All negative outputs︎✘ The whole number line︎✘ A closed, finite interval of possibilitiesExcellent! Yes. The output of pattern-book sinusoid functions is always in the interval from -1 to 1, inclusive Question C What is the range of the pattern-book logarithm function? All positive outputs︎✘ All non-negative outputs︎✘ All negative outputs︎✘ The whole number lineCorrect.  A closed, finite interval of possibilities︎✘ Question D What is the range of the pattern-book square function? All positive outputs︎✘ Close. Zero is one of the possible outputs. We can say, equivalently, that the range is all the positive outputs plus 0 or all the non-negative outputs. All non-negative outputsNice!  All negative outputs︎✘ The whole number line︎✘ A closed, finite interval of possibilities︎✘ Question E What is the range of the pattern-book proportional function? All positive outputs︎✘ All negative outputs︎✘ The whole number lineCorrect.  A closed, finite interval of possibilities︎✘ The range extends from \\(-\\infty\\) to \\(\\infty\\). Question F What is the range of the pattern-book sigmoid function? All positive outputs︎✘ All negative outputs︎✘ The whole number line︎✘ A closed, finite interval of possibilitiesCorrect. Right. The pattern-book sigmoid function has an output that is always in the interval \\(0 \\leq \\pnorm(x) \\leq 1 .\\) Exercise 3.5: BXCA4 Open a SANDBOX. (Just click on that link, although you may eventually be given other ways to open a sandbox.) When you see a breakout box like this, it means that we’re providing some computer code that you can paste into a sandbox and run. For this exercise, that code is x &lt;- 2 sin(x)*sqrt(x) Paste those two lines into the sandbox and press “Run code.” Verify that you get this as a result: [1] 1.285941 Each line that you pasted in the sandbox is a command. The first command gives a value to \\(x\\). The second command uses that value for \\(x\\) to calculate a function output. The function is \\(g(x)\\equiv \\sin(x) \\times \\sqrt{\\strut x}\\). Why not simplify the above code to the single line sin(2)*sqrt(2)? This would produce the same output but would introduce an ambiguity to the human reader. We want to make it clear to the reader (and the computer) that whatever \\(x\\) might be, it should be used as the input to both the \\(\\sin()\\) and the \\(\\sqrt{\\strut\\ \\ \\ }\\) functions. In the following questions, numbers have been rounded to two or three significant digits. Select the answer closest to the computer output. Question A Change \\(x\\) to 1. What’s the output of \\(\\sin(x) \\ \\sqrt{\\strut x}\\)     -1.51︎✘        0.244︎✘        0.84\\(\\heartsuit\\ \\)       0.99︎✘        2.14︎✘        NaN︎✘ Question B Change \\(x\\) to 3. What’s the output of \\(\\sin(x) \\ \\sqrt{\\strut x}\\)     -1.51︎✘        0.244\\(\\heartsuit\\ \\)       0.84︎✘        0.99︎✘        2.14︎✘        NaN︎✘ Question C Change \\(x\\) to \\(-5\\). What’s the output of \\(\\sin(x) \\ \\sqrt{\\strut x}\\) -1.51︎✘ 0.244︎✘ 0.84︎✘ 0.99︎✘ 2.14︎✘ NaNGood. This stands for Not-a-Number, which is what you get when you calculate the square root of a negative input. In the sandbox, change the function to be \\(\\sqrt{\\strut\\pnorm(x)}\\). Question D For \\(x=2\\), what’s the output of \\(\\sqrt{\\strut\\pnorm(x)}\\)?     -1.51︎✘        0.244︎✘        0.84︎✘        0.99\\(\\heartsuit\\ \\)       2.14︎✘        NaN︎✘ Original word: “ramify”↩︎ "],["fun-describing.html", "Chapter 4 Describing functions 4.1 Graphing a function 4.2 Tables of inputs and outputs 4.3 Word descriptions 4.4 Computer function names 4.5 Mathematical notation 4.6 Exercises", " Chapter 4 Describing functions We will need to communicate about functions to your fellow humans and to computers. Important modes of communication include: 400 Graphs of functions that show their “shape” Tables of inputs and outputs Word descriptions Computer function name Mathematical notation In this chapter, we’ll illustrate these five different modes using the pattern-book functions. It’s important to become proficient at all five. 4.1 Graphing a function Since we’ve already introduced the pattern-book functions, this is a good time to show you how to draw a graph of them. After this short introduction, we’ll discuss graphics more generally and look at graphics of functions that have two inputs. All the pattern-book functions have just a single input. You can draw graphs of single-input functions using the slice_plot() R/mosaic operator. You need to specify two pieces of information to slice_plot(): Which function to graph. In R/mosaic, You state this with what’s called a tilde expression. A couple of examples will suffice for the moment. When the function has a name, like exp() or log() or sin(), the tilde expression looks like exp(x) ~ x. On the left side of the tilde you put the name of the function you want to graph with the input name in parentheses. You can choose any input name you like: here we are using x, but we are not limited to using x or any other letter. Sometimes we even use named inputs (e.g. exp(time)). On the right side of the tilde, place the input name again. We’ll explain why the name appears in two places later. When the function is being written as a formula, for instance 1/z or t^2, put the formula on the left side of the tilde and the input name on the right side, like 1/z ~ z or t^2 ~ t. The graphics domain. As you know, the domain of a function is the collection of all possible legitimate inputs. For most of the pattern-book functions, the domain is \\(-\\infty &lt; x &lt; \\infty\\). As you might expect, it’s impractical to have a graphical axis that is infinitely long. So you have to choose some finite interval of the function domain to use. This finite interval is called the “graphics domain.” You specify the domain with a statement like domain(x = c(-5,5)), which is setting the graphics domain to \\(-5 \\leq x \\leq 5\\). Note that the input name used in domain() must match the input name you selected in the tilde expression. R uses the c() function to collect together the two numbers that define the left and right borders of the domain. In traditional notation, we write an interval in formats like \\((-5, 5)\\) or \\([-5, 5]\\) or \\(-5 \\leq x \\leq 5\\). None of these will work with the R language. For instance, the fragment (-5, 5) is not a complete expression in R; the opening parenthesis needs to be preceded by a function name. The c() function was invented for this purpose. It can combine any number of arguments, but two is enough for our purpose here: to specify an interval on the number line.4 The tilde expression and the graphics domain specifier are the two arguments to slice_plot(). All of these are correct commands for drawing a graph: slice_plot(sin(t) ~ t, domain(t=c(-5,5))) slice_plot(exp(x) ~ x, domain(x=c(-3,2))) slice_plot(log(z) ~ z, domain(z=c(-0.5, 10))) slice_plot(t^2 ~ t, domain(t=c(-2, 2))) 4.2 Tables of inputs and outputs Another way of describing a function is to give a table of inputs and outputs. Like graphics, a table can only show some of the possible inputs. input output -1.00 0.3678794 -0.75 0.4723666 -0.50 0.6065307 -0.25 0.7788008 0.00 1.0000000 0.25 1.2840254 0.50 1.6487213 Before modern computing, tables were one of the primary means to describe functions. People working with calculus needed a reference collection of books containing tables for the functions they used. 420 With computers, we have better and faster ways to get the output of a function from the input. Still, modelers often use recorded data to construct functions. Tables are perhaps the most widely used method for storing and accessing data, although electronic spreadsheets are used today instead of printed tables. Even today, a table can be a nice way to describe a function when we are interested in the output from only a handful of the possible inputs. Conceptually, it’s helpful to keep in mind that every pattern-book function is just a way of organizing information that could have been stored in a table. You will not have to generate tabular descriptions of functions to follow this book. It’s much more convient to implement the function in software so that the output can easily be displayed for any given inputs. On the other hand, in this book we’ll often use data in tabular form to create a modeling function. There’s little point in introducing this until you have some additional calculus concepts, so be patient. 4.3 Word descriptions Knowing and correctly using a handful of phrases goes a long way in being able to communicate with other people about functions with a single input. Often, the words make sense in everyday speech (“steep,” “growing,” “decaying,” “goes up,” “goes down,” “flat”). 430 Sometimes the words are used in everyday speech but the casual person isn’t sure exactly what they mean. For instance, you will often hear the phrase “growing exponentially.” The graph of the exponential function illustrates exactly this sort of growth: flat for small \\(x\\) and growing steadily steeper and steeper as \\(x\\) increases. Still other words are best understood by those who learn calculus. “Concave up,” “concave down,” “approaching 0 asymptotically,” “continuous,” “discontinuous,” “smooth,” “having a minimum at …,” “having a minimum of …,” “approaching \\(\\infty\\) asymptotically,” “having a vertical asymptote.” The next short sections describe six simple shape concepts: concavity, continuity, monotonicity, periodicity, asymptotes, and local extrema. I’ll illustrate these concepts using three pattern-book functions graphed in Figure 4.1. 431 Figure 4.1: Three of the pattern-book functions: (a) exponential, (b) sinusoid, (c) power-law \\(x^{-1}\\). 4.3.1 Concavity The slope of a function at a given input tells how fast the function output is increasing or decreasing as the input changes slightly. Concavity is not directly about how the function output changes, but about how the function’s slope changes. For instance, a function might be growing slowly in some region of the domain and then gradually shift to larger growth in an adjacent region. Or, a function might be decaying steeply and then gradually shift to a slower decay. Both of these are instances of positive concavity. The opposite pattern of change in slope is called negative concavity. If the slope doesn’t change at all—only straight-line functions are this way— the concavity is zero. Concavity has a very clear appearance in a function graph. If a function is positive concave in a region, the graph looks like a smile or cup. Negative concavity looks like a frown. Zero concavity is a straight line. 432 Referring to the three function examples in Figure 4.1, we’ll use the traditional terms concave up and concave down to refer to positive and negative concavity respectively. The exponential is concave up everywhere in its domain. The sinusoid alternates back and forth between concave up and concave down. This particular power law \\(x^{-1}\\) is concave up for \\(x &gt; 0\\) and concave down for \\(x &lt; 0\\). When a function switches between positive concavity and negative concavity, as does the sinusoid as well as the gaussian and sigmoid functions, there is an input value where the switch occurs and the function has zero concavity. (Continuous functions that pass from negative to positive or vice versa must always cross zero.) Such in-between points of zero concavity are called inflection points. A function can have zero, one, or many inflection points. For instance, the sinusoid has inflection points at \\(x = \\ldots, -\\pi, 0, \\pi, 2\\pi, \\ldots\\), the cubic power function \\(f(x)\\equiv x^3\\) has one, and the exponential has none. Figure 4.2: A diagram showing a cubic function which is concave up until a point of inflection and concave down thereafter. [Source: Maj. Austin Davis] “Inflection point” appears in news stories, so it is important to know what it means in context. The mathematical definition is about the change in the direction of curvature of a graph. In business, however, it generally means something less esoteric, “a time of significant change in a situation” or “a turning point.”5 The business sense effectively means that the function—say profits as a function of time, or unemployment as a function of time—has a non-zero concavity, up or down. It’s about the existence of concavity rather than about the change in the sign of concavity. One of the benefits of learning calculus is to gain a way to think about the previous paragraph that’s systematic, so it’s always easy to know whether you are talking about the slope of a function or the change in slope of a function. 4.3.2 Continuity A function is continuous if you can trace out the graph of the function without lifting pencil from the page. A function is continuous on an interval (a,b) if you can trace the function over that whole interval. All of the pattern-book functions are continuous over any interval in their domain except for power-law functions with negative exponents. (This includes the reciprocal since it is a power-law with a negative exponent: \\(1/x = x^{-1}\\).) Those exceptions are not defined at \\(x=0\\). To illustrate, consider the power-law function graphed in Figure 4.1. On any interval (a,b) that does not include 0, the function is continuous. For inputs \\(x &lt; 0\\), the function is negative. For inputs \\(0 &lt; x\\), the function is positive. So, on an interval that includes \\(x=0\\) the function jumps discontinuously from negative to positive. 433 4.3.3 Monotonicity A function is monotonic on a domain when the sign of the slope never changes on that domain. Monotonic functions either steadily increase in value or, alternatively, steadily decrease in value. Another way of thinking about monotonicity is to consider the order of inputs and outputs compared to a number line. If a function is monotonically increasing then it will preserve the order of inputs along the number line when it maps inputs to outputs, whereas a monotonically decreasing function will reverse the order. For instance, if the input \\(x\\) comes before an input \\(y\\) (i.e., \\(x&lt;y\\)), then \\(f(x)&lt;f(y)\\) for monotonically increasing functions (the order is preserved), but \\(f(y)&lt;f(x)\\) for monotonically decreasing functions (the order of outputs is reversed). Of the pattern-book functions in Figure 4.1: both the exponential and the logarithm function are monotonic: the exponential grows monotonically as does the logarithm. The sinusoid is not monotonic over any domain longer than half a cycle: the function switchs between positive slope and negative slope in different parts of the cycle. 434 4.3.4 Periodicity A phenomenon is periodic if it repeats a pattern over and over again. The pattern that is repeated is called a cycle; the periodic function as a whole is one cycle placed next to the previous one and so forth. The day-night cycle is an example of a periodic phenomenon, as is the march of the seasons. The period is the duration of one complete cycle; the period of the day-night cycle is 24 hours, the period of the seasonal progression is 1 year. Real-world periodic phenomena often show some slight variation from one cycle to the next. Of the pattern-book functions, only the sinusoid is periodic. And it is exactly periodic, repeating exactly the same cycle over and over again. The period—that is, the length of an input interval that contains exactly one cycle—has a value of \\(2\\pi\\) for the pattern-book sinusoid. When used to model a periodic phenomenon, the model function needs to be tailored to match the period of the phenomena. The idea of representing with sinusoids phenomena that are almost but not exactly periodic, for instance a communications signal or a vibration, is fundamental to many areas of physics and engineering. 435 4.3.5 Asymptotic behavior Asymptotic refers to two possible situations depending on whether the input or output is being considered: When the input to a function gets bigger and bigger in size, going to \\(\\infty\\) or \\(-\\infty\\). If, as the input changes in this way the output gets closer and closer to a specific value, the function is said to have a horizontal asymptote of that value. An example in Figure 4.1 is the exponential function. As \\(x \\rightarrow -\\infty\\), that is, as \\(x\\) goes more and more to the left of the domain, the output tends asymptotically to zero. When the output of a function gets bigger and bigger in size, going to \\(\\infty\\) or \\(-\\infty\\) without the input doing likewise. The visual appearance on a graph is like a sky-rocket: the output changes tremendously fast even though the input changes only a little. The vertical line that the skyrocket approaches is called a vertical asymptote. The power-law function \\(x^{-1}\\) has a vertical asymptote at \\(x=0\\). If you were to consider inputs closer and closer to \\(x=0\\), the outputs would grow larger and larger is magnitude, tending toward \\(\\infty\\) or \\(-\\infty\\). Several of the pattern-book functions have horizontal or vertical asymptotes or both. For instance, the function \\(x^{-1}\\) has a horizontal asymptote of zero for both \\(x \\rightarrow \\infty\\) and \\(x \\rightarrow -\\infty\\). 436 The sinusoid has neither a vertical nor a horizontal asymptote. As input \\(x\\) increases either to \\(-\\infty\\) or \\(\\infty\\), the output of the sinusoid continues to oscillate, never settling down to a single value. And, of course, the output of the sinusoid is everywhere \\(-1 \\leq \\sin(x) \\leq 1\\), so there is no possibility for a vertical asymptote. 4.3.6 Locally extreme points Many continous functions have a region of the input domain where the output is gradually growing, then reaches a peak, then gradually diminishes. This is called a local maximum. “Maximum” because the output reaches a peak at a particular input, “local” because in the neighborhood of the peak the function output is smaller than at the peak. Likewise, functions can have a local minimum: the bottom of a bowl rather than the top of a peak. Of the three pattern-book functions in Figure 4.1, only the sinusoid has a local maximum, and, being periodic, it repeats that every cycle. The sinusoid similarly has a local minimum in every cycle.. Many modeling applications involve finding an input where the function output is maximized. Such an input is called an argmax. “Argument” is a synonym for “input” in mathematical and computer functions, so “argmax” refers to the input at which the function reaches a maximum output. For instance, businesses attempt to set prices to maximize profit. At too low a price, sales are good but income is low. At too high a price, sales are too low to bring in much income. There’s a sweet spot in the middle. 437 Other modeling applications involve finding an argmin, the input for which the output is minimized. For instance, aircraft have a speed at which fuel consumption is at a minimum for the distance travelled. All other things being equal, it’s best to operate at this speed. The process of finding an argmin or an argmax is called optimization. And since maxima and minima are very much the same mathematically, collectively they are called extrema. Any function that has an extremum cannot possibly be monotonic, since the growth is positive on one side of the extremum and negative on the other side. 4.4 Computer function names As you might expect, computer programmers and language developers have written software implementing several of the pattern-book functions: exp(), log(), sin(), dnorm(), and pnorm(). For these functions, the name tells everying, so far as the computer is concerned, that is needed to calculate the output from any given input. 440 Computer notation for the power-law and proportional functions is different because the body of these functions is so short. So instead of using parentheses to apply a named function, invoking the power-law or proportional functions is done using a syntax like x^p or x or z^4.6 When a function like \\(\\sqrt[3]{x}\\) is written as \\(x^{1/3}\\) make sure to include the exponent in grouping parentheses: x^(1/3). Similarly, later in the course you will encounter power-law functions where the exponent is written as a formula. Particularly common will be power-law functions written \\(x^{n-1}\\) or \\(x^{n+1}\\). In translating this to computer notation, make sure to put the formula within grouping parentheses, for instance x^(n-1) or x^(n+1). 4.5 Mathematical notation You have grown up with traditional mathematical notation and are likely familiar with the notation for several of the pattern-book functions: \\(\\ln x\\), \\(\\sin x\\), \\(e^x\\), \\(x^p\\) (as in \\(x^2\\) where \\(p=2\\) or \\(\\sqrt{x}\\) where \\(p=1/2\\)). 450 Traditional notation mixes up several things that computer notation sensibly keeps separate. From the computer programmer’s point of view, traditional notation is idiosyncratic rather than systematic. If you are interested in these things, three concepts from computing may help you appreciate the the differences: Functional notation In computing, the notation in which a function name is followed by parentheses7 with the inputs inside the parentheses is called “functional notation.” For instance, exp(x) is functional notation, since the input x is between parentheses. Traditional mathematical notation sometimes leaves out the parentheses, as in \\(\\sin \\frac{\\pi}{2}\\) or \\(\\ln 10\\). But in this course I always include the parentheses, which are abolutely required in the computer notation, in the traditional notation as well, i.e. \\(\\sin\\left(\\frac{\\pi}{2}\\right)\\). Infix notation For functions with two inputs, computing languages often support a different arrangement of the function name and the inputs where the name comes inbetween the arguments. You’ve seen this “infix” notation in parts of traditional arithmetic notation, for instance, \\(3 + 5\\) or \\(8/2\\). In R, power-law functions are often written in infix notation, e.g. 3^2 or x^3. When you see a traditional notation like \\(e^x\\), you will be tempted at first to write this as e^x. But in R, the exponential function is written in functional notation: exp(x). Markup notation You are undoubtedly familar with word processing and, particularly, a style of word processing called What-you-see-is-what-you-get (WYSIWYG). In WYSIWYG, you can enter plain text just using the keyboard, but if you want to make something boldface or italics, you use the mouse to select the text involved and select a style from a menu. Typically, WYSIWYG mathematical content involves a similar mouse-based process. In contrast, in mainstream computer languages, the mouse is not needed at all. The computer commands are constructed from plain, linear sequences of letters and other characters. Traditional mathematical notation includes features such as superscripts and special symbols that are easily written out with pencil in hand. Often this notation is beautiful and aesthetically cherished by mathematicians. But computer commands in most computer languages are straight sequences of characters using function or infix notation.8 4.6 Exercises Exercise 4.1: H2eu2 Answer these questions about the pattern-book functions. You can refer to the graphs in Figures 2.2 through 2.4. Question A Which of these best describes the concavity of the gaussian function? It’s not concave.︎✘ If it curves, it’s either concave up or down. It’s concave down.︎✘ In some places, but not in others. It’s concave down in the center and concave up on both flanks.Nice!  It’s concave down on the left and concave up on the right︎✘ Look again Question B Which of these best describes the concavity of the sigmoid function? It’s not concave.︎✘ If it curves, it’s either concave up or down. It’s concave down.︎✘ In some places, but not in others. It’s concave down on the left and concave up on the right.︎✘ Look again It’s concave up on the left and concave down on the right.Excellent!  Question C Which of these best describes the concavity of the second-order monomial \\(m_2(x) \\equiv x^2\\)? It’s not concave.︎✘ If it curves, it’s either concave up or down. It’s concave down.︎✘ Is it a smile or a frown? It’s concave down on the left and concave up on the right.︎✘ Look again It’s concave up everywhere.Correct.  Exercise 4.2: PYKG5 In this activity, you will be examining the various pattern-book functions to look for two different features: Slope: whether the graph has a slope that is consistently positive, negative, both, or neither, and Concavity: whether the function being graphed is concave up, concave down, neither, or both (i.e., concave up in some regions of the domain and down for others). Copy and paste the R/mosaic command below in a SANDBOX to draw a function graph. Remember to press “Run code.” slice_plot(exp(x) ~ x, domain(x=c(-3, 3))) To modify the command to draw another function, replace the exp(x) with another formula, for instance 1/x. Make a list of the pattern-book functions. For each function in the list, write down the R expression for the function, say whether the function has a consistently positive or negative slope, whether it is consistently concave up or down, and if the value of the function appears to be reaching a horizontal asymptote at zero for very negative \\(x\\), for very positive \\(x\\), for both, or neither. We’ll show you the answers for the exponential and sinusoid functions. You’ll have to modify the computer command to graph the other pattern-book functions. function name R formula slope concavity horiz. asymptote exponential exp(x) positive concave up \\(x \\rightarrow -\\infty\\) logarithm sinusoid sin(x) both both neither square proportional constant reciprocal gaussian sigmoid Some other computer languages, like MATLAB and Python, do allow use of the concise notation [-5, 5]. R doesn’t, so you will see an awful lot of the c() function.↩︎ Google dictionary, provided by Oxford Languages↩︎ If you insist on using a named function for power-law and proportional functions, there is `^`() and I().↩︎ Or sometimes square braces or curly braces or another token, depending on the language.↩︎ Some computer languages use notation where the name of the function is contained inside the parentheses as in (+ 2 3).↩︎ "],["fun-notation.html", "Chapter 5 Notation for functions 5.1 A notation for computing 5.2 Words for using functions 5.3 Formulas and algorithms 5.4 Algorithms without formulas 5.5 Computer notation 5.6 CalcZ naming conventions 5.7 Functions in R 5.8 \\(=\\), \\(\\equiv\\), \\(\\rightarrow\\), &lt;- 5.9 Exercises", " Chapter 5 Notation for functions Part of the difficulty of mathematics for many people is making sense of the nomenclature and notation. What you were taught in high school is a highly idiomatic system that can be mastered only with extensive experience. Mathematicians are undoubtedly skilled in logic, but mathematics itself has an ancient history which has littered the language with synonyms, near synonyms, inconsistencies, diacritical marks, and letters in unfamiliar alphabets. 500 To illustrate the cultural admiration for abstraction in mathematics, consider this famous poem, The Jabberwocky, by a University of Oxford mathematician, Charles Lutwidge Dodgson (1832-1898): ’Twas brillig, and the slithy toves        Did gyre and gimble in the wabe: All mimsy were the borogoves,        And the mome raths outgrabe. Here are some words commonly encountered in traditional mathematics notation. equation, formula, function, variable, unknown, root And here are a few mathematical sentences. \\(y = x\\) \\(y = \\sqrt{x}\\) \\(y^2 = x\\) \\(x^2 = x\\) \\(x = \\sqrt{x}\\) All five sentences are equations. That’s easy, because they each have an equal sign between the two sides. Which are formulas? Which are functions? You’re used to calling \\(x\\) and \\(y\\) variables. When do they become unknowns? Sentence (v) involves roots (as in “square root”). But sentence (v) says the same thing as (iv) which is about squares rather than roots.510 5.1 A notation for computing The traditional notation is practically useless for computing. A programmer has to have a deep understanding of what the notation is intended to mean in any given circumstance before she can construct a computer expression that will carry that same meaning in the computer’s work. To illustrate, consider these statements in traditional math notation, each of which has a sensible meaning. \\[y = x\\\\ y = \\sqrt{x}\\\\ y^2 = 3\\\\ y = \\sqrt{3}\\\\ y - x = 0\\\\ 0 = (x+3)(x-2)\\] Imagine translating these statements into R, fixing things a little by inserting the required * in (x+3)*(x-2), and using sqrt() instead of \\(\\sqrt{\\strut\\ }\\). 520 y = x y = sqrt(x) y^2 = 3 y = sqrt(3) y - x = 0 0 = (x+3) * (x-2) Running these statements in R (for instance, by copying them to a SANDBOX) will generate an error. Even if you copy and run the statements individually, one at a time, into the sandbox, you’ll get an error for all but one of the statements. Before reading on, see if you can figure out, just by reading the R statements, which one is valid. For some of the statements, the left-hand side of &lt;- is not a valid name in R (0 and y^2 and y-x). For others, the name x is being used before any value has been assigned to it. One of the reasons we use &lt;- for assignment in R, rather than = (which, technically, is allowed) is to remind us that assignment is different from equality. The student who knows how to make sense of math notation will find this not of much help in writing computer notation. It’s like a well educated foreigner trying to make sense of how some of these sentences are meaningful and others not. “Chair a meeting,” but not “seat a meeting.” “Seat a guest,” but not “chair a guest.” “I’m bushed,” but not “I’m treed.” “Tree a cat,” but not “bush a cat.” “Table a motion,” but not “desk a motion.” “Bench a player,” but not “couch a player.” “Couch a meaning” but not “bench a meaning.” In this book, we’re going to use a mathematical notation that corresponds to a usable computer notation. The first step is to stop using \\(=\\) to mean so many different things. 530 5.2 Words for using functions Throughout this course, I use the words inputs and output to refer to what is handed off to a function and what is received back as the result. But “handed off” is a metaphor and not a clear naming of what we mean when we use a function. This section simply gives some vocabulary to describe various aspects of using functions. The concept of functions is so fundamental in mathematics and computing, that there are many synonyms for each aspect. It helps to be aware of these synonyms since different people will write about functions in different—but equivalent!—ways. 540 In everyday speech, an “argument” is a discussion between people with differing views. But in computing, argument means something else entirely: it is a synonym for “input to a function.” It’s good to have a concrete image in mind, so I’ll suggest thinking of a computer printer as an analogy for a function. A computer printer takes several different kinds of input: electricity, paper, ink or toner, instructions transmitted via cable or wireless connection. Each of these inputs arrives at the printer through a particular interface: the electrical supply cord, a tray for holding paper, a tank or cartridge for ink, a radio receiver. These interfaces are the different inputs—or, to use the other word, arguments—of the printer. Common sense tells you that you shouldn’t put toner in the paper tray, or connect the electrical supply cord to the ink tank. You have to provide the right kind of stuff to each input interface in order to get the anticipated output from the printer. Our pattern-book functions all have a single input. With such functions it’s appropriate to speak of “the input to” or “the argument of” the function. In general, the functions we will construct for modeling purposes with have multiple inputs or arguments. For instance, the function \\(g(x, y) \\equiv e^x \\sin(y)\\) has both an “x-input” and a “y-input.” You can just as well say “the x-argument of g()” or the “y-argument of g(),” or even the “first argument of g()” and the “second argument of g().” Whether you use the preposition “of” or “to” is a matter of personal style; either will do. The act of employing a function to produce the output that corresponds to a given set of inputs is much like “printing a file.” Of course, the word “printing” is not the right choice for mathematical or computational functions. Instead, there are several equivalent phrases in common use: \"Apply a function to arguments. “Invoke a function.” “Evaluate a function.” “Run a function.” In (ii) and (iv), there is an implicit “on its arguments.” But any application/evaluation/running of a function necessarily involves giving specific values for the inputs. The difference between “a function” and “applying a function” is much the same as the difference between a printer and “printing a document,” or a screwdriver and “driving (or extracting) a screw, or, for wizard-world fans, the difference between a”spell\" and the act of “casting a spell.” In R/mosaic, the application of a modeling function like g() (defined in an earlier paragraph) to its two arguments looks like g(5, pi) with the two arguments separated by a comma. It might also look like g(z, pi), or even g(x=z, y=pi) or g(y=pi, x=z) where the use of the argument names save us the trouble of remembering which argument came first in the definition. 550 When applying a function of one argument, refrain from using the argument name. It’s unnecessary since you can hardly get the order of arguments wrong and, depending on who wrote the software for the function, they might not have used x as the name of the argument. It’s another matter when you are defining a function. For instance, \\[g(x, y) \\equiv e^x \\sin(y)\\] does not mean “apply \\(g()\\) to the arguments \\(x\\) and \\(y\\).” Instead, it means, “I’m setting up \\(g()\\) as a function, a kind of promise in the future that whenever you write \\(g(3, \\pi)\\) or something similar, the defined function will be applied to those arguments. But for now, you don’t need to do any arithmetic or other calculation, just remember that you’ve made a promise named \\(g()\\).” In R/mosaic, using a tilde-expression signals that you are asking for the same kind of promise to do something when the time for it comes. A 5.3 Formulas and algorithms In high-school math, you got used to seeing formulas like \\(3x + 2\\) or \\(x^2 \\sin(y)\\). So it will likely be natural to you to think of defining mathematical functions in R with tilde expressions like 3*x + 2 ~ x or x^2 * sin(y) ~ x &amp; y. But formulas are hardly the only way to define a function. Functions can also be defined using another kind of computation of the sort not typically covered in high-school math: an iterative process, a branching process, a neural network, and so on. These processes are usually expressed using a computer programming language and so they will be unfamiliar to many students. The idea of “algorithm” generalizes that of formulas. You will be using many mathematical computations that do not involve evaluating formulas but instead are written in terms of iteration, branching, and searching. A computer programming course is a good place to learn about these concepts but, for now, what’s important is that you know that much of the work going on behind the scenes in a computation is “algorithmic” rather than based on formulas. A starter definition is: An algorithm is a set of instructions for performing a computation. High-school math typically involves presenting an algorithm as a formula. You learned, maybe in middle school, how to follow the arithmetic steps involved in algorithms described as formulas. You also have likely used a calculator to perform some of the arithmetic or to evaluate functions such as \\(\\sin()\\) and \\(\\ln()\\) and \\(\\sqrt{\\strut}\\) for which you don’t know how to evaluate using simple arithmetic. The calculator is implementing an algorithm with which its been programmed to enable the calculation of \\(\\sin()\\) and \\(\\ln()\\) and such. A slightly more detailed definition of “algorithm” highlights that algorithms are written in terms of other, simpler algorithms. An algorithm is a set of instructions for performing a computation written in terms of other algorithms that we already know how to perform. For our purposes, the “algorithms that we already know how to perform” will be taken to be arithmetic—addition, subtraction, multiplication, division—as well as the evaluation of the pattern-book functions. Admittedly, people cannot compute logarithms as fluently as they can add numbers, but you already have the R implementations of the basic modeling functions: exp(), log(), sin(), power-law, dnorm(), and pnorm(). The vast majority of functions you will see in this book (and in mathematical modeling in general) can be constructed out of basic arithmetic and the application of the pattern-book functions. 560 5.4 Algorithms without formulas Many functions are described by algorithms that use concepts common in computer programming but unknown to traditional mathematical notation. Some of these have names like iteration or branching and many refer to stored lists of fixed numbers (like the office workers in the street, building, floor, corridor, door image of a function). We’ll deal with some of these things later, but for now … We are going to use the word algorithm to name the kind of expression to the right of \\(\\equiv\\) in a function definition. A formula is a specific kind of algorithm generally written in traditional math notation. Algorithms, including the ones that are formulas, are written in terms of a set of symbols that stand for inputs. For instance, in \\(mx + b\\), the \\(x\\), \\(m\\), and \\(b\\) are the names we give to the quantities being used in the calculation. The notation we are using for function definition lists some of these names in two places, and others in only one place. Again, look at \\[g(x) \\equiv m x + b\\] The \\(x\\) appears both in the algorithm and the list of input name \\((x)\\) to the left of \\(\\equiv\\). The \\(m\\) and \\(b\\) are different; they appear only in the algorithm. The word for such quantities in mathematics is parameter. Eventually, when the algorithm is followed, we’re going to have to put in specific numerical values in place of each parameter. 570 Where will these parameter values come from? This is a subject on which mathematical notation is silent. You have to figure it out from context and experience. This is potentially very confusing, especially when a human is not around to sort things out. 5.5 Computer notation The notation used in computer programming lets us be explicit about which symbols refer to function inputs and which to parameters of the function. Depending on the computer language things can be handled in one way or another. (For experienced computer programmers: This is the issue of scope and can be complex in its own right.) 580 In the software used in CalcZ (R/mosaic, which is the R language augmented with the mosaic package of extensions), we will take a simple-to-use approach. It works like this: All modeling functions we construct with R/mosaic will list parameters formally as arguments to the function. It is as if we wrote in traditional notation \\[g(x, m, b) \\equiv m x + b\\] There is also a way to give default numerical values to parameters so that you can write \\(g(3.5)\\) and the computer will know where to find the parameter values. In writing about formulas using math notation, we’ll extend the traditional notation to write, for instance, \\(g(x, m=2, b=3) \\equiv m x + b\\). In R/mosaic, we would construct a mathematical function like \\(g()\\) using the makeFun() function: g &lt;- makeFun(m*x + b ~ x, m=2, b=3) You could also write g &lt;- makeFun(m*x + b ~ x) but this notation means that you will have to give specific numerical values for the m and b inputs whenever you evaluate g(). There won’t be any default values for the “parameters-as-inputs” m and b. 590 5.6 CalcZ naming conventions We’re going to be using and creating a lot of functions in CalcZ. Some of these functions already have proper names, usually written using short sequences of letters: for instance the pattern-book functions \\(\\sin()\\), \\(\\ln()\\), \\(\\exp()\\). 600 Other functions will be needed just for a sentence or a paragraph or a section, perhaps being used in an example or to lay out the steps of an algorithm. In natural languages such as English, we often use pronouns for such purposes: she, he, it, they, we, I, …. We also will use pronouns for identifying functions. Our policy is this: A pronoun for a function will be usually named \\(f()\\) or \\(g()\\) or \\(h()\\) or the corresponding upper-case letters \\(F()\\), \\(G()\\), or \\(H()\\). The particular choice of letter f, g, or h has no significance whatsoever. It is just a way to give an unambiguous handle for a function that we are going to be using for a little while. On occasion, we will use subscripts or superscripts on these pronoun letters, for instance \\(f_1()\\) or \\(g^\\star()\\). This is a way to give us many more possible pronouns when we need them. Perhaps this is analogous to words like “sister,” “parent,” “husband,” “cousin,” etc. that allow us to refer, without a proper name, to a specific person. On other occasions, where a function relates to a specific quantity such as position or velocity, we will use the names \\(x()\\), \\(y()\\), \\(z()\\), \\(u()\\), \\(v()\\), \\(w()\\), and such. These letters are, of course, the same ones we frequently use to name the inputs to functions. How do you know whether the letter is meant to refer to an input rather than a function? The parentheses provide the clue: \\(x()\\) is a function name, \\(x\\) is an input name. 610 It can become tedious to give a name to every function, even if it’s not being used again. Consider this sentence as an example: “The functions \\(g(x) \\equiv \\sqrt{\\strut x}\\) and \\(h(x) \\equiv x^3\\) are examples of power-law functions.” Long and awkward. So we’ll feel free to write instead, “\\(\\sqrt{\\strut x}\\) and \\(x^3\\) are examples of power-law functions.” Without the formality provided by “\\(g(x) \\equiv\\)” it can be hard to know whether \\(\\sqrt{\\strut x}\\) means “the square-root function” or \"take the square root of a specific number \\(x\\). The convention we will use is based on the name used in the expression. When standard argument names from the end of the alphabet are being used with a subscript (e.g. \\(x_0\\)) or with a special symbol used in a superscript (e.g. \\(t^\\star\\)), we intend the expression to be a function. However, when we want to apply a function to specific values for inputs we will write in any of the following styles: \\[f(x^\\star) \\ \\ \\text{or}\\ \\ \\sqrt{\\strut x^\\star}\\ \\ \\text{or}\\ \\ \\sqrt{\\strut x=3}\\ \\ \\text{or}\\ \\ \\left.\\sqrt{\\strut x}\\right|_{x=3}\\ \\ \\text{or}\\ \\ \\left.g(x)\\strut \\right|_{x=3}\\] One of the important techniques of calculus is to take something we often think of as a number and turn it into a function whose output is a number. It will take you time to get used to the calculus notation and to be able to tell at a glance whether something is a function or a number. 620 Here’s an illustration that will only make sense to those who have already studied some calculus: \\[\\int_0^3\\!\\! f(t) dt\\ \\ \\text{is a number, but }\\int_0^x\\!\\! f(t) dt \\ \\ \\text{is a function.}\\ \\ \\] In high-school math notation, it can be hard to tell if an expression is intended to be a function or a number. Careful attention to the CalcZ conventions will make it easier to figure whether an expression resolves to a function or a number. When you first read a mathematical expression, a good first question to ask is, “What kind of thing is this? A function? A number?” It is essential that you can apply these conventions reflexively. Being able to say what kind of thing a symbol stands for is a key to understanding what a mathematical expression means. 5.7 Functions in R Any name in the R language can refer to any sort of object. We will use the CalcZ naming conventions in our use of R, so that the ability you develop to read math notation should help reading R and vice versa. 630 R/mosaic provides additional clues to distinguish between numbers and functions. Almost all the time we will create a function using makeFun(). So when you see an R expression starting as name &lt;- makeFun(tilde expression) you know for sure the name refers to a function. As we get deeper into calculus, you will meet additional R operators that generate functions. We’ll introduce these in good time, but for someone reviewing the course, these include D(), antiD(), compose() and iterate(). Some readers may have encountered R previously in a statistics or data science course. Those readers will be wondering what is the purpose of makeFun(). Experienced programmers know that the way you make functions in R is by using the function keyword. For instance: f &lt;- function(x) { 3 + 2*x } That’s a completely correct and legitimate way to define a function in R and in most settings is the universal practice. We developed makeFun() to handle a situation where computers, in their insistence on avoiding ambiguity, will do something that is not what the person familiar with math notation is likely to suspect. The problem comes up in something as simple as g &lt;- function(x) { m*x + b } In traditional math notation, \\(g(x) \\equiv m x + b\\), we are usually silent on where parameters like \\(m\\) and \\(b\\) are coming from. And, to be honest, you don’t have to worry about this until you try to evaluate the function. 630 If you evaluate, say, the command \\(g(3)\\), the R system knows how to find the right values for \\(m\\) and \\(b\\). If there are no such objects in the appropriate places in the R system, an error message will be generated. The rules that computer languages follow in tracking down symbols that aren’t in the argument list are called scoping rules. Scoping is an advanced programming concept and different languages use different rules. For those few whose programming background includes an understanding of scoping here’s an explanation. The ordinary scoping rules in R would make undefined parameters like \\(m\\) and \\(b\\) in a function definition have bindings in the environment in which the function was defined. This would typically be the global environment, an unsatisfactory arrangement it would be difficult to customize an individual function or invocation of a function to use a specific value for the parameters. makeFun() is arranged to add any parameters in the function algorithm to the argument list. The makeFun() command creates a function with 3 arguments. makeFun(m*x + b ~ x) ## function (x, m, b) ## m * x + b The point of the ~ x part of the tilde expression is simply to name which arguments should come first. To evaluate the function, you’ll have to provide values for m and b. But some operations on a function—differentiation and anti-differentiation, in particular—can be done without having to specify parameter values. For those of you who know what differentiation or anti-differentiation are, here is an example: D(m*x + b ~ x) ## function (x, b, m) ## m antiD(m*x + b ~ x) ## function (x, C = 0, m, b) ## m * (1/2 * x^2) + b * x + C Sometimes you have particular numerical values in mind for the parameters. For instance, if you are modeling the trajectory of a ball, you will undoubtedly need to make use of gravitational acceleration at the Earth’s surface, which is \\(9.8 \\text{m}/\\text{s}^2\\). You might prefer not to include the specific number 9.8 in your function definitions so that you can use the same functions to model a ball’s trajectory on Mars. But since most balls are thrown on Earth, maybe it’s not worthwhile to insist that the value 9.8 be specified every time the function is used. You can have it both ways by using g as the parameter name and instruct R to set g to 9.8 unless otherwise specified. The function will look like this: 640 ball_velocity &lt;- makeFun(g*t + t0 ~ t, g = 9.8, t0 = 0) # For Earth: falling 3 seconds from a standstill ball_velocity(3) ## [1] 29.4 # For Earth when the ball has an initial upward velocity of 10 m/s ball_velocity(3, t0 = -10) ## [1] 19.4 # For Mars ... ball_velocity(3, t0 = -10, g = 3.711) ## [1] 1.133 5.8 \\(=\\), \\(\\equiv\\), \\(\\rightarrow\\), &lt;- The \\(=\\) sign carries a lot of weight in high-school notation. Too much weight. It is used for several meanings that ought to be distinguished one from another. Combining them all into one symbol leads to confusion and error. Meaning 1: “Is defined to be …” We use \\(\\equiv\\) in mathematical notation and &lt;- in R. The notation in R is a bit simpler than the mathematical notation: it is a way of giving something a name. name &lt;- something If the “something” is a function, you will see that on the left side of &lt;-, for instance by use of the makeFun() operator in h &lt;- makeFun(x^2 ~ x). The left side is simply a name. In math notation, the equivalent would be written \\(h(x) \\equiv x^2\\). The left side isn’t exactly a name. It’s a name followed by parentheses in which are the names being used in the algorithm. Keep in mind that in writing about functions, we will generally provide a hint that the name refers to the function, writing \\(h()\\) or h(). The parentheses aren’t part of the name; the name here is \\(h\\). But the parentheses remind us that \\(h\\) is a function. 650 Meaning 2: “Happens to be …” The acceleration due to gravity is often given the name \\(g\\). On Earth’s surface, it happens to be \\(9.8 \\text{m}/\\text{s}^2\\). In our math notation, we will use the equal sign for this narrow meaning, as in \\(g=9.8\\text{m}/\\text{s}^2\\). In R we will use =. Meaning 3: “Gets closer and closer to …” Calculus is about relationships: the connection between two (or more) things. So you will hear phrases like, “As \\(x\\) increases, \\(f(x)\\) decreases.” Or, in everyday experience, “As it gets more humid, the weather becomes more uncomfortable.” Or, “slower is safer,” or “the spicier the better” or “the heavier the blanket, the warmer I’ll be.” (One of the important uses of derivatives in calculus is to represent such statements quantitatively. But that’s a subject for the next Block.) In calculus, sometimes you have to distinguish between “\\(x\\) is zero” and “\\(x\\) gets closer and closer to zero.” We’ll need this when we want to say, “It gets smaller and smaller, but doesn’t disappear entirely.” The symbol for “gets closer and closer to” is \\(\\rightarrow\\), as in \\(x \\rightarrow 0\\) In reading math, take care to notice which of \\(=\\), \\(\\rightarrow\\), or \\(\\equiv\\) is being used. The sign has something important to say and is intended to help you make sense of what you read. 5.9 Exercises Exercise 5.1: TKWEW Use the CalcZ naming conventions to answer these questions. Question A What is \\(h()\\)? The name of a functionRight! Right. Typically we use \\(f()\\), \\(g()\\), \\(h()\\) or something similarly generic to stand for a function that we’re going to be working with for a little while. Think of these as pronouns. Just as we can say, meaningfully, “She gave it to him,” we can say \\(h(x) \\equiv f(x) + g(2*x)\\) The name of an input.︎✘ Sorry, these will usually be letters like \\(x\\), \\(y\\), \\(t\\). A specific numerical value︎✘ Sorry, but we’ll use constructions with a subscript like \\(x_0\\) or \\(y_\\star\\) and the like for these. Question B How come we write \\(f()\\) for the name of a function rather than just \\(f\\) or \\(f(x)\\)? No good reason︎✘ We certainly intend with the empty parentheses to remind the reader that a name refers to a function. If you spot a place where we violate this intention, point it out to us. It’s a reminder that we’re talking about a function with the name “\\(f\\).”Correct.  The parentheses are part of the name.︎✘ Not at all. Names in R never contain parentheses. So f, fbar, fred are all valid names in an R command, but f() is not. We use the parentheses when writing to a human audience as a reminder that the name is referring to a function. The computer doesn’t need any such reminders Question C What sort of thing is denoted by \\(x_0\\) or \\(y_\\star\\) or \\(y_{max}\\)? A particular numerical valueNice! Right. For instance, it might be the particular value for the input to a function which produces an output of zero. Or it might be a particular location in the domain of a function. The name of an input︎✘ Sorry. We won’t typically use subscripts when referring to an input name. Question D Which of these symbols might stand for the entire domain of a function? \\(y\\)Nice! Right. Another term to use for a symbol standing for a domain is “name of an input.” \\(f()\\)︎✘ No, this is how we write the name of the function called “\\(f\\)” \\(y_0\\)︎✘ No. \\(y_0\\) might be used to stand for a single point in the domain. Question E Suppose you come across \\(v(w) \\equiv w + 3\\) in this book. What do \\(v\\) and \\(w\\) stand for? \\(v()\\) is the name of a function and \\(w\\) is the name of the input to that function.Excellent! Right. Whenever we write something like “name(another_name) \\(\\equiv\\),” we’re saying explicitly that “name” refers to a function and “another_name” refers to an input. It’s meaningless.︎✘ We’ll try not to write meaningless mathematical expressions. If we do by mistake, let us know. It’s the same thing as \\(v = w + 3\\).︎✘ \\(v = w+3\\) is an equation. But \\(v(w) \\equiv w+3\\) is the format for defining a function named \\(v()\\). Question F Are \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) the same function? Yes, although that function is being given two different names.Excellent! The only thing that’s significant about the name of an input is that it be used consistently in the function algorithm. Of course not!︎✘ Sorry. I suppose you might ask, “What do you mean by the same function?” Remember that a function is a relationship between inputs and the output. \\(g(x) \\equiv x^2\\) and \\(h(w) \\equiv w^2\\) describe exactly the same relationship: the output will be the square of the input. Exercise 5.2: LDNE According to the notation style we use in CalcZ, which of these things is a function? Which a number? Question A What kind of a thing is \\(\\sqrt{z}\\)? A functionExcellent!  A number︎✘ \\(z\\) is one of the standard names we will use for an input to a function. If we had given the function a name, for instance \\(g(z) \\equiv \\sqrt{z}\\), we would be able to tell from the \\((z)\\) that \\(g()\\) is a function. But whenever we use a standard input name, the expression is a function. Question B What kind of a thing is \\(\\sqrt{y^\\star}\\)? A numberCorrect.  A function︎✘ According to our convention, the name \\(y^\\star\\) refers to a particular value as opposed to the name of a function input. Question C What kind of a thing is \\(e^{k t}\\)? A functionNice!  A number︎✘ The letter \\(t\\) is one of our standard letters for input names. \\(k\\) is a letter, but since it is not from the end of the alphabet, you have a hint that it is intended to be a parameter, that is a symbol representing a specific numerical quantity. Question D What kind of a thing is \\(k\\) in the definition \\(g(k) \\equiv e^k\\)? A number︎✘ The name of an input to a function.Good.  A function︎✘ Notwithstanding our convention that \\(k\\) is not on its own a name used for inputs, when we use the full function-definition style, anything in the parentheses following the function name is explicitly stated as an input name. Exercise 5.3: kZG5Fj The following traditional-style notation is intended to define a function that is 2 times the pattern-book sinusoid. But something is wrong. \\[g(t) \\equiv 2 \\sin(x)\\] Question A What’s wrong with the definition? \\(g()\\) isn’t an appropriate name︎✘ You can name functions what you like. The formula should be written \\(2 \\times \\sin(x)\\)︎✘ You are welcome to write things that way if you want to emphasize the multiplication, but you don’t have to. On the other hand, in R it would be absolutely required to write the multiplication operator: 2 * sin(x). \\(t\\) is not a good choice for the input name.︎✘ It’s a fine choice, especially when the input is time. The input name in the formula doesn’t match the input name on the left side of \\(\\equiv\\).Good. That’s it. Once you choose an input name (here, \\(t\\)), make sure to write the formula in terms of that name. Exercise 5.4: aeOnO5 Consider this expression in math notation: \\[\\frac{e^{k t}}{k}\\] Question A Which of the following R expressions implements the math-notation expression? k exp(kt)︎✘ You must always express multiplication explicitly, using * between the quantities to be multiplied. e^k*t / k︎✘ Use exp(x) for \\(e^x\\). exp(k t) / k︎✘ k t should be written k*t exp(k*t) / kNice!  1/k e^kt︎✘ 1) Use * for multiplication. 2) Use exp(x) for \\(e^x\\). "],["graphs-and-graphics.html", "Chapter 6 Graphics &amp; function graphs 6.1 The graphics frame 6.2 Data graphics: the point plot 6.3 Function graphs 6.4 Graphics layers 6.5 Data and functions 6.6 Inputs to output 6.7 Outputs to inputs 6.8 Graphs of functions with two inputs 6.9 Contour plots 6.10 Slice plots 6.11 Exercises", " Chapter 6 Graphics &amp; function graphs Scientific and statistical graphics are visual depictions of information and data. For displaying a function with a single input, mathematicians and others favor a particular style of graphics. This favored style is called a function graph, which has a specific technical meaning in mathematics. Notice that we’re writing “function graph” rather than “function graphic.” A function graph is a particular sort of graphic: there are many other types of graphics some of which we’ll use to display data or features of functions. 700 6.1 The graphics frame Technical graphs are usually drawn in a graphics frame that has several components: The frame is a region on the piece of paper or computer screen that is marked off by a horizontal and a vertical axis. The horizontal axis stands for one quantity. The vertical axis stands for another quantity. Both the horizontal and vertical axes are drawn with a scale that enables you to translate between a numerical value and position. Figure 6.1: An empty graphics frame with scales for both the horizontal and vertical axes. 6.2 Data graphics: the point plot One of the most common uses of a graphics frame is to display visually two columns from a table containing data. Data are stored in a spreadsheet-like format called a data frame. There are many ways to access data frames and many different ways to store them. In CalcZ we supply data frames in the simplest possible way: giving them a name that you can use to refer to the data frame. For instance, here is a small part of a data frame about the size of penguins in the Palmer Archipelago in Antarctica. 710 species body_mass flipper_length bill_length Chinstrap 3.600 19.3 4.57 Chinstrap 3.850 19.5 4.76 Adelie 3.300 18.7 3.62 Gentoo 4.300 20.8 4.38 Chinstrap 3.950 21.0 4.90 Chinstrap 2.700 19.2 4.69 Gentoo 5.650 22.4 4.95 Adelie 4.300 19.5 4.15 Adelie 3.325 19.0 3.85 Chinstrap 3.775 19.4 5.17 The output above shows what a data frame looks like. Now we need to look at how to use a data frame in an R command. The particular data frame shown just above has the name penguins in R. To refer to the data frame, just use the name. Open a SANDBOX and give the name itself as a command. This simple command causes the data frame to be displayed on the screen. penguins You should see as a result a table that can be scrolled through interactively with all 344 rows of the penguins data frame. Looking at a data frame, or part of one, is sometimes what’s required. But in general you will use the name of the data frame of interest as an argument to an R function. Typically the argument will be named data = as you’ll see below. The name penguins is very general and it wouldn’t be at all surprising if some other penguin fan or researcher created a different set of data with the same name. R, like many other modern languages, makes room for such multiple uses of a name by a facility called a namespace. R programmers can create their own namespace. This is not something we will do in this course. But it’s helpful to know when the namespace mechanism is at work. For instance, the particular penguins we’ve provided with this course comes from a namespace called palmerpenguins. Thus, the “full” name of the data fr is palmerpenguins::penguins. You may see such name constructions occasionally in exercises in this course. You don’t have to understand how namespaces work other than to know that when you are given the full name, you should use it, double colons and all. Before you can use gf_point() to plot a pair of columns from a data frame, you have to know the names of the columns. A useful function for this is names(). Similarly, to look at the first few rows, use the head() function. Try these commands in a sandbox: names(penguins) head(penguins) A point plot displays two columns from a data frame. Each row in the data frame is represented by one point in the graphic. For instance: gf_point(flipper_length_mm ~ body_mass_g, data=penguins) Figure 6.2: Data from 344 penguins on flipper length (mm) and body mass (g). Each penguin has a specific mass and flipper length. If you focus your attention on the penguins with a mass of around 4 kg (that is, 4000 gm), you can see that the different penguins have a variety of flipper lengths. That’s typical natural variability. 6.3 Function graphs Back in Section 4.1 you saw how to use R to create a graph of a function with a single input. (Review that section now if you’ve forgotten.) The slice_plot() function takes two arguments: A tilde expression giving the function you want to plot and naming the horizontal axis. The domain to use when making the plot. For example: slice_plot(sin(z) ~ z, domain(z=c(-10, 10))) The tilde expression can be more elaborate of course, for instance sin(z)*z + z^2 ~ z, but it will always have the name to be used for the horizontal axis on the right-hand side of the tilde character. The domain to be shown in the graph is specified using a special-purpose function, called domain(). The argument to domain is named: Use the same name as on the right-hand side of the tilde expression then an equal sign, then a collected pair of numbers specifying the lower and upper ends of the domain. The collected pair must always be given as the arguments to a very basic function named c(), which simply collects it’s arguments. Later, when we graph functions with two inputs, you’ll see why domain() is set up this way. 6.4 Graphics layers You will often want to compare two functions, or compare a function to data. You can do this using the ordinary graphics functions, e.g. slice_plot() or gf_point(), arranging things so that both types of graphics are drawn together in the same graphics frame. To create this kind of compound graphic, arrange the individual graphics commands into a pipeline, which is a list of commands connected together by %&gt;%. Your pipeline might include two commands or twenty, depending on how complicated is the graphic you want to draw. As long as you use %&gt;% after each command, the next command is taken to build upon the previous command. The very last command in that pipeline should not be followed by %&gt;%.” 720 Here is an just-for-demonstration plot composed from three graphs, each displaying one of the pattern-book functions. At the start of the pipeline, the domain() must be given explicitly as an argument to slice_plot(). You’re welcome to specify other domains in the commands further along the pipeline, but if you don’t the original domain() will be passed down the pipeline. slice_plot(dnorm(x) ~ x, domain(x=c(-4,4))) %&gt;% slice_plot(pnorm(x) ~ x, color=&quot;red&quot;, size=2) %&gt;% slice_plot(sin(x) ~ x, color=&quot;green&quot;, size=4, alpha = 0.2) Just to show how these things are done, the functions have been drawn in different colors, different widths (e.g., size=2) and different levels of transparency (e.g. alpha=0.2). You can use such styling arguments in any slice-plot. 6.5 Data and functions In Figure 6.2, the data point plot of the penguin flipper length vs body mass, there are generally multiple penguins with the same body mass but different flipper lengths. The overall impression is that of a cloud of points. When we construct a function to model the pattern observed in that cloud, we need to respect the mathematical definition of function, part of which is that a function has only one output for any given input. Figure 6.3: Connecting the penguin data points with lines (left) doesn’t directly describe any sensible mathematical function. We use modeling to create a smooth function (right) that stays close, but not too close, to the data points. To create the model of flipper length as a function of body mass, we used one of a set of techniques called machine learning. That is, we didn’t specify that the form should be an exponential or a gaussian or a sigmoid or any other particular shape. We simply asked the computer to figure out a smooth function that stays close to the data. The result, as it happens, was a sigmoid. 730 6.6 Inputs to output You can easily evaluate a function for a given input from its graph. As you know, just put your finger at the horizontal coordinate for the input. Then move your finger upward to reach the point on the curve directly above that horizontal coordinate. You read off the value of the function at that input by reference to the scale on the vertical axis. 740 It’s not possible to show with a graph the whole of a function whose domain is \\(-\\infty\\) to \\(\\infty\\). Consequently, when drawing a graph we choose to show only that part of the domain that we expect will be relevant to our needs. Sometimes, the graphic’s domain includes parts that are not in the domain of the function being drawn. In such cases, the function’s graph does not extend into the invalid part of the graphic domain, as in this plot of a function whose domain is only the positive numbers. This function has a range that runs from \\(-\\infty\\) to \\(\\infty\\), but the limits of paper and display mean that we can show only part of this range. With experience, you’ll learn to read the hints in a graph that the underlying function might have a range larger than the one shown in the graphic. 6.7 Outputs to inputs Graphs are relatively modern, coming into mainstream use only in the 1700s. Much of mathematics was developed before graphs were invented. One consequence of this is that function tasks that are easy using a graph might be very hard with the previous ways of implementing functions. This is analogous to the way that arithmetic is pretty easy with Arabic numerals, but really hard with Roman numerals. 750 A function graph makes it easy to evaluate the function inverse. For all the basic modeling functions we have a way to calculate numerically the output for any given input (in the function’s domain). Often, working with a function goes another way: you know the output and you want to find a corresponding input. It’s easy to do this with a graph. Pick the position on the vertical axis that represents the given input. Then trace horizontally to where the ink is. From there, trace vertically to read off the value of an input that would produce the given output. Mathematicians are careful to distinguish between functions where there is one and only one possible input that generates each given output, and functions where there can be more than one input that generates the same output. (Mathematicians use the word unique to mean “one and only one.”) Functions with a one-to-one relationship between output and input are called “invertible.” Invertible or not, it is a common procedure for working with functions to find an input corresponding to a specific, given output. In high-school algebra, this was called “solving for \\(x\\).” A special case of solving is finding the roots of a polynomial. The name we give to the procedure is zero finding, which correctly points out that we are trying to find an input. 6.8 Graphs of functions with two inputs We can draw graphs of functions with two inputs. Now the points need to be marked in a 3-dimensional space: one axis for each of the two inputs and another axis for the output. Like this: 760 Figure 6.4: A graph of a function of two inputs is a surface. It is very hard to read a graph of a function with two inputs. Think of the graph as a kind of tent suspended over a domain of ground. The graph itself is a surface. To show the graph on a display, some tricks of the trade are used: color to give an additional scale for the output; computer graphics to let us rotate the surface to look at it from various perspectives, added grid lines and marks on the surface to help us read out the numerical value. 6.9 Contour plots A mathematical graph is just one way to draw a picture of a function with two inputs. There are other ways. One helpful mode of picture is called a contour plot, familiar to many non-mathematicians in the form of topgraphical maps showing landscape elevation as a function of latitude and longitude. Figure 6.5 shows a contour plot of the same function shown in Figure 6.4. 770 Figure 6.5: A contour plot displays the surface in the same manner as a topographical map shows the terrain. This contour plot is a topographical map of the mathematical graph in Figure (ref?)(fig:fun-1b-1-2). It may take some practice to learn to read contour plots fluently but it is a skill that’s worthwhile to have. Note that the graphics frame is the Cartesian space of the two inputs. The output is presented as contour lines. Each contour line has a label giving the numerical value of the function output. Each of the input value pairs on a given contour line corresponds to an output at the level labeling that contour line. To find the output for an input pair that is not on a contour line, you interpolate between the contours on either side of that point. For example, the input pair (0, 0)—which is at the bottom of the frame, midway from left to right—falls between the contours labeled “20” and “22.” This means that the output corresponding to input (0, 0) is somewhere between 20 and 22. The point is much closer to the contour labeled “20,” so it’s reasonable to see the output value as 20.5. This is, of course, an approximation, but that’s the nature of reading numbers off of graphs. Often, the specific numerical value at a point is not of primary interest. Instead, we may be interested in how steep the function is at a point, which is indicated by the spacing between contours. When contours are closely spaced, the hillside is steep. Where contours are far apart, the hillside is not steep, perhaps even flat. Another common task for interpreting contour plots is to locate the input pair that’s at a local high point or low point: the top of a hill or the bottom of a hollow. Such points are called local argmax or local argmin respectively. The output of the function at a local argmax is called the local maximum; similarly for a local argmin, where the output is called a local minimum. (The word “argmax” is a contraction of “argument of the maximum.” We will tend to use the word “input” instead of “argument,” but it means exactly the same thing to say “the inputs to a function” as to says “the arguments of a function.”) Here are some additional tasks which you should learn to perform at a glance when reading a contour plot: Start at a given input pair and determine two directions: the direction to move which is most steeply uphill, the direction to move which will keep the function output the same. Translate a small region of a contour plot into the word for a corresponding geographical feature with that topology: hills, valleys, crests, coves, hollows, and so on. 6.10 Slice plots As mentioned before, mathematical modeling is the process of constructing mathematical representations of situations or phenomena of interest. In CalcZ, we are primarily interested in using functions as such representations. 780 Almost always, when mathematically modeling a real-world situation or phenomenon, we do not try to capture every nuance of every relationship that might exist in the real world. We leave some things out. Such simplifications make modeling problems easier to deal with9 and encourage us to identify the most important features of the most important relationships. On the other hand, it’s easy to go wrong and leave out something that’s important. To mitigate this risk, many modeling projects involve a modeling cycle where we propose a candidate model, examine the consequence of that model to see if it corresponds well to the parts of reality that are important to us in our task, and modify the model as needed to produce a new and better candidate. 790 In this spirit, it’s useful always to assume that our models are leaving something out and that a more complete model involves a function with more inputs than the present candidate. The present candidate model should be considered as a slice of a more complete model. Our slice leaves out one or more of the variables in a more complete model. To illustrate this, suppose that we have a “more complete model” in the form of a function of two inputs, as shown in the contour plot below. As you become practiced reading contour plots, you might prefer to read this one as a hilltop (shaded yellow) side-by-side with a hollow or bowl (shaded purple), with green, almost level flanks at the left and right edges of the frame. The most common forms of slice involve constructing a simpler function that has one input but not the other. For example, our simpler function might ignore input #2. There are different ways of collapsing the function of two inputs into a function of one input. An especially useful way in calculus is to take the two-input function and set one of the inputs to a constant value. For instance, suppose we set input #2 to the constant value 1.5. This means that we can consider any value of input #1, but input #2 has been replaced by 1.5. In Figure 6.6, we’ve marked in red the points in the contour plot that give the output of the simplified function. 795 Figure 6.6: Left: A slice through the domain of a contour plot. Right: The value of the function along that slice, presented as a mathematical graph, as generated by slice_plot(). Each point along the red line corresponds to a specific value of input #1. From the contours, we can read the output corresponding to each of those values of input #1. This relationship, output versus input #1 can be drawn as a mathematical graph (to the right of the contour plot). Study that graph until you can see how the rising and falling parts of the graph correspond to the contours being crossed by the red line. Slices can be taken in any direction or even along a curved path! The blue line below the slice constructed by letting input #2 vary and holding input #1 and the constant value 0. 6.11 Exercises Exercise 6.1: 9LB8hK Question A What is the exact input to the pattern-book logarithm function where the output is 0?     0︎✘        0.3989423︎✘        1/2︎✘        1\\(\\heartsuit\\ \\) Question B What is the exact input to the pattern-book reciprocal function where the output is 1?     0︎✘        0.3989423︎✘        1/2︎✘        1\\(\\heartsuit\\ \\) Question C What is the exact input to the pattern-book proportional function where the output is 1/2?     0︎✘        0.3989423︎✘        1/2\\(\\heartsuit\\ \\)       1︎✘ Question D The pattern-book square function just touches the horizontal axis. What’s the input where this happens?     0\\(\\heartsuit\\ \\)       0.3989423︎✘        1/2︎✘        1︎✘ The word “tractable” is used to describe problems that can be productively handled.↩︎ "],["params-intro.html", "Chapter 7 Parameters for functions 7.1 Parallel scales 7.2 Scaling the input 7.3 Scale the output 7.4 Linear combinations 7.5 Exercises", " Chapter 7 Parameters for functions The pattern-book functions provide the modeler with a collection of shapes. They are not yet fully suited to represent real-world phenomena. To illustrate, consider Figure 7.1 which shows the number of officially confirmed COVID-19 cases in the US in March 2020. 800 The COVID pandemic was widely and appropriately described as “exponential,” so alongside the data Figure 7.1 shows the function \\(e^x\\). Figure 7.1: Cumulative officially confirmed COVID-19 cases during the month of March, 2020. The red curve is \\(e^x\\) There’s an obvious mismatch between the data and the function \\(e^x\\). Does this mean the COVID pattern is not exponential? A hint comes from the formula \\(e^x\\). What is \\(x\\)? Plotted as it is in the graph, \\(x\\) is the calender day in March. But why shouldn’t \\(x\\) be the given in hours or minutes or weeks? If we want the input to \\(\\exp()\\) to be in “hours” instead of “days,” we can multiply \\(x\\) by 24. If the input is to be in weeks, the multiplier should be \\(\\frac{1}{7} = 0.1429\\). In both cases, the function will be \\(e^{kx}\\), where \\(k\\) would be 24 for hours or 0.1429 for weeks. Exploring a bit, we found that \\(0.3 \\leq k &lt; 0.5\\) will produce functions graphs that match the data much better than pattern-book \\(e^x\\). 810 Figure 7.2: COVID-19 data compared to the exponential functions \\(e^{kt}\\). A variety of possible numerical values for \\(k\\) is shown. The multiplier \\(k\\) in \\(e^{kx}\\) is called a parameter of the function: a number that we can use to set the scale of the input. To use the exponential function to model COVID, we’ve had to stretch out the red curve in Figure 7.1 by tailoring pattern-book \\(x\\) as \\(k x\\). Perhaps it’s a matter of personal choice which size of \\(k\\) will be best suited to model the data. My personal choice is \\(k=0.30\\). My reasoning? The \\(k=0.30\\) curve roughly parallels the COVID data. The flaw with \\(k=0.30\\) is that the curve lags the data by several days. But we can fix this by pulling the \\(k=0.30\\) curve to the left. Mathematically this can be accomplished by subtracting a few days from \\(x\\) before multiplying by \\(k\\), that is, using the function \\[f(x) \\equiv e^{k(x-x_0)}\\] where \\(x_0\\) stands for the shift. (A positive value for \\(x_0\\) is a shift to the right, a negative value is a shift to the left.) Figure 7.3 shows (in red) the \\(k=0.30\\) curve after pulling it 10 days to the left. It’s now a pretty good match to the data. Figure 7.3: COVID-19 data compared to the exponential functions \\(e^{k(t-x_0)}\\). Here, \\(x_0\\) is negative because the shift is to the left. Note that once we’ve aligned the red curve horizontally, it seems to curve too much. The green curve does much better. It has a much gentler curve, \\(k=0.19\\) and is pulled about a little more than a month to the left. 820 By parameterizing the exponential function as \\(e^{k(x-x_0)}\\) and finding suitable values for \\(k\\) and \\(x_0\\), we get a good match to the March data. But models can sometimes tell us more. For the green curve in Figure 7.3 the value of \\(x_0\\) is -32 days. 32 days before March 1 is late January. We know from other sources of information, the outbreak began in late January. It’s remarkable that even though the curve was constructed without any data from January or even February, the data from March, translated through the curve-fitting process, pointed to the start of the outbreak. 7.1 Parallel scales The graphical format we have been using to display functions of one variable places the input on the horizontal axis and the output on the vertical axis. This is not the only way to draw a function. Consider these everyday objects: a thermometer and a ruler.       Each object presents a read-out of what’s being measured—temperature or length—on two different scales. At the same time, the objects provide a way to convert one scale to another. A function gives the output for any given input. We represent the input value as a position on a number line—which we call an “axis”—and the output as a position on another output line, almost always drawn perpendicular to one another. But the two number lines can just as well be parallel to one another. To evaluate the function, find the input value on the input scale and read off the corresponding output. The inverse function can be evaluated just as easily: switch the roles of the input and output scales. 830 Taking the traditional (“imperial”10) unit scale as the input and the metric scale as the output, the two functions implemented on the objects are: \\[\\underbrace{C(F) = \\frac{5}{9}(F-32)}_\\text{Fahrenheit to Celcius}\\ \\ \\ \\text{and}\\ \\ \\ \\ \\underbrace{\\text{cm(inches)} = 2.54 \\times (\\text{inches}-0}_\\text{inches to cm})\\] These are very simple, straight-line functions, but they play an important role in modeling. Each conversion function can be written in the form \\(\\line(x) \\equiv m (x - x_0)\\). Of course, if you multiply the \\(m\\) through both terms in parentheses, you get \\(\\line(x) = m x - m x_0\\) which can be written even more simply as \\(mx + b\\) by setting \\(b\\equiv m x_0\\). so the conversion function does conform to the straight-line formula we’re used to. \\(m\\) and \\(x_0\\) are the parameters of the straight-line function. In terms of the graph of a straight-line function, \\(m\\) is the slope and \\(x_0\\) is the x-intercept respectively. Often, functions can be parameterized in other ways. For instance, you likely learned the parameterization \\(m x + b\\), in which \\(m\\) is (still) the slope of the graph but \\(b\\) is the y-intercept. (Expanding out \\(m(x-x_0)\\) and comparing to \\(m x + b\\), you can see that \\(b = m x_0\\).) We can call \\(m(x - x_0)\\) the “x-intercept parameterization” and \\(m x + b\\) the \"y-intercept parameterization. They are equivalent and equally good ways of parameterizing the straight line. There are still other ways of parameterizing, each style reflecting its own format for specifying the two points that make up a line. 7.2 Scaling the input To turn a pattern-book function into a basic modeling function all we do is use \\(\\line()\\) to convert the input before applying the pattern-book function. 840 To illustrate the link between basic modeling functions and their pattern-book prototypes, Figure 7.4 shows the model we fit to the COVID-19 data for the cumulative number of confirmed cases for each day in March: \\(\\text{cases(day)} = e^{0.19(\\text{day}- -32)}\\) Figure 7.4: A graph of the pattern-book exponential with an additional scale displayed (blue) to match it to the COVID-19 data The function being drawn is simply \\(e^x\\): a function from the pattern book. The black horizontal scale shows \\(x\\), the input to the pattern-book function. Where does that value of \\(x\\) come from? It’s \\(0.19(\\text{day} - -32)\\), where day is the number of the day in March. For instance, on March 20, day\\(=10\\) and \\(0.19*(\\text{day}- -32) = 9.88\\). You can see that 20 on the blue scale matches 10 on the black scale. The model says that on day 20 (blue scale) the input to the pattern-book function will be 9.88 (black scale). Plugging the input 9.88 into the pattern-book exponential gives \\(e^{9.88} = 19536 \\approx 20,000\\) cases. The pattern-book function does not give a good model of the COVID case numbers. But if we scale the input before applying the pattern-book function, we are effectively laying a new axis, the blue one in Figure 7.4, that is stretched and shifted from the pattern-book input (blackscale). Using the blue axis lets us read off the number of cases as a function of the day in March. Input scaling empowers the pattern-book functions to model a huge variety of phenomena. There’s just one exponential function and it always looks exactly the same. But there is a huge variety of ways to draw a blue axis, that is, to scale the input. With input scaling, the pattern-book function is tailored to become one of our basic modeling functions. \\[\\underbrace{e^x}_\\text{pattern-book function}\\ \\text{versus}\\ \\underbrace{e^{k(x-x_0)}}_\\text{basic modeling function}\\] The straight-line function \\(\\line()\\) is being written here as \\(k(x-x_0)\\) rather than \\(m(x-x_0)\\). It’s traditional when writing exponential functions to use the letter \\(k\\) as the multiplier, but you can use whatever name you wish for a parameter. Knowing and using the idiom of mathematical notation will help you read and write mathematics more fluently. 850 The table shows a of the mathematical idioms used in parameterizing the pattern-book functions. Function Written form Parameter 1 Parameter 2 Exponential \\(e^{kt}\\) \\(k\\) “exponential constant”11 Not used Exponential \\(e^{t/\\tau}\\) \\(\\tau\\) “time constant”12 Not used Exponential \\(2^{t/\\tau_2}\\) \\(\\tau_2\\) “doubling time”13 Not used Power-law \\([x - x_0]^p\\) \\(x_0\\) x-intercept exponent Sinusoid \\(\\sin\\left(\\frac{2 \\pi}{P} (t-t_0)\\right)\\) \\(P\\) “period” \\(t_0\\) “time shift” Sinusoid \\(\\sin(\\omega t + \\phi)\\) \\(\\omega\\) “angular frequency” \\(\\phi\\) “phase shift” Sinusoid \\(\\sin(2 \\pi \\omega t + \\phi)\\) \\(\\omega\\) “frequency” \\(\\phi\\) “phase shift” Gaussian dnorm(x, mean, sd) “mean” (center) sd “standard deviation” Sigmoid pnorm(x, mean, sd) “mean” (center) sd “standard deviation” Straight-line \\(mx + b\\) \\(m\\) “slope” \\(b\\) “y-intercept” Straight-line \\(m (x-x_0)\\) \\(m\\) “slope” \\(x_0\\) “center” 7.3 Scale the output Just as the natural input usually needs to be scaled before it reaches the pattern-book function, so the output from the pattern-book function may need to be scaled before it presents a result suited for interpreting in the real world. Figure 7.5: Natural quantities must be scaled to pure numbers before being suited to the pattern-book functions. The output from the function is a pure number which is scaled to the natural quantity of interest. The overall result of input and output scaling is to tailor the pattern-book function so that it is ready to be used in the real world. 860 Name Pattern-book form Modeling form exponential \\(e^x\\) \\(A e^{kx} + C\\) sinusoid \\(\\sin(x)\\) \\(A \\sin\\left(\\frac{2 \\pi}{P} (x-x_0)\\right) + C\\) proportional \\(x\\) \\(a x + b\\) The parameter \\(C\\) is often called the baseline or the offset. Statisticians call it the “intercept,” because it plays the same role as \\(b\\) in the straight-line function. When working with sinusoids, parameter \\(A\\) is called the amplitude. Of course, you’re already familiar with \\(a\\) and \\(b\\): the slope and y-intercept of a straight line. Figure 7.6: Baseline (blue), amplitude (red), and period (green) for the sinusoid. Figure 7.7: The baseline for the exponential is the horizontal asymptote. There is no vertical asymptote. Our prefered form for the input scaling in the basic modeling functions is \\(m(x - x_0)\\). Sometimes it can be a little hard to see this form given the conventions for parameterization. For instance, in the basic modeling sinusoid \\[\\sin\\left(\\underbrace{\\frac{2 \\pi}{P}}_m\\ \\ (x-x_0)\\right)\\] the multiplier is written \\(\\frac{2\\pi}{P}\\) rather than \\(m\\). 863 In the basic modeling exponential and straight line functions \\[A e^{kx} + C \\ \\ \\ \\text{and}\\ \\ \\ a x + b\\] The \\(x_0\\) does not appear. Why not? Suppose we did write the exponential as \\[A_2 e^{k(x-x_0)} + B\\] This could be simplified algebraically to \\[A_2 e^{kx_0} e^{kx} + B\\] Although this looks a bit different, note that \\(e^{k x_0}\\) is simply a number, not a function of \\(x\\). We can therefore combine it with \\(A_2\\), giving \\(A = A_2 e^{k x_0}\\). The \\(A\\) coefficient in the exponential makes any use of \\(x_0\\) redundant and unnecessary. A similar algebra logic applies to the straight-line function \\(ax + b\\). We don’t need an \\(x_0\\) there, either. 7.4 Linear combinations We’ve discussed shifting the baseline of the exponential and sinusoid functions by adding a constant to the basic modeling function, like this:864 \\[f(t) \\equiv A e^{kt} + C\\\\ \\ \\\\ g(t) \\equiv A \\sin\\left(\\frac{2\\pi}{P} t\\right) + C\\] We’ve called this output scaling. It’s an example of a much more general and powerful way of contructing modeling functions called linear combinations. In a linear combination, you start with one or more basic functions. For discussion, let’s call these \\(f_1(t)\\), \\(f_2(t)\\), \\(f_3(t)\\) and so on. In making a linear combination, multiply each of the basic functions by some quantity and add the results together: \\[\\text{linear combination of}\\ f_1(t)\\ \\text{and}\\ f_2(t): \\ \\ A_1 f_1(t) + A_2 f_2(t)\\] The quantities \\(A_1\\) and \\(A_2\\) are called scalars because they scale the functions. (In Chapter ?? you will see that we make a distinction between a scalar, which is a single quantity, and a vector, which is a set of scalars.) It’s common to take linear combinations of functions with different inputs, for example \\[h(x, y, t) \\equiv 4 e^{-kt} + 7 y + 2\\,\\pnorm(x-3) - 19\\] In fields like statistics and economics and other social sciences, as well as clinical medical research, a great number of modeling techniques involve such combinations of functions of various inputs. 866 In engineering and physics, an important class of functions involves a linear combination of many sinusoids of different periods, e.g.  \\[\\text{signal}(t) \\equiv A_1 \\sin\\left(\\frac{2 \\pi}{P_1}t\\right) + A_2 \\sin\\left(\\frac{2 \\pi}{P_2}t\\right) + A_3 \\sin\\left(\\frac{2 \\pi}{P_3}t\\right) + \\cdots\\] Linear combination of functions provides a powerful and flexible general-purpose modeling technique in part because many physical systems seem to work this way and in part because the methods for finding the scalars—\\(A_1\\), \\(A_2\\), and so on—have an extremely strong theory and fast computer implementations that automatically solve the problem once the modeler has selected the functions she wants to combine. In Block 4, we use the name target problem to refer the problem of finding scalars to match as well as possible a linear combination to data. An expression like \\(A e^{kx} + C\\) combines the exponential (obviously!) and a second function that isn’t immediately obvious: the constant function \\(\\text{constant}(x) \\equiv 1\\). It might be overkill to re-write the expression as \\(A e^{kx} + C\\, \\text{constant}(x)\\) but get in the habit of seeing the constant function as a constant presence in linear combinations! Polynomials are an important example of linear combinations. Something like \\(p(x) \\equiv a + b t + c t^2\\) is a linear combination of the constant function, the proportional function, and the square function. 7.5 Exercises Exercise 7.1: MWLCS Recall that each basic modeling function is constructed from the corresponding pattern-book function by scaling the input. \\[\\text{pattern-book function}\\ \\ \\underset{x\\rightarrow a(x-x_0)}{\\overset{\\text{input scaling}}{\\Large\\Longrightarrow}} \\ \\ \\text{basic modeling function}\\] Figure ?? shows the pattern-book functions with some added annotations. When the function has horizontal or vertical asymptotes, the location is shown by orange arrows. There is also a blue dot placed on the graph of functions with asymptotes. For functions without asymptotes, there are two blue dots. The location of the asymptotes and blue dots mark characteristic features of each function. The positions of the blue dot and asymptotes, or the positions of the two blue dots, are useful for figuring out the values of parameters in basic modeling functions. For example, the basic modeling reciprocal function is \\(g(x) \\equiv \\frac{1}{m (x-x_0)} + C\\). The parameter \\(C\\) will be the value where the horizontal asymptote crosses the vertical axis. The parameter \\(x_0\\) will be the value where the vertical asymptote crosses the horizontal axis. As for the parameter \\(m\\): find the input where the function value is \\(C+1\\). Let’s call that \\(x^\\star\\). The \\(m = 1/(x^\\star - x_0)\\). For the sinusoid, the blue dots mark the positive-going zero crossings of the baseline. The horizontal distance between the blue dots is the period parameter, \\(P\\). The horizontal position of either of the two dots tells the phase offset \\(x_0\\). Each of the following plots shows a basic modeling function whose input scaling has the form \\(x - x_0\\). Your job is to figure out from the graph what is the numerical value of \\(x_0\\). (Hint: For simplicity, \\(x_0\\) in the questions will always be an integer.) Question A In plot (A), what is \\(x_0\\)?     -2︎✘        -1︎✘        0︎✘        1︎✘        2\\(\\heartsuit\\ \\)Right. Look for the input that generates the peak output value. Question B In plot (B), what is \\(x_0\\)?     -2︎✘        -1\\(\\heartsuit\\ \\)The fiducial point is a positive-going zero crossing.       0︎✘        1︎✘        2︎✘ Question C In plot (C), what is \\(x_0\\)?     -2︎✘        -1︎✘        0︎✘        1\\(\\heartsuit\\ \\)The vertical asymptote is the clue.       2︎✘ Question D In plot (D), what is \\(x_0\\)? -2︎✘ -1︎✘ 0︎✘ 1Nice! The input where the output is half way between the two horizontal asymptotes 2︎✘ Question E In plot (E), what is \\(x_0\\)?     -2\\(\\heartsuit\\ \\)Right. The location of the vertical asymtote is the clue.       -1︎✘        0︎✘        1︎✘        2︎✘ Exercise 7.2: uKCIE Each of the graphs shows two horizontal scales and one of the basic modeling functions. Which horizontal scale (black or blue) corresponds to the pattern-book function? Question A For graph (A), which scale corresponds to the pattern-book function? blackCorrect.  blue︎✘ neither︎✘ both︎✘ It can’t be both. There’s only one pattern-book function. When you scale the input, it becomes a “basic modeling function.” Question B For graph (B), which scale corresponds to the pattern-book function? black︎✘ blueNice! Right. The pattern-book function has an output of 1/2 when the output is zero. That’s what the blue scale shows. neither︎✘ both︎✘ It can’t be both. There’s only one pattern-book function. When you scale the input, it becomes a “basic modeling function.” Question C For graph (C), which scale corresponds to the pattern-book function? black︎✘ blueCorrect. The pattern-book sinusoid has a positive-going zero crossing at \\(x=0\\). That’s the blue scale. neither︎✘ both︎✘ It can’t be both. There’s only one pattern-book function. When you scale the input, it becomes a “basic modeling function.” Exercise 7.3: BLECL Find the straight-line function that will give the value on the black scale for each point \\(x\\) on the blue scale. The function will take the blue-scale reading as input and produce the black-scale reading as output, that is: \\[\\text{black}(x) \\equiv a (x - x_0)\\] Question A For Graph A, which function maps blue \\(x\\) to the value on the black scale? $ ext{black}( ext{blue}) x$Excellent!  $ ext{black}( ext{blue}) , x$︎✘ You’re going the wrong way, from black to blue. $ ext{black}( ext{blue}) x + 3$︎✘ Is there a horiztontal shift? $ ext{black}( ext{blue}) x - 3$︎✘ Is there a horizontal shift? Question B For Graph B, which function maps blue \\(x\\) to the value on the black scale? $ ext{black}( ext{blue}) -,x$Nice!  $ ext{black}( ext{blue}) x$︎✘ Look carefully at the \\(\\pm\\) signs on the scales. $ ext{black}( ext{blue}) x$︎✘ Look carefully at the \\(\\pm\\) signs on the scales. $ ext{black}( ext{blue}) -x$︎✘ You’re going the wrong way, from black to blue. Question C For Graph C, which function maps blue \\(x\\) to the value on the black scale? $ ext{black}( ext{blue}) (x - 2)$Good. Good. An interval of length 4 on the blue scale (say, from 2 to 6) becomes an interval of length 2 on the black scale. So you know that blue to black involves dividing by 2. $ ext{black}( ext{blue}) , x$︎✘ Is there a shift $ ext{black}( ext{blue}) ,x$︎✘ Is there a shift? $ ext{black}( ext{blue}) ,(x + 2)$︎✘ You’re going the wrong way, from black to blue. Question D For Graph D, which function maps blue \\(x\\) to the value on the black scale? $ ext{black}( ext{blue}) (x + 3)$Excellent!  $ ext{black}( ext{blue}) (x - 3)$︎✘ $ ext{black}( ext{blue}) (x+1)$︎✘ $ ext{black}( ext{blue}) rac{3}{2}(x - 2)$︎✘ You’re going the wrong way, from black to blue. Exercise 7.4: ILESX Question A True or false: \\(2^x\\) is a power-law function. TRUE︎✘ In a power-law function, the input is the base. In \\(2^x\\), the input is the exponent. So it’s an exponential function. FALSEExcellent!  Question B True or false: \\(3/x^2\\) is a power-law function. TRUEGood.  FALSE︎✘ This is the same as \\(3 x^{-2}\\). You can see that \\(x\\) is the base, so this is a power-law function. Question C True or false: \\(5\\sqrt{x}\\) is a power-law function. TRUEGood.  FALSE︎✘ This is the same as \\(5 x^{1/2}\\). The input \\(x\\) is the base, so this is a power-law function. Question D The gravitational force, F, between two bodies is inversely proportional to the square of the distance \\(d\\) between them. Then … \\(F = k d^{2}\\)︎✘ Inversely proportional to the square would be \\(d^{-2}\\) \\(F = kd^{-2}\\)Correct.  \\(F = k d^{1/2}\\)︎✘ This is a square-root relationship. \\(F = k d^{-1/2}\\)︎✘ This is inversely proportional to the square root. Exercise 7.5: FKLEU The graph shows a linear combination of two sinusoids, one of period 0.6 and the other of period 2. There is also a baseline shift. That is, the graph shows the function: \\[A_1 \\sin\\left(\\frac{2\\pi}{2}t\\right) + A_2 \\sin\\left(\\frac{2\\pi}{0.6} (t-.3)\\right) + A_3\\] Question A What is \\(A_3\\)?     -4\\(\\heartsuit\\ \\)       -2︎✘        0︎✘        2︎✘        4︎✘ Question B What is \\(A_1\\)?     0︎✘        1︎✘        2\\(\\heartsuit\\ \\)       3.5︎✘ Question C What is \\(A_2\\)?     0︎✘        1\\(\\heartsuit\\ \\)       2︎✘        3.5︎✘ Called “imperial” because it was codified in an 1825 Act of the British parliament. Inches are imperial, but temperature isn’t part of the Act.↩︎ \\(-\\tau_2\\) is sometimes called the “half life.”↩︎ "],["process-of-modeling.html", "Chapter 8 Finding parameters for the basic modeling functions 8.1 Variations from scaling 8.2 Curve fitting a periodic function 8.3 Curve fitting an exponential function 8.4 Curve fitting a power-law function 8.5 Gaussian and sigmoid functions 8.6 Exercises", " Chapter 8 Finding parameters for the basic modeling functions Seen very abstractly, a mathematical model is a set of functions that represent the relationships between inputs and outputs. 900 At the most simple level, building a model can be a short process: Develop an understanding of the relationship you want to model. Often, part of this “understanding” is the pattern seen in data. Choose a function type—e.g. exponential, sinusoidal, sigmoid—that you think would be a good match to the relationship. Find parameters that scales your function to be able to accept real-world inputs and generate real-world outputs. It’s important to distinguish between two basic types of model: Empirical models which are rooted in observation and data. Mechanistic models such as those created by applying fundamental laws of physics, chemistry, and such. We are going to put off mechanistic models for a while, for two reasons. First, the “fundamental laws of physics, chemistry, and such” are often expressed with the concepts and methods of calculus. We are heading there, but at this point you don’t yet know the core concepts and methods of calculus. Second, most students don’t make a careful study of the “fundamental laws of physics, chemistry, and such” until after they have studied calculus. So examples of mechanistic models will be a bit hollow at this point. We’ll start then with empirical modeling: finding functions that are a good summary of data. The process of constructing a model that is a good match for data is called curve fitting, or, more generally, fitting a model. 8.1 Variations from scaling A good place to start building a model is to pick one of the basic modeling functions. This works surprisingly often. To remind you, here are our nine pattern-book functions: 910 Pattern name Traditional notation R notation exponential \\(e^x\\) exp(x) logarithm (“natural log”) \\(\\ln(x)\\) log(x) sinusoid \\(\\sin(x)\\) sin(x) square \\(x^2\\) x^2 proportional \\(x\\) x constant \\(1\\) 1 reciprocal \\(1/x\\) or \\(x^{-1}\\) 1/x gaussian \\(\\dnorm(x)\\) dnorm(x) sigmoid \\(\\pnorm(x)\\) pnorm(x) The basic modeling functions are the same, but replace the plain \\(x\\) in the pattern-book function with a straight-line function, for instance \\(ax + b\\) or, equivalently \\(a(x - x_0)\\). In use, the parameter \\(a\\) is often written with some other letter and, often, the \\(b\\) or \\(-x_0\\) part is not needed. Here are some of the common forms of the basic modeling functions you will encounter: Name Common forms note Exponential \\(e^{k t}\\) or \\(e^{-k t}\\) or \\(e^{-t/ \\tau}\\) Sinusoid \\(\\sin\\left(\\frac{2 \\pi}{P} (t-t_0)\\right)\\), \\(\\sin\\left(\\frac{2 \\pi}{P} t\\right)\\), or \\(\\sin(\\omega t)\\) \\(P\\) is “period,” \\(\\omega\\) is “angular frequency.” Monomials \\([x-x_0]\\) or \\([x-x_0]^2\\), and so on Power-law generally \\(x^p\\) or \\([x-x_0]^p\\) \\(p\\) is “power.” Gaussian \\(\\dnorm(x, mean, sd)\\) Interpret “mean” as “center.” Sigmoid \\(\\dnorm(x, mean, sd)\\) \\(sd\\) is “standard deviation” or “spread.” It helps in making the selection to have ready to mind the basic shape of each of these function families. To review, revisit Section 2.4. Remember also that, in general, we scale the inputs and scale the output. This means that in choosing a model family, we don’t have to worry at first about the numbers on the axes. (Of course, those numbers will be critically important later on in the process!) The scaling does, however, allow us to consider some variations on the shapes of the modeling functions. In particular, the input scaling lets us flip the shape right-for-left. And the output scaling lets us flip the shape top-for-bottom. \\(f(t)\\), basic shape \\(f(-t)\\), flipped right-for-left \\(-f(t)\\), flipped top-for-bottom \\(-f(-t)\\), flipped both top-for-bottom and right-for-left For functions such as the sinusoid, flipping is not much use, since the flipped sinusoid curve is still a sinusoid, although with a shifted input. Similarly, a right-for-left flipped gaussian function has the same shape as the original. For the straight-line function, flipping of either sort accomplishes the same thing: changing the sign of the slope. For the exponential function, the two possible types of flipping—right-for-left and top-for-bottom—produce four different curves, all of which are exponential, shown in Figure 8.1. Figure 8.1: Four variations of the exponential function. 8.2 Curve fitting a periodic function Figure 8.2 shows the tide level in Providence, Rhode Island, starting at midnight on April 1, 2020 and recorded every minute for four and a half days. (These data were collected by the US National Oceanic and Atmospheric Administration. Link) 960 Figure 8.2: About four days of tide-level data from Providence, Rhode Island It’s not too hard to see what’s going on. The tide rises and falls about every 12 hours. The difference between high tide and low tide is a little more than one meter. The tide gauge is calibrated so that a typical reading is 1 meter, although we don’t know what that is respect to. (Certainly not sea level, since then the typical reading would be around zero.) This simple description tells almost everything needed to match a basic modeling function to the tide level. Given the clear pattern in the data, we’ll use a sinusoid, that is, a function of the form \\[\\text{tide}(t) \\equiv A \\sin(2\\pi t/P) + B\\] The procedure is straightforward: Step 0: Determine whether a sinusoid model is appropriate. As you know, sinusoids oscillate up and down repeatedly with a steady period. That certainly seems the case here. But sinusoids are also steady in the peak and trough values for each cycle. That’s only approximately true in the Providence data. Models inevitably involve approximation. We’ll have to keep an eye on whether modeling with sinusoids and their fixed amplitude still lets us extract useful information. Step 1: Choose a sensible value to represent the low point repeatedly reached. 0.5 m seems appropriate here, but obviously the exact position of the trough of each cycle varies over the 4.5 day duration of the data. Similarly, the peak is near 1.6 m. Parameter \\(B\\) is the mean of the peak and trough values: \\(\\frac{1.6 + 0.5}{2} = 1.05\\) m here. Parameter \\(A\\) is half the difference between the peak and trough values: \\(\\frac{1.6 - 0.5}{2} = 0.55\\). Parameter \\(B\\) is called the baseline of the sinusoid. Parameter \\(A\\) is the amplitude. (Note that by convention, the amplitude is always half the high-to-low range of the sinusoid.) Step 2: Estimate the period \\(P\\) of the sinusoid. This can be done with the horizontal axis scale: measure the horizontal duration of a complete cycle. I like to use the time between peaks, but the time between troughs would work just as well. Another good choice is the time between positive sloping crossings of the baseline. (But be careful. The time between successive baseline crossings, one positive sloping and the other negative, give just half the period.) On the scale of the above plot, it’s hard to read off the time of the first peak. So, zoom in until it becomes more obvious. Figure 8.3: Zooming in on the start of the data (left) and on the last part of the data (right). The left panel in Figure 8.3 shows about 24 hours at the start of the record. The first peak is at about 6 hours, the second at about 19 hours. That indicates that the period is roughly 19 - 6 = 13 hours. Step 3 Plot out the model over the data. Replacing the symbols \\(A\\), \\(B\\), and \\(P\\) with our estimates, the model is \\[{\\color{magenta}\\text{tide}(t) \\equiv 1.05 + 0.55 \\sin(2\\pi t/13)}\\] Figure 8.4 shows this model in \\(\\color{magenta}\\text{magenta}\\). Figure 8.4: The sinusoid fails to align with the timing of peaks and troughs. Figure 8.4 shows the model aligning beautifully with the data at around time 80 hours, but not so well near the very beginning of the record. Looking carefully, you can see the magenta peak gradually move to the left compared to the data as you look at the peaks of the cycles one at a time moving backward from \\(t=80\\) hours. This is diagnostic of our 13-hour estimate for the period being a little too long. A good way to refine the estimate is to change the model slightly and re-graph the data and model. Keep doing this until you have found the right alignment. In other words, parameter estimation is often an iterative process of estimate-and-refine. This is one of the aspects of the modeling cycle, where a modeler builds a tentative model, looks for systematic deviations from the data, and refines the model. Another sort of deviation of the model from the data seen in Figure 8.4 concerns the varying heights of the peaks and troughs in the data, which is not captured by the simple sinusoid pattern. Perhaps you can see that at the beginning of the record, the troughs are also wider than the peaks. Later on, as this extra width disappears, the amplitude of the peaks and troughs increases. You don’t yet have the calculus tools or experience to know how or whether this phenomenon can be modeled. For now, a hint: Earth has two large orbiting bodies, the Sun and the Moon. These have slightly different periods: 24 hours for the Sun and slightly longer for the Moon. Step 4 Our model omitted one of the parameters of the sinusoid basic modeling function: the time shift \\(t_0\\). A more complete model would be: \\[\\text{tide}_\\text{shifted}(t) \\equiv A \\sin(2\\pi (t - t_0)/P) + B\\] Whether including this parameter is important depends on our purpose for the model. If the goal is to find the period of the tides, the time shift hardly matters. But if the goal is to predict a future tide level, the time shift is critical. Estimating \\(t_0\\) can only be done once the period \\(P\\) is known precisely. In practice, as you’ll see in Chapter 14, we use a numerical method called polishing to estimate both \\(P\\) and \\(t_0\\) at the same time. 8.3 Curve fitting an exponential function The exponential function is particularly useful when the quantity we want to model shows constant proportional increase. Many quantities in everyday life are this way. For instance, an increase in salary is typically presented in a format like “a 3% increase.” The population growth of a country is often presented as “percent per year.” Inflation in the price of goods is similarly described in percent per year. Interest on money in a bank savings account is also described as percent per year. But if you have the bad fortune to owe money to a loan shark, the proportional increase might be described as “percent per month” or “percent per week.” 920 When you know the “percent increase per time” of a quantity whose initial value is \\(A\\), the exponential function is easy to write down: \\[f(t) = A (1+r)^t\\] The number \\(r\\) is often called the interest rate or discount rate and is given in percent. Regrettably, it’s extremely easy and common to forget the rules for addition with percent. If \\(r = 5\\%\\), then \\((1+r) = 1.05\\), not 6. Always keep in mind that \\(5\\%\\) means \\(\\frac{5}{100}\\). Another source of error stems from the tradition in mathematics of using the number \\(e=2.718282\\) as the “natural” base of the exponential function, whereas in \\(f(t) = A (1+r)^t\\) the base is \\(1+r\\). You can translate an exponential \\(b^t\\) in any base \\(b\\) to the “natural” base. This is just a matter of calculating the appropriate parameter \\(k\\) such that \\(e^k = b\\). Using logarithms, \\[e^k = b\\ \\ \\implies \\ \\ k=\\ln(b)\\] For instance, if \\(r=5\\%\\) per year, we’ll have \\(k = \\ln(1+r) = \\ln(1.05) = 0.488\\) per year. Almost everybody is happier doing arithmetic with numbers like 2 and 10 rather than \\(e=2.718282\\). For this reason, you may see formulations of the exponential function as \\(g(t) \\equiv 2^{a t}\\) or \\(h(t) \\equiv 10^{c t}\\). Remember that \\(2^{a t}\\) and \\(e^{at}\\), although both exponential functions, are quantitatively different. If you want to write \\(2^{at}\\) using the “natural” base, it will be \\(e^{\\ln(2) a\\, t }\\). Similarly, \\(10^{ct} = e^{\\ln(10) c\\, t}\\). Exponential functions also describe decrease or decay. Just replace \\(t\\) with \\(-t\\). That is, a movie of a decreasing quantity is just the movie of an increasing quantity played backwards in time! 930 Figure 8.5 shows some data collected by Prof. Stan Wagon to support his making a detailed mechanistic model of an everyday phenomenon: The cooling of a mug of hot beverage to room temperature. The mug started at room temperature, which was measured at 26 degrees C. At time 0 he poured in boiling water from a kettle and measured the temperature of the water over the next few hours. Figure 8.5: Stan’s data Our task is to translate this data into the form of a function that takes time as input and returns temperature as output. Such a model would be useful for, say, filling in the gaps of the data. For instance, we might want to find the temperature of the water immediately after being poured from the kettle into the mug. Looking at the data, one sees that the temperature decreases along a curve: cooling fast at first and then more slowly. This is the pattern of the flipped right-for-left exponential. (Figure 8.1(B)) We can imagine then that an exponential, \\(A e^{kt} + C\\) will be a suitable model form for the cooling water. What remains is to find the parameters \\(A\\), \\(k\\), and \\(C\\). Here is a general process for curve-fitting an exponential. Later, we’ll apply this process specifically to the water-cooling situation. General process for curve-fitting an exponential The goal is to find the parameters \\(A\\), \\(k\\), and \\(C\\) in the formula \\(A e^{kx} + C\\). Step 0: Check that the data show an exponential pattern in one of its varieties, namely a smooth increase or decrease and leveling out beyond some value of \\(x\\). If this isn’t true, reconsider whether you should be using an exponential function in the first place. Using your mind’s eye (or paper, if you like) sketch out an exponential-shaped curve that follows the overall trend of the data. We’ll call this imagined curve \\(f(x)\\). Step 1: Find the baseline. This is the output level at which the function has a horizontal asymptote, that is, at which the function levels off. \\(C\\) is this baseline level. Step 2: Find the numerical value of the imagined function \\(f()\\) at input \\(x = 0\\). We’ll call this value \\(f(0)\\). Then \\(A \\equiv f(0) - C\\). Step 3 Estimate parameter \\(k\\) using these steps: Pick any input value, which we’ll call \\(x_2\\), such that \\(f(x_2)\\) is far from the baseline. Find an input value, which we’ll call \\(x_1\\) such that \\(f(x_1)\\) is halfway14 between the baseline \\(C\\) and \\(f(x_2)\\), that is \\[f(x_1) = \\frac{f(x_2) + C}{2}\\] Once you have \\(x_1\\) and \\(x_2\\), you can immediately find \\(k\\): \\[k = \\frac{\\ln(2)}{x_2 - x_1} \\approx \\frac{0.693}{x_2 - x_1}\\] Using this simple test to double-check your work. If the horizontal asymptote of \\(f()\\) (that is, approach to the baseline) is for \\(x \\rightarrow \\infty\\), then \\(k\\) should be negative. If the horizontal asymptote is for \\(x \\rightarrow - \\infty\\), then \\(k\\) will be positive. Notice that the question of “growth or decay” depends only on the sign of the parameter \\(k\\). You can have an exponentially decaying process that’s increasing. Consider, for instance, the speed of a car as it merges onto a highway from a slow speed on the entrance ramp. The car’s velocity is increasing, but as you approach highway speed the rate of increase gets smaller. That’s exponential decay. The procedure in Step 3 for estimating \\(k\\) stems from a very important property of exponential functions: Exponential functions always double/half at a constant pace. By design, the parameter \\(k\\) directly determines that pace. Picking an \\(x_2\\) and finding the corresponding \\(x_1\\) gives the length of the input interval, \\(x_1 - x_2\\) over which the distance from the baseline doubles/halves. What’s remarkable about the doubling/halving time is that, for a genuinely exponential function, it doesn’t matter which point we choose for \\(x_1\\). In practice working with graphed data, it’s best to choose so that \\(f(x_1)\\) is discernibly far from the baseline. The \\(2\\) in \\(\\ln(2)\\) corresponds to idea of doubling/halving. The logarithm converts \\(2\\) to a scale that will generate 2 when exponentiated. Step 4 If you can plot the data, do so. Add to that a graphics layer showing the function \\(A e^{k x} + C\\) using the values for \\(A\\), \\(C\\), and \\(k\\) that you just found. If you are not satisfied with the way the plotted function approximates the data, tweak the parameters a bit until you are. Exponential curve fitting applied to the water-cooling data Let’s illustrate the general process on the water-cooling data, redrawn in Figure 8.6. 950 ## `geom_smooth()` using method = &#39;loess&#39; Figure 8.6: The cooling-water data, repeated here for convenience. We’ve sketched in an exponential-like curve that matches the data pretty well. Step 0: The data indicate a smooth curve. As \\(t\\) gets large, the curve approaches a constant. So an exponential model is reasonable. Step 1: The curve looks like it’s leveling out at a temperature of about 25 degrees C for large \\(t\\). So \\(C \\approx 25^{\\circ} \\text{C}\\). Step 2: Looking at our imagined curve (sketched in blue in Figure 8.6), it appears to intersect the \\(t=0\\) vertical axis at about \\(f(0) = 85^\\circ\\text{C}\\). Thus, \\[A = 85^\\circ\\text{C} - 25^\\circ\\text{C} = 60^\\circ\\text{C}\\] Step 3: Now choose a time \\(t_2\\) where \\(f(t_2)\\) is far from the baseline. … It looks like \\(t_2 = 25\\) will do the job, at which point we can read off the graph that the function value is \\(f(25) \\approx 65\\). Find an input value \\(t_1\\) such that \\(f(t_1) -C = (f(t_2)-C)/2.\\) This tells us that \\(f(t_1) = 25 + (65-25)/2 = (65+25)/2 = 45\\). Referring to the graph, the time at which the function is about 45 is \\(t_1 \\approx 65\\), that is, \\(f(t_1) \\approx 65\\). We have \\(t_1 \\approx 65\\) and \\(t_2 = 25\\). From this, we calculate \\(k\\): \\[ k = \\frac{\\ln(2)}{25 - 65} = 0.693/(-40) = -0.0173\\] The data show exponential decay, so we expect \\(k\\) to be negative. Happily, it is. If it hadn’t been, we would go back to look for a sign error someplace. Step 4. Graph the function on top of the data to confirm the fitted function is a good match to the data. Figure 8.7: An exponential function that roughly aligns with the data. Step 5: The flat zone of the data is to the right. So we’ve got exponential decay and \\(k &lt; 0\\). 8.4 Curve fitting a power-law function You have been using power-law functions from early in your math and science education. Some examples: 970 Setting Function formula exponent Circumference of a circle \\(C(r) = 2 \\pi r\\) 1 Area of a circle \\(A(r) = \\pi r^2\\) 2 Volume of a sphere \\(V(r) = \\frac{4}{3} \\pi r^3\\) 3 Distance traveled by a falling object \\(d(t) = \\frac{1}{2} g t^2\\) 2 Gas pressure versus volume \\(P(V) = \\frac{n R T}{V}\\) \\(-1\\) … perhaps less familiar … Distance traveled by a diffusing gas \\(X(t) = D \\sqrt{ \\strut t}\\) \\(1/2\\) Animal lifespan (in the wild) versus body mass \\(L(M) = a M^{0.25}\\) 0.25 Blood flow versus body mass \\(F(M) = b M^{0.75}\\) 0.75 One reason why power-law functions are so important in science has to do with the logic of physical quantities such as length, mass, time, area, volume, force, power, and so on. We’ll discuss this at length later in the course and the principles will appear throughout calculus. As for finding the power law \\(f(x) \\equiv A x^p\\) that provides a good match to data, we’ll need some additional tools to be introduced in Chapter 15. 8.5 Gaussian and sigmoid functions Our last two basic modeling functions express an important idea in modeling: localness. To put this in concrete terms, imagine creating a function to depict the elevation above sea level of a long road as a function of distance in miles, \\(x\\), from the start of the road. If the road were level at 1200 feet elevation, a sensible model would be \\(\\text{elevation}(x) = 1200 \\text{ft}\\). If the road were gently sloping, a better model would be \\(\\text{elevation}(x) = 1200 + 0.01 x\\). 980 Now let’s add a bump to the road. A bump is a local feature, often only a few feet wide. Or, perhaps the road is crossing a mountain range. That’s also a local feature, but unlike a bump in the road a mountain range extends for many miles. The basic modeling function suited to represent bumps in the road, or potholes, or mountain ranges is generically called a “hump function.” In this book, we use a specific hump function called the gaussian function (dnorm()). A gaussian function has two parameters: the location15 of the peak, which we’ll call the center parameter, and the sideways extent of the gaussian, which is called the standard deviation. Figure 8.8 shows a few gaussian functions with different parameters. Figure 8.8: Gaussians with various centers and standard deviations (sd). It’s easy to read off the center parameter from a graph of a gaussian. It’s the location of the top of the function graph. (We mentioned before that a mathematical word for “the location of the top” is argmax; the value for the input of the function that produces the maximum output.) The spread parameter is also pretty straightforward, but you first have to become familiar with an unusual feature of the gaussian function. The output of the gaussian far from the center is practically zero. But it is not exactly zero. You can see from the graphs that the gaussian function has long flanks which approach zero output more or less in the manner of an exponential function. This means that we can’t measure the spread of the gaussian function by the distance between the zeros on either side of the peak. Instead, we need a convention that will allow us to be precise in quantifying what is admittedly a vague concept of width. Technically, the convention is that the spread is the length of the interval from the argmax to the inflection point. This can be hard to judge from a graph, but a reasonable approximation is that the spread is the “half-width at half-height.” Come down half-way from the peak value of the output. Panel (c) of Figure 8.8 marks that elevation with a thin, tan, horizontal line. Along that line, measure the width of the gaussian, as marked by the thick tan line in Panel (c). The spread parameter is half the width of the gaussian measured in this way. 990 If you have a keen eye, you’ll notice that the tan line in Figure 8.8 is not exactly half-way down from the peak. It’s down 39.35% from the peak. This corresponds exactly to the technical convention. Another seeming oddity about the gaussian function is the value of the maximum. It would have seemed natural to define this as 1, so-called “unit height.” The way it actually works is different: the maximum height is set so that the area under the gaussian function is 1. This business with the area will make more sense when you’ve learned some calculus tools, specifically “differentation” and “integration.” For now though … Consider another road feature, a local change from one elevation to another as you might accomplish with a ramp. The basic modeling function corresponding to a local change from one level to another is the sigmoid function. Figure 8.9 shows three sigmoid functions. Figure 8.9: Sigmoids with various centers and standard deviations The name “sigmoid” comes from vague resemblance of the graph to the letter S (which is “sigma” in Greek: ). The parameters of the sigmoid function are the same as for the gaussian function: center and width. The center is easy to estimate from a graph. It’s the value of the input that produces an output of 0.5, half-way between the max and min of the sigmoid. As with the gaussian function, the width is measured according to a convention. The width is the change in input needed to go from an output of 0.5 to an output of 0.8413. This use of 0.8413 must seem loony at first exposure, but there is a reason. We’ll need more calculus tools before it can make sense. Gaussian functions and sigmoid functions with the same center and width parameters have a very close relationship. The instantaneous rate of change of the sigmoid function is the corresponding gaussian function. Figures 8.8 and 8.9 show corresponding gaussian and sigmoid functions. To the very far left, the sigmoid function is effectively flat: a slope near zero. Moving toward the center the sigmoid has a gentle slope: a low number. In the center, the sigmoid is steepest: a higher number. Then the slope of the sigmoid becomes gentle again before gradually falling off to zero. Near zero, then low, then higher, then low again, then falling off to zero: that’s also the description of a gaussian function! In R, the name of the sigmoid function is pnorm(). The gaussian is dnorm(). The parameters that specify center and spread are named mean and sd. The word “mean” accurately conveys the idea of “center.” It would be nice to be able to say that sd comes from spread, but in fact sd is short for standard deviation, a term familiar to students of statistics. 1000 Figure 8.10 shows the cumulative number of Ebola cases during an outbreak in Sierra Leone from May 1, 2014 to December 16, 2015. Figure 8.10: Cumulative Ebola cases in Sierra Leone Although the cumulative case data are roughly sigmoidal in shape, there are systematic differences in shape from a true sigmoid. For comparison, Figure 8.11 is a graph of genuinely sigmoidal data. Figure 8.11: A simulated sigmoidal growth process. The Ebola data have only a rough similarity to the sigmoid shape. Still, fitting a model and then examining closely the deviations of the model from the data can prompt questions that can lead to a better understanding of the data and what’s needed in an appropriate model. Here’s a methodology for estimating the parameters mean and sd of a sigmoid graphically. Sketch in a S-shaped curve that smoothly follows the data. In Figure 8.11 this has already been done for you. For the Ebola data, you will have to use your judgment. Find the top plateau of the S-curve. This is indicated by the tan line in Figure 8.11. The parameter A is simply the height of the plateau, in this case \\(y \\approx 15\\). Come down half way from the plateau. Here, that’s 15/2 or 7.5, indicated by the horizontal blue line segment. Find the inverse of the S-curve from that half-way point onto the horizontal-axis. Here, that gives \\(t \\approx 5\\). The parameter center is that value. From the center of the S-shaped curve, follow the curve upward about 2/3 of the way to the plateau. In the diagram, that point is marked with a green line at \\(t \\approx 7\\). The width is the distance along the horizontal axis from the blue centerline to the green line. Here, that’s \\(7 - 5\\) giving 2 as the width. You might also want to trace the S-curve downward from the centerline about 2/3 of the way to zero. That’s indicated by the left green line. In the standard sigmoid, the two green lines will be equally spaced around the centerline. Of course the data may not be in the shape of the standard sigmoid, so you might find the two green lines are not equally spaced from the center. 8.6 Exercises Exercise 8.1: 0rvpbu These three expressions \\[e^{kt}\\ \\ \\ \\ \\ 10^{t/d} \\ \\ \\ \\ \\ 2^{t/h}\\] produce the same value if \\(k\\), \\(d\\) and \\(h\\) have corresponding numerical values. The scaffolding has an expression for plotting out \\(2^{t/h}\\) for \\(-4 \\leq t \\leq 12\\) where \\(h = 4\\). It also plots out \\(e^{kt}\\) and \\(10^{t/d}\\) fa &lt;- makeFun(exp(k*t) ~ t, k = 4) fc &lt;- makeFun(2^(t/h) ~ t, h = 4) fb &lt;- makeFun(10^(t/d) ~ t, d = 4) slice_plot(fa(t) ~ t, domain(t = c(-4, 12))) %&gt;% slice_plot(fb(t) ~ t, color=&quot;blue&quot;) %&gt;% slice_plot(fc(t) ~ t, color = &quot;red&quot;) %&gt;% gf_lims(y = c(0, 8)) Your task is to modify the values of d and k such that all three curves lie on top of one another. (Leave h at the value 4.) You can find the appropriate values of d and k to accomplish this by any means you like, say, by using the algebra of exponents or by using trial and error. (Trial and error is a perfectly valid strategy regardless of what your high-school math teachers might have said about “guess and check.” The trick is to make each new guess systematically based on your previous ones and observation of how those previous ones performed.) After you have found values of k and d that are suited to the task … Question A What is the numerical value of your best estimate of k?     0.143︎✘        0.173\\(\\heartsuit\\ \\)       0.283︎✘        0.320︎✘ Question B What is the numerical value of your best estimate of d?     11.2︎✘        11.9︎✘        13.3\\(\\heartsuit\\ \\)       15.8︎✘ Exercise 8.3: YLWP1 Question A One of the curves in plot (A) is a pattern-book function. Which one?     black\\(\\heartsuit\\ \\)It’s the exponential function.       blue︎✘        green︎✘        tan︎✘        none of them︎✘ Question B Taking \\(f()\\) to be the pattern-book function in plot (A), which one of the curves is \\(f(-x)\\)?     black︎✘        blue︎✘        green︎✘        tan\\(\\heartsuit\\ \\)       none of them︎✘ Question C One of the curves in plot (B) is a pattern-book function. Which one?     black︎✘        blue︎✘        green︎✘        tan\\(\\heartsuit\\ \\)       none of them︎✘ Question D Taking \\(f()\\) to be the pattern-book function in plot (B), which one of the curves is \\(-f(x)\\)?     black︎✘        blue\\(\\heartsuit\\ \\)       green︎✘        tan︎✘        none of them︎✘ The blue curve in plot (C), as you know, is the sinusoid pattern-book function. Question E Which of these functions is the green curve? \\(\\sin(-x)\\)︎✘ \\(-\\sin(x)\\)︎✘ \\(-\\sin(-x)\\)︎✘ Both \\(\\sin(-x)\\) and \\(-\\sin(-x)\\)︎✘ Both \\(\\sin(-x)\\) and \\(-\\sin(x)\\)Excellent! The sine function has so-called “odd” symmetry around \\(x=0\\). Question F One of the curves in plot (D) is a pattern-book function. Which one?     black︎✘        dodgerblue︎✘        green\\(\\heartsuit\\ \\)       tan︎✘        none of them︎✘ Question G Taking \\(f()\\) to be the pattern-book function in plot (D), which one of the curves is \\(-f(-x)\\)?     black\\(\\heartsuit\\ \\)       dodgerblue︎✘        green︎✘        tan︎✘        none of them︎✘ Exercise 8.5: YELXG A person breathes in and out roughly every three seconds. The volume \\(V\\) of air in the person’s lungs varies between a minimum of \\(2\\) liters and a maximum of \\(4\\) liters. Assume time \\(t\\) is measured in seconds. Remember that a full cycle of the sine wave \\(\\sin(x)\\) involves \\(x\\) going from its starting value to that value plus \\(2 \\pi\\). Question A Which of the following is the most appropriate of these models for \\(V(t)\\)? \\(V(t) \\equiv 2 \\sin \\left( \\frac{\\pi}{3} t \\right) + 2\\)︎✘ This varies between a minimum of 0 and a maximum of 2. \\(V(t) \\equiv \\sin \\left( \\frac{2\\pi}{3} t \\right) + 3\\)Right! Good. In this class, we generally write the sine function like \\(\\sin(2 \\pi t/P)\\) which means that the overall argument to the sine function will go from 0 to \\(2 \\pi\\) when \\(t\\) goes from 0 to \\(P\\). \\(V(t) \\equiv 2 \\sin \\left( \\frac{2\\pi}{3} t \\right)+ 2\\)︎✘ This varies between a minimum of 0 and a maximum of 2. \\(V(t) \\equiv \\sin \\left( \\frac{\\pi}{3} t \\right) + 3\\)︎✘ Right amplitude and baseline: the minimum will be 2 liters and the maximum 4 liters. But the period is wrong. Going from \\(t=0\\) to \\(t=3\\) should produce a full cycle of the sine function. But here the argument would go only from 0 to $ 3 = \\(\\pi\\). After 3 seconds, only half a cycle has been completed. A respiratory cycle can be divided into two parts: inspiration and expiration. Please do an experiment. Using a clock or watch, breath with a total period of 3 seconds/breath, that is, complete one breath every three seconds. Once you have practiced this and can do it without forcing either phase of breathing, make a rough estimate of what fraction of the cycle is inspiration and what fraction is expiration. (The “correct/incorrect” answers here are right for most people. Your natural respiration might be different.) Question B Which is true? Inspiration lasts longer than expirationRight!  Expiration lasts longer than inspiration︎✘ Maybe it is for you, but not for most people. Try breathing in while counting 1-2-3 then exhaling while counting 1-2-3-4-5-6. Likely, that’s not a very natural pattern for you. Inspiration and expiration each consume about the same fraction of the complete cycle.︎✘ People can do this consciously by counting 1-2-3 for inspiration and another 1-2-3 for expiration. This usually feels forced and unnatural. Exercise 8.7: VBWD The graph below shows a recording from a “spirometer,” an instrument for recording respiration. Like many old instruments, the trace from this spirometer is made by a pen at the end of a swinging arm with paper moving steadily beneath it. The arm is not exactly aligned with the horizontal axis. Nonetheless, you should be able to estimate an appropriate amplitude and period for the trace. (dm\\(^3\\) is cubic-decimeters: a tenth of a meter cubed. This is the same as a liter.) Question A What are appropriate estimates for the period and amplitude of the respiration trace? About \\(\\pm 1\\) liter and 3 seconds.︎✘ If this were true, over the 120 seconds of the recording you would expect to see 40 cycles of respiration. About \\(\\pm 1\\) liter and 5 seconds.Right!  About \\(\\pm 1\\) liter and 7.5 seconds.︎✘ If this were true, you would expect to see about 16 cycles of respiration over 120 seconds of recording. Exercise 8.9: vkwl4 The Bargain Basement store wants to sell its goods quickly. Consequently, they reduce each product’s price \\(P\\) by 5% per day. Question A If a jacket costs $80 today, how much will it cost in \\(t\\) days? \\(P = 80 - 5t\\)︎✘ Remember, 5 percent is exactly the same as 0.05 \\(P = 80 - 4t\\)︎✘ Remember, 4 percent is exactly the same as 0.04 \\(P = 80 - 0.05t\\)︎✘ This would be a decrease in price by 5 cents every day. \\(P = 80 (0.05)^t\\)︎✘ Each day’s price would be only 5% that of the previous day’s price. \\(P = 80 (0.95)^t\\)Correct.  You’ll need to open a sandbox for the next question. You’re on your own here! Remember, to raise a number to a power, you can use an expression like 0.95^7. Question B You decided that you like the $80 jacket, but you have a budget of only $60. How long should you wait before coming back to the Bargain Basement store.? 3 days︎✘ On day 3 the price will be \\(0.95\\times 0.95 \\times 0.95 \\times 80\\). That’s above your budget. 4 days︎✘ On day 4 the price will be \\(80 \\times 0.95^4\\)= $65.16. Too much! 5 days︎✘ On day 5 the price will be \\(80 \\times 0.95^5\\)= $61.90. Close, but still higher than your budget. 6 daysNice!  Exercise 8.11: asevss The Wikipedia entry on “Common Misconceptions” used to contain this item: Some cooks believe that food items cooked with wine or liquor will be non-alcoholic, because alcohol’s low boiling point causes it to evaporate quickly when heated. However, a study found that some of the alcohol remains: 25% after 1 hour of baking or simmering, and 10% after 2 hours. The modeler’s go-to function type for events like the evaporation of alcohol is exponential: The amount of alcohol that evaporates would, under constant conditions (e.g. an oven’s heat), be proportional to the amount of alcohol that hasn’t yet evaporated. Question A A) Assume that 25% of the alcohol remains after 1 hour? If the process were exponential, how much would remain after 2 hours? 10%︎✘ That’s what the study is reported to have found, but that’s not consistent with an exponential process that decays to 25% after one hour 25%︎✘ Exponentials decay to zero eventually, so don’t expect things to stay still after one hour. 25% of 25%Nice! We know that 75% is eliminated over 1 hour, leaving 25%. The continuing exponential process will, over the next hour eliminate 75% of the amount at the start of that hour. So after hour 2 we’ll have 25% of the amount we had at hour 1, which was 25% of the original amount. 75%︎✘ That’s how much was eliminated in the first hour, not how much remains after 2 hours. 75% of 75%︎✘ In an exponential process, at any moment the rate of decay (e.g. 75% per hour) is a constant proportion of the amount that is still there. After one hour, there is 25% of the alcohol remaining. That will decay at a rate of 75% per hour. Over the next hour, we’ll lose 75% of the original 25%, giving us 25% of the original amount. Question B B) What is the half-life of an exponential process that decays to 25% after one hour? 15 minutes︎✘ This provides time for four halvings in one hour, which would leave \\(\\frac{1}{2} \\times \\frac{1}{2} \\times \\frac{1}{2} \\times \\frac{1}{2} = 1/16\\) of the original not 1/4. 30 minutesExcellent! This gives time for two halvings in one hour, bringing us to 25% as observed. 45 minutes︎✘ Two halvings bring us down to 25%. At this rate, it would take 90 minutes to get down to 25%, not 60 minutes as observed. none of the above︎✘ Let’s change pace and think about the “10% after 2 hours” observation. First, recall that the amount left after \\(n\\) halvings is \\(\\text{amount.left}(n) \\equiv \\frac{1}{2}^n\\) This is an exponential function with base 1/2. You’re going to carry out a guess-and-check procedure to find \\(n\\) that gives \\(\\text{amount.left}(n) = 0.10\\). Open a sandbox and copy over the scaffolding, which includes the definition of the amount.left() function. We started with a guess of \\(n=0\\), which is wrong. Change the guess until you get the output 10%. amount.left &lt;- makeFun((1/2)^n ~ n) amount.left(0) Question C C) Use amount.left() as defined in the scaffolding to guess-and-check how many halvings it takes to bring something down to 10% of the original amount.     2.58︎✘        3.32\\(\\heartsuit\\ \\)       3.62︎✘        3.94︎✘        4.12︎✘ Another way to find the input \\(n\\) that generates an output of 10% is to construct the inverse function to \\(\\text{amount.left}()\\). The computer already provides you with inverse functions for \\(2^n\\) and \\(e^n\\) and \\(10^n\\). Their names are log2(), log(), and log10() repectively. Using log2(), write a function named log_half() that gives the inverse function to \\((1/2)^n\\). Remember, the input to the inverse function corresponds to 10%; the output to the \\(n\\). log_half &lt;- makeFun( - log2(...your stuff here ...) ~ x) Question D D) The answer you got in part C) is the number of halvings needed to reach 10%. If this number occurs in 2 hours (that is, 120 minutes), what is the half life stated in minutes.     30︎✘        35︎✘        36\\(\\heartsuit\\ \\)       38︎✘        42︎✘        47︎✘ Suppose you compromise between the half-life needed to reach 25% after one hour and the half-life needed to reach 10% after two hours. Use, say, 33 minutes as the compromise half life. Using the sandbox, calculate how much would be left after 1 hour for this compromise half life, and how much left after 2 hours. Question E E) How much is left after 1 hour and after 2 hours when the half life is 33 minutes?     28% and 8%\\(\\heartsuit\\ \\)       31% and 4%︎✘        30% and 9%︎✘        27% and 9%︎✘ Exercise 8.13: IELWV The gaussian function is implemented in R with dnorm(x, mean, sd). The input called mean corresponds to the center of the hump. The input called sd gives the width of the hump. In a sandbox, make a slice plot of dnorm(x, mean=0, sd=1). By varying the value of width, figure out how you could read that value directly from the graph. slice_plot(dnorm(x, mean=0, sd=1) ~ x, domain(x = c(-4, 4))) In the plot below, one of the double-headed arrows represents the width parameter. The others are misleading. Question A Which arrow shows correctly the width parameter of the gaussian function in the graph with arrows?     top\\(\\heartsuit\\ \\)       middle︎✘        bottom︎✘        none of them︎✘ Question B What is the value of center in the graph with arrows? -2︎✘ The center parameter is the argmax of the function. -1︎✘ The center parameter is the argmax of the function. -0.5︎✘ The center parameter is the argmax of the function. 0︎✘ The center parameter is the argmax of the function. 0.5Right!  1︎✘ The center parameter is the argmax of the function. 2︎✘ The center parameter is the argmax of the function. Exercise 8.15: CKSLE Gaussian functions and sigmoidal functions come in pairs. For every possible sigmoid, there is a corresponding gaussian that gives, for each value of the input, the slope of the sigmoid. Each of the following graphs shows a sigmoid and a gaussian function. The two might or might not correspond to one another. That is, the output of the gaussian might be the slope of the sigmoid, or the gaussian might correspond to some other sigmoid. Remember, you’re comparing the output of the gaussian to the slope of the sigmoid. For each graph, say whether the gaussian and the sigmoid correspond to one another. If not, choose one of the reasons why not. Question A Graph (A) The gaussian and sigmoid correspond.Excellent!  The peak of the gaussian does not occur at the same value of \\(x\\) at which the sigmoid is steepest.︎✘ For what \\(x\\) is the sigmoid the steepest? For what \\(x\\) is the gaussian the highest? The numerical value of the output of the gaussian function is, for all \\(x\\), much larger than the numerical value of the slope of the sigmoid.︎✘ Did you calculate the numerical value of the slope of the sigmoid? Question B Graph (B) The gaussian and sigmoid correspond.︎✘ The peak of the gaussian does not occur at the same value of \\(x\\) at which the sigmoid is steepest.Nice! The gaussian peaks at about \\(x=2\\) while the steepest part of the sigmoid is at about \\(x=4\\) The numerical value of the output of the gaussian function is much larger than the numerical value of the slope of the sigmoid.︎✘ Did you calculate the numerical value of the slope of the sigmoid? Question C Graph (C) The gaussian and sigmoid correspond.Nice!  The peak of the gaussian does not occur at the same value of \\(x\\) at which the sigmoid is steepest.︎✘ For what \\(x\\) is the sigmoid the steepest? For what \\(x\\) is the gaussian the highest? The numerical value of the output of the gaussian function is, for all \\(x\\), much larger than the numerical value of the slope of the sigmoid.︎✘ Did you calculate the numerical value of the slope of the sigmoid? In the graph D, there are several gaussian functions shown, only one of which corresponds to the sigmoid. Question D Which gaussian corresponds to the sigmoid? A︎✘ The value of the gaussian output is much larger than the slope of the sigmoid. BRight! Right! The gaussian is centered on the steepest part of the sigmoid and falls to zero where the sigmoid levels out. C︎✘ The gaussian is too narrow. D︎✘ The gaussian is too broad and shifted to the left. Exercise 8.17: bllKR Have in mind a gaussian function and a sigmoid function that form a corresponding pair. Question A Which of these stories is consistent with the relationship between a gaussian and its corresponding sigmoid? The gaussian is the amount of water in a bathtub while the sigmoid is the time you spend in the bath.︎✘ The gaussian is the amount of water in the bathtub while the sigmoid is the rate at which water flows from the tap.︎✘ You turn the tap on and off after a while. That’s not what the sigmoid looks like. The gaussian is the rate at which water flows from the tap and the sigmoid is the amount of water in the bathtub.Right!  The gaussian indicates the amount the drain is open and the sigmoid is the amount of water in the bathtub.︎✘ Shouldn’t the amount of water go down when the drain is open? Exercise 8.19: YLWP2 Each of the curves in the graph is an exponential function \\(e^{kt}\\), for various values of \\(k\\). Question A What is the order from \\(k\\) smallest (most negative) to k largest? black, orange, red, green, blueGood. Exponential functions that grow slowly have \\(k\\) with a small absolute value black, orange, blue, green, red︎✘ Sorry. Notice the red curve grows the most slowly. This means it has the smallest \\(|k|\\). red, green, blue, orange, black︎✘ The orange and black curves have negative \\(k\\), so they will be smaller than the other curves with positive sign. Exercise 8.21: EKCIE Put aside for the moment that the Ebola data plotted in Figure 8.10 doesn’t look exactly like the standard sigmoid function. Follow the fitting procedure as best you can. Question A Where is the top plateau? About Day 600.︎✘ Measure the height of the plateau, not where it starts horizontally. About 14,000 casesExcellent!  About 20,000 cases︎✘ Read the vertical axis markings more carefully. None of the above︎✘ One of the above answers is pretty good. Question B Where is the centerline? Near Day 200Good.  Near Day 300︎✘ That’s the center of the vertical scale, not the day at which the curve reaches half-way to the eventual plateau. At about 7000 cases︎✘ That’s half-way up to the plateau, but the answer you want is the day at which the curve reaches that point. Question C Now to find the width parameter. The curve looks more classically sigmoidal to the left of the centerline than to the right, so follow the curve downward as in Step 4 of the algorithm to find the parameters. What’s a good estimate for width? About 50 daysCorrect.  About 100 days︎✘ Too wide! About 10 days︎✘ Too small About 2500 cases︎✘ The width is measured along the horizontal axis, not the vertical The motivation for the equation is that the distance between \\(f(x_1)\\) and \\(C\\) should be half that of the distance between \\(f(x_2)\\) and \\(C\\). In other words, \\[f(x_1) - C = \\frac{f(x_2) - C}{2}\\] Simplifying the algebra a little tells you to look for \\(x_1\\) such that \\[f(x_1) = \\frac{f(x_2) + C}{2}\\]↩︎ That is, the input value at which the function value is largest.↩︎ "],["fun-slopes.html", "Chapter 9 Slope function 9.1 Change and slope 9.2 Continuous change 9.3 Slope 9.4 The fitted line 9.5 Average rate of change 9.6 Instantaneous rate of change 9.7 Exercises", " Chapter 9 Slope function For our purposes, the definition of calculus is 1100 The use of functions to model and explore continuous change The agenda of this chapter is to give specific mathematical meaning to the word “change.” 9.1 Change and slope You have an solid, intuitive sense of what “change” means. In mathematics, and especially the mathematics of functions, change has a very simple meaning that you have already touched on in your previous math education. The word that encapsulates “change” in high-school math is slope. For instance, you’ve undoubtedly had to calculate the slope of a straight line in a graph. You learned about “rise” and “run” and how to read them from a graph or from a formula. The slope is the ratio: rise over run. Everyone has a intuitive sense of the slope of a road or of a hillside. You learned to apply this intuition to reading graphs and the slope of a line. We’ll exploit the intuitive ability to read a landscape in order to introduce abstract mathematical ideas in a down-to-earth setting. But you should learn to think of “slope” abstractly, not just as referring to the incline of a road. For instance, the population of a country can change, as can the number of new cases of an epidemic disease, the temperature of a cup of coffee, or the distance from Earth of a spacecraft. A major part of learning calculus is generalizing and abstracting the mathematical concept of which “slope” is an example and becoming proficient with mathematical procedures for working with change. 9.2 Continuous change Most people are comfortable with the ideas of daily changes in temperature or monthly changes in credit-card debt or quarterly changes in the unemployment rate or annual changes in the height of a child. Such things are easy to record in, say, a spreadsheet. For example, as this paragraph is being written, the weather forecast for the next several days (in southeastern Colorado in mid-May) is 1110 Day High Low Description Thursday 73 43 sunny Friday 72 48 windy Saturday 66 48 thunderstorms Sunday 68 43 windy Monday 70 39 sunny Tuesday 70 43 sunny Wednesday 66 45 partly cloudy Such data is said to be discrete. The day is listed, but not the time of day. The high temperature is forecast, but not the time of that high. The “description” is also discrete, one of the several words that are used to summarize the quality of the weather, as opposed to the quantity of rain. Calculus is about continuous change. For instance, if the weather bureau provide a web interface that let me enter the date and time to the nearest fraction of a second, they would be giving a way to track the change continuously. Many physical processes are intrinsically continuous, for instance the motion (change in position) of a spacecraft or the height of the tide or the stress on a tree as a function of wind velocity. Finding a language to describe continuous change—famously, the position of the moon or planets in their orbit, or the speed of a ball rolling down a ramp—was central to the emergence of what historians call the “Age of Enlightenment” or “modern scientific method.” The first complete presentation of that language was published by Isaac Newton based on his work in the 1660s. As you might guess, the name of the language is “calculus.” 9.3 Slope You already know pretty much everything there is to know about the straight-line function, Formula: \\(f(x) \\equiv a x + b\\). The parameters \\(a\\) and \\(b\\) are the “slope” and “intercept” respectively. (More precisely, \\(b\\) is the “y-intercept.” But in statistics and modeling, it’s just the “intercept.”) Reading parameters from a graph: You learned several ways to do this which are all equivalent. Maybe the easiest is to read the y-intercept off the graph. That’s \\(b\\). Then choose some non-zero \\(x_0\\) and read off from the graph the value of \\(f(x_1)\\). The slope is simply \\[\\frac{f(x_0) - b}{x_0}\\] The y-intercept method is a special case of a more general method, the two-point method, that you can use even if the y-intercept isn’t shown on the graph. Pick two specific values of \\(x\\), which we’ll call \\(x_0\\) and \\(x_1\\). Evalate the function at these input values and compute the rise over run: \\[\\text{rise over run} \\equiv \\frac{f(x_1) - f(x_0)}{x_1 - x_0}\\] The rise over run is the slope of the straight line. The y-intercept method is exactly the same as the two-point method with \\(x_1 = 0\\). Matching a straight-line function to data: You might not have been taught this formally, but the basic process is easy to imitate. The process is called line fitting or, in statistics and other fields, linear regression. 1120 9.4 The fitted line To illustrate line fitting, let’s return to the cooling mug of water. Figure 9.1 shows the data along with a dozen candidate straight line functions, each one drawn in its own color. Figure 9.1: Some candidate straight-line function models plotted on top of the cooling water data. Which one(s) would you pick as good matches to the data? Some of the straight-line models are a much better match to the data than others. The blue-shaded functions are pretty good fits, at least when you consider the limitations of matching data with a curved pattern by a straight line. The green-colored functions are maybe OK but not as good as the blue, and the purple-shaded functions are just horrible. Now that you know what a reasonable straight-line model looks like, you will find it pretty easy to draw one on data graphics that even remotely show a straight-line pattern. Step 1: Draw a reasonable straight-line through the data points. Step 2: Find the parameters that correspond to the line you drew. 9.5 Average rate of change Since the slope is our standard way of representing a relationship of change, we will often use it as a way of summarizing a function. To illustrate, consider the exponential model we constructed to match the cooling-water data in Section 8.3: 1130 water &lt;- makeFun(60*exp(-0.0173*t) + 25 ~ t) Figure 9.2: The exponential function that was previously matched to the cooling-water data. The slope of the straight line connecting two points on the function graph is the average rate of change during the interval. During the interval \\([t_0, t_1]\\) the rate at which the water cools is higher at first and lower at the end. The average rate of change is a single number that summarizes the whole interval. For all except straight-line models, the average rate of change depends on the interval chosen. “Slope” is a natural metaphor when thinking of a function as a graph. But a more general way to describe the concept is the rate of change of the output with respect to the input. The change in the output from one end of the interval is \\(f(x_1) - f(x_0)\\), the change in the input is \\(x_1 - x_0\\). If the input is time (in hours), and the output is the position of a car (in miles), then the rate of change is miles-per-hour: the car’s velocity. For a straight-line function—think of a car driving at constant speed on a highway—it doesn’t matter what you choose for \\(x_1\\) and \\(x_0\\) (so long as they are not identical). But for other functions, the choice does matter. Imagine a graph of the position of a car along a road as in Figure 9.3. Over the course of an hour, the car travelled about 25 miles. In other words, the average speed is 25 miles/hour: the slope of the tan line segment. Given the traffic, sometimes the car was stopped (time C), sometimes crawling (time D) and sometimes much faster than average (time B). Figure 9.3: The position of an imaginary car over time (black curve). The average rate of change over various intervals is the slope of the straight-line segment connecting the start and end of the black curve in that interval. During the interval from B to C, the car was travelling relatively fast. The slope of the \\(\\color{magenta}{\\text{magenta}}\\) segment connecting the position at times B and C is the average rate of change between times B and C. It’s easy to see that the average rate of change from B to C is larger than the overall average from \\(t=0\\) to \\(t=1\\). Calculating that slope is a matter of evaluating the position at the endpoints and dividing by the length of the interval. 1140 What is the average rate of change in the car’s position during the interval \\(t_B = 0.40\\) to \\(t_C=0.54\\)? The length of the interval is \\(t_C - t_B = 0.54-0.40=0.14\\). Evaluating the function gives \\(x(t_C) = 18\\) and \\(x(t_B) = 12.6\\). Rise is \\(x(t_C) - x(t_B) = 18 - 12.6 = 5.4\\). Run is \\(t_C - t_B = 0.54-0.40=0.14\\). The average rate of change during the interval is \\(5.4/0.14 = 38.6\\) miles/hour. Figure 9.4 shows a simplified model of the amount of usable wood that can be harvested from a typical tree in a managed forest of Ponderosa Pine. (You can see some actual forestry research models here.) 1145 Figure 9.4: A model, somewhat realistic, of the amount of wood that can be harvested from a Ponderosa Pine as a function of years since planting to harvest. You are writing a business plan for a proposed pine forest. Among other things, you have to forecast the revenue that will be generated and when you will have saleable product. They say that “time is money.” Every year you wait before harvest is another year that you don’t have the money. On the other hand, every year that you wait means more wood at the end. How to decide when to harvest? The tree continues to grow until year 50, when it seems to have reached an equilibrium: perhaps growth goes to zero, or rot balances what growth there is. There’s no point waiting until after year 50. At year 25, the tree is growing as fast as it ever will. You’ll get about 600 board-feet of lumber. Should you harvest at year 25? No! That the tree is growing so fast means that you will have a lot more wood at year 26, 27, and so on. The time to harvest is when the growth is getting smaller, so that it’s not worth waiting an extra year. The quantity of interest is the average rate of growth from seedling to harvest. Harvesting at year 25 will give a total change of 600 board feet over 25 years, giving an average rate of change of \\(600 \\div 25 = 24\\ \\text{board-feet-per-year}\\). But if you wait until year 35, you’ll have about 900 board feet, giving an average rate of change of \\(900 \\div 35 = 25.7\\ \\text{board-feet-per-year}\\). It’s easy to construct a diagram that shows whether year 35 is best for the harvest. Recall that our fundamental model of change is the straight-line function. So we’re going to model the model of tree growth as a straight line function. Like the more realistic model, our straight-line model will start out with zero wood at the time of planting. And to be faithful to the realistic model, we’ll insist that the straight-line intersect or touch the realistic model at some point in the future. Figure 9.5 reiterates the realistic model of the tree but adds on to it several straight-line models that all give zero harvest-able wood at planting time. Each of the green lines captures a scenario where the tree is harvested at the indicated time: \\(t_1\\), \\(t_2\\), and so on. For the perspective of representing the rate of growth per year from planting to harvest, the straight-line green models do not need to replicate the actual growth curve. The complexities of the curve are not relevant to the growth rate, which can be simplified down to a straight-line model connecting the output at planting time to the output at harvest time. In contrast, the \\(\\color{magenta}{\\text{magenta}}\\) curve is not a suitable model because it doesn’t match the situation at any harvest time; it doesn’t touch the curve anywhere after planting! Figure 9.5: Modeling the tree-growth model with straight lines connecting planting time to various harvest times. The slope of each line is the average rate of growth for that planting time. To maximize average lumber volume per year, choose a harvest time that produces the steepest possible green segment. From Figure 9.5 this is the model that glances the growth curve near year 31 (shown as \\(t_3\\) in the diagram). It’s best to find the argmax by creating a function that shows explicitly what one is trying to optimize. (In Chapter 23 we’ll use the name objective function to identify such function.) Here, the objective function is \\(\\text{ave.growth(year)} \\equiv \\text{volume(year)} / \\text{year}\\). See Figure 9.6. Figure 9.6: Graph of the average-growth function ave_growth(year), constructed by dividing volume(year) by year. The graph of ave_growth(year) makes it clear that the maximum average growth from planting to harvest will occur at about year 32. 9.6 Instantaneous rate of change The average rate of change is the slope of a line segment connecting two points on the graph of a function, the points \\(\\left(\\strut t_0, f(t_0)\\right)\\) and \\(\\left(\\strut t_1, f(t_1)\\right)\\). It reflects all the point-to-point changes in the value of the function over the interval \\(t_0\\) to \\(t_1\\) in the function’s domain. It turns out to be helpful to consider the rate of change of a function at an individual point \\(t_0\\) in the domain, rather than the interval between two points. This rate of change at a point is called the instantaneous rate of change. In Block 2, we’ll see that a good way to define an instantaneous rate of change at \\(t_0\\) is as the average rate of change over the interval \\(t_0 \\leq t \\leq t_0 + h\\) with the proviso that the interval length \\(h\\) goes as closely as it can to zero. Visually, this is the line that’s tangent to the function’s graph at the input value \\(t_0\\) as in Figure 9.7. 1150 Figure 9.7: A line tangent to a the curve at a single point. The slope of this line is the instantaneous rate of change. It’s convenient to be able to find the slope of such a tangent line using just the definition \\(f(t)\\), rather than having to draw a graph and eyeball the tangent. For now, let’s approximate the slope of tangent line by the average rate of change over a small run from \\(t_0\\) to \\(t_0 + 0.1\\): \\[\\text{slope of}\\ f(t) \\ \\text{at}\\ t_0 \\approx\\frac{f(t_0 + 0.1) - f(t_0)}{0.1} = \\frac{\\text{amount of rise}}{\\text{length of run}}\\] The \\(\\approx\\) symbol means “is approximately.” For now, I want to put off the question of what “approximately” means. In modeling, whether the 0.1 gives a good enough approximation will depend on the function \\(f()\\) and the context in which the slope is needed. For instance, in drawing Figure 9.7 I needed to find the tangent line. Using 0.1 is entirely satisfactory in this setting but it might not be in other settings. The notation “slope of \\(f(t)\\) at \\(t=t_0\\)” is long-winded and awkward. If we were looking at the “value of \\(f(t)\\) at \\(t_0\\) we have at hand a much more concise notation: \\(f(t_0)\\). But it doesn’t work to write”slope of \\(f(t_0)\\)\" because \\(f(t_0)\\) is a quantity and not a function. Instead, let’s make a concise notation for “slope of \\(f(t)\\).” Following tradition, we’ll write \\({\\cal D}f(t)\\). The name of this “slope of \\(f(t)\\)” function is \\({\\cal D}f()\\): a two-letter name. When we want to say, “the (approximate) slope of the tangent line to \\(f(t)\\) at \\(t_0\\), we can write simply: \\[{\\cal D}f(t_0)\\] meaning, evaluate the”slope function of f()\" at \\(t_0\\). To formalize this, we’ll define the slope function of f() as \\[{\\cal D}f(t) \\equiv \\frac{f(t + 0.1) - f(t)}{0.1}\\] Let’s look at the slope functions that correspond to some of pattern-book functions: \\(e^x\\), \\(\\sin(x)\\), \\(x^{-1}\\) and \\(\\ln(x)\\). We can define them easily enough in R: Dexp &lt;- makeFun((exp(t+0.1) - exp(t))/0.1 ~ t) Dsin &lt;- makeFun((sin(t+0.1) - sin(t))/0.1 ~ t) Dxm1 &lt;- makeFun(((1/(t+0.1)) - (1/t))/0.1 ~ t) Dlog &lt;- makeFun((log(t+0.1) - log(t))/0.1 ~ t) Figure 9.8: Comparing the pattern-book function (blue) to its slope function (tan) Why did you plot both the function and the slope function in the same graphics frame? 1160 Excellent question! In general, it is illegitimate to plot a function and it’s slope function on the same vertical axis. The reason is the units of the two functions will be different. For instance, the output of a function position(t) might have units of “miles,” while the output of the slope function of position (that is, \\({\\cal D}\\)position(t) would have units such as miles-per-hour.) So, as a general rule, never plot a function and its corresponding slope function on the same scale. An exception is for the pattern-book functions. These always take a number as input and produce a number as output. The slope function of a pattern-book function also produces a number as output. This exception is not a good excuse for indulging a bad practice. Perhaps you’ll forgive the authors if they claim they wanted to emphasize the point by demonstrating it. Here, we write the slope function of \\(f(t)\\) as \\({\\cal D}f(t)\\). That works for this chapter, which deals with functions of only one variable. But in general modeling functions have more than one variable, for instance \\(g(x, t)\\). To work with slope functions with more than one variable, we need to extend the notation a little. We will place a small subscript after \\({\\cal D}\\) to indicate which variable we are changing. Thus, there will be two slope functions for \\(g(x,t)\\): \\[{\\cal D}_{\\color{blue}x} g(x, t) \\equiv \\frac{g({\\color{blue}x + 0.1}, t) - g(x, t)}{0.1}\\] and \\[{\\cal D}_{\\color{magenta}t} g(x, t) \\equiv \\frac{g(x, {\\color{magenta}t + 0.1}) - g(x, t)}{0.1}\\] The input referred to in the subscript following \\({\\cal D}\\) is called the with-respect-to input. The idealization of the slope function involves replacing \\(h=0.1\\) with something much smaller. What “much smaller” means has been a complicated issue in the history of calculus. Today, we write \\(h \\rightarrow 0\\) to signify the process of making \\(h\\) smaller and smaller, but never zero. When \\(h\\) has this “much smaller” value, the rate of change over the interval \\(x\\) to \\(x+h\\) becomes a rate of change “at \\(x\\),” also called the instantaneous rate of change at \\(x\\). For the pattern-book functions, \\(h=0.1\\) or smaller gives a pretty good approximation to the instantaneous rate of change. Later, in Block 2, we’ll see how to arrange \\(h\\) so that it’s “much smaller” for functions in general. In the previous section we looked at the optimal time to harvest a tree so that the average rate of growth in usable lumber over the tree’s life is maximized. Using a model of tree growth of a ponderosa pine we found the best harvest time to be 32 years. Let’s return to the modeling phase of the wood-harvest problem with a new perspective. The real objective of tree farming is to maximize the economic value of the wood. This depends on the market price of the wood which itself may be changing in time. A market-savvy modeler will want to exploit any information about the possibility of rising or falling prices in selecting the best harvest time. Companies often hire economists to forecast market trends, but this requires a deep knowledge of trends in supply and demand which is out of the scope of what we can cover in this book. However, there is one economic principle that we can incorporate into the model without such detailed, industry specific expertise. This is the economic principle of opportunity cost. Opportunity cost takes into account when valuing an asset the other possible uses of that asset. For example, lumber companies constantly invest in planting new trees for future harvest. In order to do this, they borrow money and they pay interest on the borrowed money. They need to borrow because their existing assets are tied up in the form of wood. The opportunity cost of not harvesting a tree is the interest on the loan the company needs to take out in order to invest for the future. Between year 30 and 32, there is hardly any change in the value of the average-rate-of-change function. It’s increasing a little, but is it really worthwhile to wait? One argument is that at year 30 you already have a valuable resource: wood that could be money in the bank. If the money were in the bank, you could invest it and earn more money and at the same time get a new seedling in the ground to start its growth. You’re doing two things at once. Efficient! To know what is the best year for harvest from this point of view, you want to calculate the effective “interest rate” on the present amount of wood that you earn in the form of new wood. That interest rate is the ratio of the instantaneous rate of growth of new wood divided by the amount of existing wood. Figure 9.9 shows this function. Figure 9.9: The instantaneous investment return from the tree is the instantaneous rate of change in wood volume divided by the wood volume itself. This falls over the age of the tree as the harvestable wood volume increases. Early in the tree’s life, the growth is high compared to the volume of the tree. That’s because the tree is small. As the years pass, the tree gets bigger. Even though the rate of growth increases through year 23, the accumulated volume increases even faster, so there is a fall in the rate of return. The best time to harvest is when the annual “interest rate” paid by the growing tree falls to the level of the next best available investment. Suppose that investment would pay 10% per year. Then harvest the tree when the function values falls below 10%. That happens at year 24. If the next best investment paid only 5% (blue horizontal line), the harvest should be made at about year 29. If money could be borrowed at 2%, it would be worthwhile to harvest the tree still later. 9.7 Exercises Exercise 9.4: WRWIX From the graph in Figure 9.2, compute the average rate of change over the interval \\(10 \\leq t \\leq 200\\). How does it compare to the average rate of change over the interval \\(10 \\leq t \\leq 125\\)? Exercise 9.5: KEWIX We will be working extensively with the change in output value of a function when the input value changes. The change in the output value of a function \\(f()\\) when the input changes from \\(x = a\\) to \\(x = b\\) is \\[f(x=b) - f(x=a)\\] Notice that when we talk about the change from \\(x=a\\) to \\(x=b\\) we subtract \\(f(a)\\) from \\(f(b)\\). That change is sometimes called the rise in the value of the function. Rise always compares (by subtraction) the two output values corresponding to two specific input values. Remember that \\(a\\) and \\(b\\) stand for specific numbers. Corresponding with the idea of the change in output being \\(f(b) - f(a)\\) the change in the input value to a function is \\(b - a\\). This is often called the run in the value of the input. Question A True or false: In Graph I, the rise from a to b is positive.     TRUE︎✘ \\(f(x=a) &gt; f(x=b)\\), so the rise \\(f(x=b) - f(x=a)\\) is negative.       FALSE\\(\\heartsuit\\ \\) Question B True or false: In Graph I, the run from \\(x=a\\) to \\(x=b\\) is positive. TRUENice!  FALSE︎✘ The run is about the relative positions of \\(x=a\\) and \\(x=b\\) on the x-axis. Since \\(a &lt; b\\), the run from \\(x=a\\) to \\(x=b\\) is positive. Question C True or false: In Graph II, the run from a to b is positive. TRUERight!                                     FALSE︎✘ The run is about the relative positions of a and b on the x-axis. Since a is to the left of b, the run from a to b is positive. Question D True or false: In Graph II, the rise from a to b is positive. TRUE︎✘ Remember, the rise from \\(x=a\\) to \\(x=b\\) is \\(f(x=b) - f(x=a)\\) FALSECorrect.                                     Question E True or false: In Graph II, the run from b to c is positive. TRUE︎✘ The run from \\(x=b\\) to \\(x=c\\) is \\(c - b\\). Since \\(b&gt;c\\) b to c is negative. FALSEGood.  Question F True or false: In Graph II, the rise from b to c is positive. TRUENice!  FALSE︎✘ The rise from \\(x=b\\) to \\(x=c\\) is \\(f(x = c) - f(x = b)\\). Since \\(f(x=c) &gt; f(x=b)\\), the rise is positive. Question G For an interval [2, 6] what is the value of the run? (The answer is independent of any particular graph/function.) 4Right! The run is always the second number in the interval minus the first number. That’s \\(6 - 2\\) here. -4︎✘ You got it backwards! The second number in the interval, 6, is numerically to the right of 2, so the run is positive. Question H Which is the run of the interval [6, 2]? (Again, the answer is independent of any particular graph/function.) 4︎✘ Sorry. The run from \\(x=6\\) to \\(x=2\\) is \\(2 - 6\\) which is \\(-4\\). -4Excellent! The run is \\(2 - 6\\), the second number in the interval minus the first number. Exercise 9.6: YQCLE Open an R sandbox. You can use these function definitions to help you in your calculations. f &lt;- makeFun(2*exp(x+1) ~ x) g &lt;- makeFun(3*exp(-x) ~ x) h &lt;- makeFun(x*exp(x) ~ x) Using R, compute the average rate of change of the function over the given interval. Choose the closest answer for each problem. Question A \\(f(x) \\equiv 2 e^{x+1}\\) over [-2, 2]     -2.99︎✘        1.54︎✘        2.72︎✘        4.68︎✘        9.85\\(\\heartsuit\\ \\)       11.32︎✘ Question B \\(g(x) \\equiv 3 e^{-x}\\) over [-1, 1.5]     -2.99\\(\\heartsuit\\ \\)       1.54︎✘        2.72︎✘        4.68︎✘        9.85︎✘        11.32︎✘ Question C \\(h(x) \\equiv x e^x\\) over [0, 1]     -3︎✘        1.54︎✘        2.72\\(\\heartsuit\\ \\)       4.68︎✘        9.85︎✘        11.32︎✘ It’s much less work if we use the R function c() to define the interval, and the R function diff() to calculate differences. The next sandbox contains an example asking you to compute the average rate of change of \\(f(x) \\equiv e^x\\) over the interval [0, 4]. You only need lines 1, 3, and 5. The other lines show intermediate results to help you understand what diff() is doing. interval &lt;- c(0, 4) # creates the interval diff(interval) # calculate the run f &lt;- makeFun(exp(x) ~ x) # create the function f(interval) # evaluate function at the endpoints of the interval diff(f(interval)) / diff(interval) # complete answer Question D True or false: The average rate of change of \\(f(x) \\equiv e^{x^2}\\) over [0.0, 0.1] is 0.1005017     TRUE\\(\\heartsuit\\ \\)       FALSE︎✘ Question E True or false: The average rate of change of \\(f(x) \\equiv \\log(x)\\) over [2, 3] is 0.5062353. (Hint: Change the code above so the interval variable goes from 2 to 3 and f becomes the function \\(f(x) \\equiv \\log(x)\\))     TRUE︎✘        FALSE\\(\\heartsuit\\ \\) Question F True or false: The average rate of change of \\(f(x) \\equiv \\sin(x)\\) over [0.0, 0.5] is 0.9588511     TRUE\\(\\heartsuit\\ \\)       FALSE︎✘ Exercise 9.7: rTSX3 Consider the sinusoid function, graphed below. Question A What is the average rate of change over the interval \\(0 &lt; x &lt; \\frac{1}{2}\\)? (Choose the closest value.) 0︎✘ For this to be true, the function output would need to be the same at the two endpoints of the interval. 0.5︎✘ Did you forget to divide the rise by the run? 1Nice! Right. From the interval you have that the run is 1/2. The rise over that interval is from 0 to 1/2, so a rise of 1/2. Question B What is the average rate of change over the interval \\(0 &lt; x &lt; 6.25\\)? (Choose the closest value.) -0.5︎✘ 0Good. Right. The function output is zero at both endpoints of the interval, so the rise is zero. Hence, the run is zero. 0.5︎✘ Question C What is the average rate of change over the interval \\(0 &lt; x &lt; 10\\)? (Choose the closest value.) -0.05Excellent! Right. The rise is -0.5 and the run is 10. -0.5︎✘ This is the “rise” over the interval, but it’s not the average rate of change. You’ll need to divide the rise by another quantity to get the average rate of change. 0︎✘ 0.5︎✘ The rise will be \\(f(10) - f(0) pprox -0.5 - 0 = -0.5\\). You’ve got the sign wrong. Exercise 9.8: URIMX For each of the following, compute the average rate of change of the function over the given interval. Question A The average rate of change of \\(f(x) \\equiv x + 5\\) over [3, 5] is -2︎✘ Remember, the difference from \\(x=3\\) to 5 is \\(f(5) - f(3)\\), not the other way around. And the average rate of change is the difference divided by the length of the interval. -1︎✘ Remember, the difference from \\(x=3\\) to 5 is \\(f(5) - f(3)\\), not the other way around. Similarly, the length of the interval from \\(x=3\\) to 5 is \\(5-3\\), not \\(3-5\\). 1Right! \\(f(x=5) = 10\\) and \\(f(x=3) = 8\\), so the difference in values is 2. Since this difference occurs over an interval of length 2 (that is, from #x=3$ to 5), the average rate of change is 2/2. 2︎✘ Are you sure you took the rate of change rather than simply the change? Question B The average rate of change of \\(f(x) \\equiv 3 - 2 x\\) over [-4, -2] is -4︎✘ This is the total difference over the interval, not the rate of change. -2Excellent! The difference from \\(x=-4\\) to \\(-2\\) is \\(f(-2) - f(-4) = (7) - (11) = -4\\). The length of the interval is \\((-2) - (-4) = 2\\). So the rate is -4/2, just as you got. 0︎✘ 1︎✘ When \\(x\\) changes by two units, \\(f(x)\\) changes by 4. The rate of change is 4/2 = -2. 2︎✘ Check your +/- signs. 4︎✘ This is the negative total difference over the interval, not the rate of change. Also check your +/- signs. Question C The average rate of change of \\(f(x) \\equiv -3 x^2\\) over [0, 4] is -24︎✘ Perhaps you are looking at the derivative at \\(x=4\\) and not the average rate of change from \\(x=0\\) to 4. -12Good. The difference in \\(f()\\) over the interval is \\(f(4) - f(2) = (-48) - 0 = -48\\). The length of the interval is \\(4-0\\), so the average rate of change over the interval is \\((-48)/4 = -12\\). 0︎✘ Perhaps you are looking at the derivative at \\(x=0\\) and not the average rate of change from \\(x=0\\) to 4. 1︎✘ 2︎✘ 12︎✘ Check the signs in your arithmetic. 24︎✘ Question D The average rate of change of \\(f(x) \\equiv x^3 - 2 x + 1\\) over [0, 2] is -2︎✘ Either check your +/- signs or perhaps you are looking at the derivative at \\(x=0\\) and not the average rate of change from \\(x=0\\) to 2. 1.5︎✘ 2Nice! The difference in \\(f()\\) over the interval is \\(f(2) - f(0) = 5 - 1 = 4\\). The length of the interval is \\(2 - 0\\) so the average rate of change is \\(4/2 = 2\\). 7︎✘ 10︎✘ I think you are looking at the derivative at \\(x=2\\) rather than the average rate of change from 0 to 2. Exercise 9.9: RDWKW In this question, we ask you to estimate the slope from a graph of the function. But the function is exponential, so not a straight line. A fundamental idea in calculus is that even a function with a curved graph, if you zoom in closely around a given point, will look like a straight line. And you know how to calculate the slope of a straight line. When the graph is curved, the slope will be different at different points along the graph. So there’s not a single slope for the function. Still, we can talk about the “slope at a point.” One way to specify a point on a function’s graph is to give the horizontal coordinate: the input to the function. But here we’re going to give you the output of the function. So long as the function passes the horizontal-line test, as the exponential does, specifying any particular output in the function’s range uniquely identifies a corresponding input. Estimate the slope of the exponential function \\(g(x) \\equiv e^x\\) at several inputs, which we’ll call \\(x_1\\), \\(x_2\\), \\(x_3\\) and \\(x_4\\). We won’t give you numerical values for the \\(x_i\\) points, but we will tell you the output of the function at each of those inputs. the values of \\(x\\) where: \\(g(x_1) = 1\\) \\(g(x_2) = 5\\) \\(g(x_3) = 10\\) \\(g(x_4) = 0.1\\) For each of (a)-(d), use a sandbox to plot the exponential function \\(e^x\\) on a domain zoomed in around around the appropriate value of \\(x_i\\). Then calculate the slope of the curve at that \\(x_i\\). Question A Using your answers for the slope at the points given in (a)-(d), choose the best answer to this question: What is the pattern in the slope as \\(x\\) varies? The slope at each value \\(x_i\\) is the same as \\(e^{x_i}\\).Nice! This property of the exponential function becomes important when describing a wide range of phenomena, from nuclear isotope decay to population growth. The slope at each value \\(x_i\\) is the same as \\(x_i\\).︎✘ That would being saying the slope at \\(x_3\\) is \\(\\approx 2.30\\). Is that what you got? The slope at each value of \\(x_i\\) is the same as \\(x_i^2\\).︎✘ That would being saying the slope at the \\(x_3\\) is \\(\\approx 5.30\\). Is that what you got? The slope at each value of \\(x\\) is the same as \\(\\sqrt{x}.\\)︎✘ That would being saying the slope at the \\(x_i\\) is \\(\\approx 1.52\\). Is that what you got? Exercise 9.10: HRTIX For each exercise, you are given a series of intervals that get smaller and smaller. Your job is to calculate the average rate of change of the function \\(f(x) \\equiv x^2\\) for each of the intervals. As the width of the intervals approach zero, our average rates of change become better approximations of the instantaneous rate of change. You should use the results you calculate to make an informed estimate of the instantaneous rate of change. interval &lt;- c(__start__ , __end__ ) f &lt;- makeFun(x^2 ~ x) diff(f(interval)) / diff(interval) A. Use these three intervals to estimate the instantaneous rate of change \\(\\partial_x f(x=3)\\) - [3, 3.1] - [3, 3.01] - [3, 3.001] B. Use these three intervals to estimate the instantaneous rate of change \\(\\partial_x f(x=5)\\) - [4.9, 5] - [4.99, 5] - [4.999, 5] C. Use these three intervals to estimate the instantaneous rate of change \\(\\partial_x f(x=-2)\\) - [-2, -1.9] - [-2, -1.99] - [-2, -1.999] Exercise 9.12: CUXLR There is a web of connections between the pattern-book functions and their slopes. Question A 1. Which pattern-book function has a slope function that is simply a input-shifted version of itself? (For small enough \\(h\\).)     exponential︎✘        sinusoid\\(\\heartsuit\\ \\)       logarithm︎✘        power-law \\(x^{-1}\\)︎✘ Question B 2. Which pattern-book function has a slope function that is identical to itself? (For small enough \\(h\\).)     exponential\\(\\heartsuit\\ \\)       sinusoid︎✘        logarithm︎✘        power-law \\(x^{-1}\\)︎✘ Question C 3. Which pattern-book function has a slope function that is another pattern-book function? (Hint: The other function is also listed among the choices.)     exponential︎✘        sinusoid︎✘        logarithm\\(\\heartsuit\\ \\)       power-law \\(x^{-1}\\)︎✘ Exercise 9.13: MW03ay Sometimes a bit of algebra can help us see what’s going on with the instantaneous rate of change. Consider the exponential function \\(e^x\\). Rather than writing the slope function definition with a 0.1, let’s substitute in the symbol \\(h\\). This gives \\[{\\cal D}\\exp(x) = \\frac{e^{x+h} - e^x}{h}\\] Extracting out the common term \\(e^x\\) in the numerator, we arrive at \\[{\\cal D}\\exp(x) = e^x \\left[\\frac{e^h - 1}{h}\\right]\\] Since \\(h\\) is a number, \\([e^h - 1]/h\\) is a number, not a function of \\(x\\). So, for any given value of \\(h\\), the slope function of the exponential is proportional to the exponential itself. Question A Using a sandbox, find the value of \\([e^h - 1]/h\\) when \\(h=0.1\\). Which of these is it?     1.271828︎✘        1.694343︎✘        1.718282\\(\\heartsuit\\ \\)       e = 2.718282︎✘ The instantaneous rate of change involves making \\(h\\) very small, but not quite zero. If you make \\(h\\) exactly zero, the result will be ambiguous. Question B Using a sandbox, compute \\([e^0 - 1]/0\\). What’s the result? Inf︎✘ This would be the result if the numerator were positive, however small. But both the numerator and the denominator are zero. NaNNice! Meaning, ‘not a number.’ Bogus︎✘ This is not a value and can’t be used in arithmetic. But Inf and NaN each can be legitimately used in arithmetic. An error message result.︎✘ The point of Inf and NaN is to avoid creating error conditions while still signalling that the result is ambiguous. Question C Using a sandbox, compute \\([e^h - 1]/h\\). Make \\(h\\) as small as you can, for instance \\(0.00001\\) or \\(0.00000001\\). What’s the result? 1Right! Amazingly, the instantaneous rate of change of \\(e^x\\) is exactly \\(e^x\\). It varies with \\(h\\), but is always around 1.5 for \\(h\\) small enough︎✘ There’s no particular result.︎✘ "],["function-inverses-and-solving.html", "Chapter 10 Function inverses and “solving” 10.1 Function inverses 10.2 Solving graphically 10.3 Zero-finding 10.4 Exercises", " Chapter 10 Function inverses and “solving” Very much in the spirit of naming common tasks, the process of turning an output from a function into the corresponding input is called solving. In high-school mathematics, you may have heard the phrases “solve for \\(x\\)” or “find \\(x\\).” Generally what was mean can be expressed using functions this way: Given an output \\(g(x_0)\\) find the input \\(x_0\\) that would produce that output. In computer programming, “solving” is sometimes called zero finding. As is often the case, computer programming often involves re-arranging things to fit in a standard format. Here, the standard format is to find the input that corresponds to an output of zero. In other words, given only the output \\(A = g(x_0)\\) and not \\(x_0\\) itself, find a value for \\(x_0\\) that satisfies look for the input \\(x_0\\) at which \\(g(x_0) - A = 0\\). 10.1 Function inverses This may sound like a familiar word problem from your high-school algebra course: You are a facilities manager for a small town. The town contains approximately 400 miles of road that must be plowed following a significant snowfall. How many plows must be used in order to complete the job in one day if the plows can travel at approximately 7 miles per hour when engaged? — Source The task of answering such a question is often called solving a word problem. You don’t need calculus to solve this problem, but insofar as the format is familiar to you, it might help to depict how it would be addressed as a modeling task and how to use the model created to guide the mathematical work of getting a numerical answer to the problem. Modeling Phase: The objective is to create a function that represents snow plowing and that will let us answer the question about how much plowing activity is needed. Here’s a function that takes as input \\(x\\) a number of plows and provides as output the number of miles that can be serviced in a day. \\[\\text{miles.plowed}(x) \\equiv 7 \\ \\text{mph} \\times 24 \\ \\text{hours-per-day}\\times x\\ \\text{plows}\\] In reality, “miles plowed” depends on the amount of snow, the safe speed limit of the plows, the number of rest breaks needed by the drivers, how far the snowplow terminus is from the road system, how many cars are parked on the road and the available number of tow trucks, and the day of the week and the time of day. (Remember, there might be other traffic on the road. Plowing at rush hour is bound to be slow! And the reduced visibility at night calls for extra care!) It seems that textbook “word problems” never mention such issues, having been written in a world where plowing snow is exactly the same as doing simple arithmetic. Likely, we’re going to have to use the modeling cycle to end up with a genuinely useful model. Still, we have to start somewhere, so let’s start with \\(7 \\times 24 \\times x\\). We can use this function to solve the problem: How many plows are needed to get the 400-miles of road serviced in 1 day? It’s a matter of choosing a suitable method for applying the function to guide us to the answer. 1210 One simple method, which sometimes is called guess and check is to propose some answers and see what happens. Being experts in snow plowing, we know that you can’t have negative or fractional plows, so our guesses for \\(x\\) will be integers. Let’s do this systematically: Number of plows \\(x\\) Miles plowed in a day 1 \\(7 \\times 24 \\times 1 = 168\\) 2 \\(7 \\times 24 \\times 2 = 336\\) 3 \\(7 \\times 24 \\times 3 = 504\\) 4 \\(7 \\times 24 \\times 4 = 672\\) \\(\\vdots\\) … and so on. We really don’t need all the scratch work crowding up the table, so let’s streamline it, keeping the essentials: input \\(x\\) output \\(\\text{miles.plowed}(x)\\) 1 168 2 336 3 504 4 672 The domain of the miles_plowed() function is \\(x = 0, 1, 2, 3, \\ldots\\), so our table covers only a bit of the domain. Our purpose in constructing miles_plowed() is not to figure out the output given the input, but to do the opposite: given the output, find the input. The information we have is in the form of the output: 400 miles. The mathematical operation of solving consists of looking up what we do know in the output column of the table, then reading off the corresponding input as our answer. Since 400 doesn’t appear in the output column, we’ll look for an interval that includes 400. Of course, that’s the interval from 336 to 504. So the answer will be something bigger than \\(x=2\\) but doesn’t need to be any larger than \\(x=3\\). You’ve been in the facilities management business for many years, so you know to choose the answer \\(x=3\\). If you have a graph of a function, it can be easy to calculate what the input should be for a given output. Just reverse the finger action, looking up the output on the vertical axis, tracing horizontally to the function graph, then reading off the result from the input axis. Now let’s write the problem using math notation rather than a table. We’re looking for a value of \\(x\\) such that \\[\\text{miles.plowed}(x) = 400\\] This is an equation as opposed to a function definition. We write equations with \\(=\\) and definitions with \\(\\equiv\\). The point of writing equations is often to signal to us that the task is to “solve for \\(x\\).” An algebraic solution relies on replacing miles_plowed(\\(x\\)) with the function’s formula and then re-arranging numbers and possibly other symbols until we have an equation of the form \\(x = \\ldots\\). Here, that’s easy: \\[7 \\times 24 \\times x = 400\\ \\ \\implies\\ \\ x = 400/(7\\times 24)\\] Apply some arithmetic and we find \\(x = 2.381\\). Apply some common sense and we translate this into “three plows.” An industrious facilities manager might go further. “Today there is 400 miles of road. But next year there will be more, although I don’t yet know the exact number. While I’m doing all this math work, I’ll write up a memo with a formula so that next year, when I know how much road there will be, my assistant can find the answer with simple arithmetic.” 1220 You likely learned how to set up and solve the manager wants to put in her memo. The key is to replace 400 with a symbol standing for the number of miles of road. We’ll use \\(M\\). Then you do the re-arrangement with \\(M\\) in place of 400. \\[7 \\times 24\\, x = M\\ \\ \\implies\\ \\ x = M/168\\] All that remains is to give a more informative name in place of \\(x\\) and to write it as a proper function: \\(n_{plows}(M) \\equiv M/168\\). This process of starting with a function like \\(\\text{miles.plowed(x)}\\) and transforming it into a function in a more convenient format for the task at hand \\(n_{plows}(M)\\) is called inverting the function. High-school algebra emphasizes techniques for inverting functions by moving symbols around. This is great when it can be done, but it’s often impossible in real science and engineering problems. The guess and check method that was used in the snowplow mileage table is very simple. particularly when it’s paired with a process for refining the guess after every check. Newton’s method is one such method, it makes use of the idea of slope functions, particularly those introduced in Block 2. Another common strategy for inverting functions that are beyond our own reach algebraically is to rely on a specialist to develop the inverse function, give it a name, write down a formula in mathematical notation or, sometimes more usefully, write a computer program that implements the inverse function’s algorithm. With this strategy, all that’s needed to invert a function is to know the name or formula of the function’s inverse. Here’s a table of such names and formulas, most of which is likely familiar to you. function inverse function Exponential: \\(e^x\\) Logarithm (“natural”): \\(\\ln(x)\\) Exponential: \\(2^x\\) Log base 2: \\(\\log_2(x)\\) Exponential: \\(10^x\\) Log base 10: \\(\\log_{10}(x)\\). Power law: \\(x^2\\) Square root/power-law: \\(\\sqrt{x} = x^{1/2}\\) Power law: \\(x^{-1}\\) Power law: \\(x^{-1}\\) Trig: \\(\\sin(x)\\) Trig: \\(\\arcsin(x)\\) Trig: \\(\\tan(x)\\) Trig: \\(\\arctan(x)\\) You can of course read this table either from left to right or from right to left. For instance, the inverse of \\(\\ln(x)\\) is \\(e^x\\). As you know, for a function \\(g(x)\\), the set of valid values of \\(x\\) is called the domain of the function. The set of possible outputs from the function is called the range of the function. The inverse function to \\(g()\\) has a domain which is the range of \\(g()\\) and a range which is the domain of \\(g()\\). Sometimes the notation \\(g^{-1}(x)\\) is used for \"the inverse function of \\(g()\\). This is potentially confusing, since \\(g^{-1}(x)\\) might reasonable be interpretted as \\(1/g(x)\\) and, in general, those two things are not equal. Straight-line (with non-zero slope), exponential (\\(e^{kt}\\) where \\(k\\neq 0\\)), and logarithm functions aways have inverse functions. For power-law and sinusoid functions, there can be several (or many) different inverse functions. We’ll get to this when we need to. 1230 There’s an easy graphical test for whether there is a unique inverse function or not. Draw the graph, then see if any horizontal line touches the graph of the function in more than one place. If so, there is no unique inverse function. 10.2 Solving graphically Most readers are familiar with the sort of high-school math problem where you are presented with an equation written in terms of \\(x\\) and asked to “find \\(x\\)” or “find the solution.” For instance, the problem might be \\[\\text{Let}\\ \\ 3x - 2 = 7 x^2 .\\ \\ \\ \\text{Find} \\ x .\\] The above problem falls into one class of such tasks, the class of “finding roots of polynomials.” Here’s another problem in that same class: An investment club decided to buy $9000 worth of stock with each member paying an equal share. But two members left the club, and the remaining members had to pay $50 more apiece. How many members are in the club?16 Let’s pose the problem in terms of a function, money_raised\\((x)\\) where \\(x\\) is the original number of members in the investment club. Originally, the members were each going to pay \\(9000/x\\). But after the two people drop out, each of the remaining members has to pay \\(9000/x + 50\\). Since there are \\(x-2\\) remaining members, the total amount raised is \\[\\text{money.raised}(x) \\equiv (x-2) \\left(\\frac{9000}{x} + 50\\right)\\] Figure ?? graphs \\(\\text{money.raised}(x)\\) money_raised &lt;- makeFun((x-2)*(9000/x + 50) ~ x) slice_plot(money_raised(x) ~ x, domain(x=c(10,25))) The function tells us, for any number of members \\(x\\), how much money will be raised. So what’s \\(x\\) for the club? The function doesn’t tell us … until we add in a new fact. The club raised $9000. So look up $9000 on the vertical axis, trace horizontally over to the graph, and read off the resulting input that generates an output of $9000. This inverse way of using functions—we know the output and we need to calculate the input—is very common. One reason is that sometimes it’s relatively easy to construct a model that takes input \\(x\\) to an output, but the problem at hand is to figure out from a value of the output what is the corresponding value of the input. Seismograms and electrocardiograms Suppose that you have a function \\(f(x)\\) and you also know the inverse of that function. We’ll call the inverse \\(g(x)\\) for this example, but a more typical notation is \\(f^{-1}(x)\\) where the function name is \\(f^{-1}\\). Composing a function and its inverse gives back the input: \\(f(g(x)) = x\\) and \\(g(f(x)) = x\\). As part of your high-school mathematics education, you learned the inverses to several functions. For instance, \\(e^x\\) and \\(\\ln(x)\\) are inverses, meaning that \\(\\ln(e^x) = x\\) and \\(e^{\\ln(x)} = x\\). The identity function is its own inverse. The inverse of the square function is the square root: \\(\\sqrt{x^2} = x\\) and \\((\\sqrt{x})^2 = x\\). It’s helpful to keep in mind that if you have a function \\(f(x)\\) there is some other function—although you may not know its form yet—that is the inverse to \\(f()\\). There are two caveats: Mathematicians will say that for functions like \\(\\sin(x)\\) or \\(\\dnorm(x)\\) which fail the horizontal line test the inverse does not exist. That’s because mathematicians want the inverse to have a single, unique value, while functions like \\(\\dnorm()\\) have two inputs that generate any output in the function’s range. \\(\\sin()\\) has an infinite number of inputs that generate any output in the function’s range. But in practice, the problem is to find some input that will generate the known output. If there is more than one such input, we just have to choose one. We can even satisfy the mathematician’s insistence that there be a unique inverse if we restrict the domain of the forward function to a region where it is monotonically increasing or monotonically decreasing. There is always an algorithm to that can be applied to find a solution to any inverse problem. But this algorithm is rarely a simple formula. Not having a formula, we play a name game. For instance, the inverse of the square function is called the “square root,” but there is no simple formula for finding the square root of a number. Similarly, the inverse to \\(\\sin(x)\\) is called \\(\\arcsin(x)\\), but there is no simple formula for \\(\\arcsin()\\). Almost invariably we use such inverse functions not by doing arithmetic to calculate their output, but by using a calculator button or a software function that carries out the algorithm. For now, it suffices that you can compute the inverse to any function (over some sub-domain where the function is monotonically increasing or decreasing) by graphing the function and then reading from the vertical axis to the horizontal. As we encounter more concepts from calculus and computing, we’ll develop additional methods for evaluating an inverse function without first having to construct that function. 10.3 Zero-finding Zero-finding is the name of a process for finding a function input that produces a function output of zero. Usually, zero isn’t a an output value of interest. (If the snow-plow manager asked her assistant to figure out how many plows are needed to cover 0 miles in one day, the assistant would wonder if someone has lost their mind.) However, any solving problem can be translated into a zero-finding problem. For example, if the problem is to solve \\(g(x) = M\\), we can equally well state the problem as finding a zero of \\(h(x) \\equiv g(x) - M\\). Why would anyone want to do this? Often, mathematical algorithms in computer languages are written to accept a function as an input rather than an equation. For instance the R/mosaic operator findZeros() takes as it’s primary argument a tilde expression describing a function. For example, the investment-club problem given earlier in this chapter can be re-stated as a zero-finding problem. money_raised &lt;- makeFun((x-2)*(9000/x + 50) ~ x) findZeros(money_raised(x) - 9000 ~ x) ## x ## 1 -18.0000 ## 2 -0.0001 ## 3 20.0000 It turns out that there are three zeros for `money_raised(x) - 9000$. Only one of them has any sensible interpretation as the number of investors in the club. 10.4 Exercises Exercise 10.1: IWLDN1 The graphs of functions and their inverses are related by a flip around the line of identity, shown in green in the following graph. The black curve is the graph of \\(e^x\\). Question A Is the magenta curve the graph of a function? (Hint: Does it pass the vertical line test?) YesExcellent!  No︎✘ The magenta curve has a vertical asymptote at \\(x=0\\), but since it never reaches that asymptote, it passes the vertical line test. Question B Which of these functions is graphed in magenta? \\(1/x\\)︎✘ \\(\\ln(x)\\)Good.  \\(\\sqrt{x}\\)︎✘ \\(e^{-x}\\)︎✘ Sorry, but this would be the reflection of the black curve around the vertical line at \\(x=0\\) \\(-e^{x}\\)︎✘ No. This would be the reflection of the black curve around the horizontal line at output \\(f(x)=0\\) Exercise 10.3: 1kZXxT Consider the problem of finding a value of \\(x\\) such that \\(cos(x) = x^2\\). This is easy to do graphically: find the input where the graphs of \\(cos(x)\\) and \\(x^2\\) cross. In a sandbox, create a function \\(h(x)\\) that is zero when the equation is satisfied. Pass the tilde expression h(x) ~ x to the R/mosaic findZeros() operator to find a precise numerical answer to the problem: h &lt;- makeFun( __define_your_h_function__ ) findZeros(h(x) ~ x) This translates to an equation, where \\(x\\) is the number of members: \\[(x-2)(9000/x + 50) = 9000\\] Source↩︎ "],["fun-assembling.html", "Chapter 11 Assembling functions 11.1 Linear combination 11.2 Function composition 11.3 The modeling polynomial 11.4 Function multiplication 11.5 All together now! 11.6 Exercises", " Chapter 11 Assembling functions When we need a new function for some purpose, we practically always build it out of existing functions. For instance, a parameterized function like \\[A \\sin\\left(\\frac{2 \\pi}{P}x\\right) + C\\] is built by assempling together a straight-line input scaling, a pattern-book \\(\\sin()\\) function, and another straight-line function for scaling the output from \\(\\sin()\\). 1300 In this chapter, we’ll introduce three general frameworks for combining functions: linear combination, composition, and multiplication. 11.1 Linear combination One of the most widely used sorts of combination is called a linear combination. The mathematics of linear combination is, it happens, at the core of the use of math in applications, whether that be constructing a Google-like search engine or analyzing medical data to see if a treatment has a positive effect. You’ve worked for many years with one kind of linear combination: polynomials. No doubt you’ve seen functions17 like \\[f(x) \\equiv 3 x^2 + 5 x - 2\\] There are three pattern-book functions in this polynomial. In this case, as in polynomials generally, they are all power-law functions: \\(g_0(x) \\equiv 1\\), \\(g_1(x) \\equiv x\\), and \\(g_2(x) \\equiv x^2\\). With these functions defined, we can write the polynomial \\(f(x)\\) as \\[f(x) \\equiv 3 g_2(x) + 5 g_1(x) - 2 g_0(x)\\] Each of the functions is being scaled by a quantity—3, 5, and -2 in this example—and the scaled functions are added up. That’s a linear combination; scale and add. (Later, we’ll see that the scalars generally come with units. So we might well have a metric polynomial and an equivalent traditional-unit polynomial. Just wait.) There are other places where you have seen linear combinations: The parameterized sinusoid \\[A \\sin\\left(\\frac{2 \\pi}{P}t\\right) + C\\] is a linear combination of the functions \\(h_1(t) \\equiv \\sin\\left(\\frac{2 \\pi}{P} t\\right)\\) and \\(g_0(t) \\equiv 1\\). The scalars are \\(A\\) and \\(C\\). The parameterized exponential \\[A e^{kt} + C\\] The functions being combined are \\(e^{kt}\\) and \\(1\\). The scalars are, again, \\(A\\) and \\(C\\). The straight line function \\(a x + b\\). The functions being combined are \\(x\\) and \\(1\\), the scalars are \\(a\\) and \\(b\\). 1310 Note that neither the parameterized exponential or the parameterized sinusoid is a polynomial. There are a few reasons for us to be introducing linear combinations here. You will see linear combinations everywhere once you know to look for them. There is a highly refined mathematical theory of linear combinations that gives us powerful ways to think about them as well as computer software that can quickly find the best scalars to use to match input-output data. The concept of linear combination generalizes the simple idea that we have been calling “scaling the output.” From now on, we’ll use the linear-combination terminology and avoid the narrower idea of “scaling the output.” Many physical systems are described by linear combinations. For instance, the motion of a vibrating molecule or a helicopter in flight or a building shaken by an earthquake are described in terms of simple “modes” which are linearly combined to make up the entire motion. More down to Earth, the timbre of a musical instrument is set by the scalars in a linear combination of pure tones. Many modeling tasks can be put into the framework of choosing an appropriate set of simple functions to combine and then figuring out the best scalars to use in the combination. (Generally, the computer does the figuring.) 11.2 Function composition To compose two functions, \\(f(x)\\) and \\(g(x)\\), means to apply one of the functions to the output of the other. “\\(f()\\) composed with \\(g()\\)” means \\(f(g(x))\\). This is generally very different from “\\(g()\\) composed with \\(f()\\)” which means \\(g(f(x))\\). For instance, suppose you have recorded the outdoor temperature over the course of a day and packaged this into a function \\(\\text{AirTemp}(t)\\): temperature as a function of time \\(t\\). Your digital thermometer uses degrees Celsius, but you want the output units to be degrees Kelvin. The conversion function is \\[\\text{CtoK}(C) \\equiv C + 273.15\\] Notice that CtoK() takes temperature as input. With this, we can write the “Kelvin as a function of time” as \\[\\text{CtoK}\\left(\\text{AirTemp}(t)\\right)\\] It’s important to distinguish the above time \\(\\rightarrow\\) Kelvin function from something that looks very much the same but is utterly different: \\(\\text{AirTemp}\\left(\\text{CtoK}(C)\\right)\\). In the first, the input is time. In the second, it is temperature in celsius. Here is a simple, approximate formula for the length of day (in hours) as a function of latitude \\(L\\) and the declination angle \\(\\delta\\) of the sun. \\[\\text{day_length}(L, \\delta) \\equiv \\frac{2}{15} \\arccos\\left(-\\tan(L)*\\tan(\\delta)\\right)\\] The declination angle is the latitude of the point on the earth’s surface pierced by an imagined line connecting the centers of the earth and the sun. On the summer solstice, the longest day of the year, it is \\(23.44^\\circ\\). A computer implementation must look different, since \\(L\\) and \\(\\delta\\) are typically provided in degrees while the tan() and other trigonometric functions in most computer languages expect units of radians. The conversion is easy: \\(\\text{deg2rad}(d) \\equiv \\frac{\\pi}{180} d\\). The conversion the other way is \\(\\text{rad2deg}(r) \\equiv \\frac{180}{\\pi} r\\). In order to get the day-length formula to work in a computer, we can compose the \\(\\tan()\\) function with deg2rad(). The output of acos() is in radians, so we have to convert it back to degrees. Like this: day_length &lt;- makeFun( (2/15)*rad2deg( acos( -tan(deg2rad(L))*tan(deg2rad(d)) ) ) ~ L &amp; d) Now to make a plot of day length as a function of day of the year. Of course, day_length(L, d) does not take day of the year into account. What’s missing is to know the declination of the sun as a function of calendar day. The input is a number \\(n\\) that runs from 0 at the start of January 1st to 365 at the end of December 31. In terms of this input, the declination of the sun is known to be approximately delta_sun &lt;- makeFun(-23.44*cos((2*pi/365)*(n+10) ) ~ n) Composing day_length() with delta_sun() (on the d argument only), and setting the latitude to be, say, \\(39^\\circ\\)N, we get a function of day of year n: slice_plot( day_length(39, delta_sun(n)) ~ n, domain(n=c(0,365)) ) Income inequality is a matter of perennial political debate. In the US, most people support Social Security, which is an income re-distribution programming dating back almost a century. But other re-distribution policies are controversial. Some believe they are essential to a healthy society, others that the “cure” is worse than the “disease.” 1330 Whatever one’s views, it’s helpful to have a way to quantify inequality. There are many ways that this might be done. A mathematically sophisticated one is called the Gini coefficient. Imagine that society was divided statistically into income groups, from poorest to richest. Each of these income groups consists of a fraction of the population and has, in aggregate, a fraction of the national income. Poor people tend to be many in number but to have a very small fraction of income. Wealthy people are few in number, but have a large fraction of income. The table shows data for US households in 2009:18 group label population aggregate income cumulative income poorest 20% 3.4% 3.4% low-middle 20% 8.6% 12.0% middle 20% 14.6% 26.6% high-middle 20% 23.2% 47.8% richest 20% 50.2% 100.0% The cumulative income shows the fraction of income of all the people in that group or poorer. The cumulative population adds up the population fraction in that row and previous rows. So, a cumulative population of 60% means “the poorest 60% of the population” which, as the table shows, earn as a group 14.6% of the total income for the whole population. A function that relates the cumulative population to the cumulative income is called a Lorenz function. The data are graphed in Figure 11.1 and available as the US_income data frame in the SANDBOX. Later, in Figure 11.2, we’ll fit parameterized functions to the data. Figure 11.1: Data on household incomes in the US in 2009. Lorenz curves must: Be concave up, which amounts to saying that the curve gets steeper and steeper as the population percentile increases. (Why? Because at any point, poorer people are to the left and richer to the right.) Connect (0,0) to (1, 1). Calling the income percentile \\(L\\) a function of the population percentile \\(p\\), a Lorenz function is \\(L(p)\\) that satisfies the requirements in the previous paragraph. Here are some functions that meet the requirements: \\(L_b(p) \\equiv p^b\\) where \\(1 \\leq b\\). \\(L_q(p) \\equiv 1 - (1-p)^q\\) where \\(0 &lt; q \\leq 1\\) Notice that each of these functions has just one parameter. It seems implausible that the workings of a complex society can be summarized with just one number. We can use the curve-polishing techniques that will be introduced in Section 14 to find the “best” parameter value to match the data. 1340 Lb &lt;- fitModel(income ~ pop^b, data = Income, start=list(b=1.5)) Lq &lt;- fitModel(income ~ 1 - (1-pop)^q, data = Income, start=list(q=0.5)) Figure 11.2 compares the polished functions to the data. Figure 11.2: Lorenz curves \\(L_b(p)\\) (blue) and \\(L_q(p)\\) (magenta) fitted to the household income data. Neither form \\(L_b(p)\\) or \\(L_q(p)\\) gives a compelling description of the data. Where should we go from here? We can provide more parameters by constructing more complicated Lorenz functions. Here are two ways to build a new Lorenz function out of an existing one: The product of any two Lorenz functions, \\(L_1(p) L_2(p)\\) is itself a Lorenz function. A linear combination of any two Lorenz functions, \\(a L_1(p) + (1-a) L_2(p)\\), so long as the scalars add up to 1, is itself a Lorenz function. For instance, the magenta curve in Figure 11.2 is the linear combination of 0.45 times the tan curve plus 0.55 times the blue curve. Question: Is the composition of two Lorenz functions a Lorenz function? That is, does the composition meet the two requirements for being a Lorenz function? To get started, figure out whether or not \\(L_1(L_2(0)) = 0\\) and \\(L_1(L_2(1)) = 1\\). If the answer is yes, then we need to find a way to compute the concavity of a Lorenz function to determine if the composition will always be concave up. We’ll need additional tools for this. We’ll introduce these in Block 2. 11.3 The modeling polynomial Sometimes, in order to model some simple relationship you need to build a function whose graph has a simple, curving shape. 1350 A simple but surprisingly powerful approach is to use a low-order polynomial. The order of a polynomial is the highest exponent on the input. For example: A straight-line function, \\(g_1(x) \\equiv a_0 + a_1 x\\), is a first-order polynomial. A quadratic, \\(g_2(x) \\equiv b_0 + b_1 x + b_2 x^2\\) is a second-order polynomial. Many modelers are tempted to extend the technique to third-, fourth-, fifth-order and even higher. This is only rarely worthwhile since all second-, fourth-, sixth- and higher-even-order monomials have basically the same U-shape, like a referee signalling a touch-down. Similarly, first-, third-, fifth- and higher odd-order monomial have similar shapes. An ofttimes better approach is to compose the polynomial with a curved but monotonic function, such as a logarithm. Notice that in writing low-order polynomials like \\[g_1(x) \\equiv a_0 + a_1 x\\] or \\[g_2(x) \\equiv b_0 + b_1 x + b_2 x^2\\] we are using a specific naming convention for the scalars in the linear combinations. For each different function, we use a different start-of-the-alphabet name, like \\(a\\) and \\(b\\). That same name is used for all the scalars in the function, and a subscript is used to make the distinction between the different functions being combined. Thus, we have \\(a_1\\) for the \\(x\\) function in \\(g_1()\\) and \\(b_2\\) for the \\(x^2\\) function in \\(g_2()\\). In high-school mathematics, polynomials are often written without subscript, for instance \\(a x^2 + b x + c\\). This can be fine when working with only one polynomial at a time, but in modeling we often need to compare multiple, related polynomials. 11.4 Function multiplication The third in our repertoire of methods for making new function out of old is plain old multiplication. With two functions \\(f(x)\\) and \\(g(x)\\), the product is simply \\(f(x)g(x)\\). It’s essential to distinguish between function multiplication and function composition: \\[\\underbrace{f(x) g(x)}_\\text{multiplication}\\ \\ \\ \\ \\underbrace{f(g(x)) \\ \\ \\text{or}\\ \\ \\ g(f(x))}_\\text{composition}\\] In function composition, only one of the functions—the interior function is applied to the overall input, \\(x\\) in the above example. The exterior function is fed its input from the output of the interior function. In multiplication, each of the functions is applied to the input individually. Then their outputs are multiplied to produce the overall output. In function composition, the order of the functions matters: \\(f(g(x))\\) and \\(g(f(x))\\) are in general completely different functions. In function multiplication, the order doesn’t matter because multiplication is commutative, that is, if \\(a\\) and \\(b\\) are each quantities, \\(a \\times b = b \\times a\\). 1360 Transient vibration A guitar string is plucked to produce a note. The sound is, of course, vibrations of the air created by vibrations of the string. After plucking, the note fades away. An important model of this is a sinusoid (of the correct period to correspond to the frequency of the note) times an exponential. Function multiplication is used so often in modeling that you’ll see it in many modeling situations. Here’s one example that is important in physics and communication: the wave packet. Overall, the wave packet is a localized oscillation as in Figure 11.3. Figure 11.3: A wave packet constructed by multiplying a sinusoid and a gaussian function. This is the product of two simple functions: a gaussian times a sinusoid. Figure 11.4: The two components of the wave packet in Figure 11.3 Each simple function such as a gaussian, a sigmoid, a straight-line function, or a sinusoid can be likened to a character in a story. For instance, a sinusoid with a period of 10 seconds and an amplitude of 5 feet might be sufficient for the purpose of describing the shaking encountered during an earthquake. A sigmoid might be a good description of the uptake of a successful social media platform such as Facebook. But not every social media firm succeeds and you may need two or more characters to express the drama: the rising young firm and the rapid fall in popularity when competition provides a better alternative. For instance, the initial rise in popularity of the social media platform Yik Yak was exponential. Then popularity leveled off, promising a steady, if static, business into the future. But, the internet being what it is, popularity collapsed to near zero and the company closed. On way to model this pattern is by multiplying a sigmoid by an exponential.(See Figure 11.5.) yikyak &lt;- makeFun(pnorm(year, mean=2014.5, sd=0.7) * exp(- (year-2014)) ~ year) slice_plot(yikyak(year) ~ year, domain(year=c(2010,2018))) Figure 11.5: Subscriptions to the web messaging service Yik Yak grew exponentially in 2013 and 2014, then collapsed. The company closed in 2017. 11.5 All together now! Two or all three of the techniques for combining functions—linear combinations, function composition, and function multiplication—can be used in the same function. 1370 Consider the function for the length of the day \\[\\text{day_length}(L, \\delta) \\equiv \\frac{2}{15} \\arccos\\left(-\\tan(L)*\\tan(\\delta)\\right)\\] The 2/15 is scaling the output of \\(\\arccos()\\). The \\(\\arccos()\\) is being composed with an interior function that is itself a scaled product of two functions. 11.6 Exercises Exercise 11.1: JWUVA The graph shows two gaussian functions, \\(g_1(t)\\) and \\(g_2(t)\\) A linear combination of the gaussian functions is shown in Graph (A). Question A What is the linear combination of \\(g_1(t)\\) and \\(g_2(t)\\) shown in Graph (A)? \\(0.5\\,g_1(t) + g_2(t)\\)Good.  \\(g_1(t) + 0.25\\,g_2(t)\\)︎✘ If this were the case, the right bump would be only one-quarter as big as the left bump. \\(g_1(t) + 2\\,g_2(t)\\)︎✘ Since \\(g_2(t)\\) has a maximum value of 20, \\(2\\,g_2(t)\\) would reach a value of 40. That isn’t what’s shown in the graph. Another linear combination of the gaussian functions is shown in Graph (B). Question B Which linear combination of \\(g_1(t)\\) and \\(g_2(t)\\) is shown in Graph (B)? \\(g_1(t) - 2\\, g_2(t)\\)Good.  \\(g_1(t) - g_2(t)\\)︎✘ The second (downward) gaussian hump is bigger than the first (upward) gaussian hump. \\(0.5\\,g_1(t) - 0.5\\, g_2(t)\\)︎✘ If this were so, the second gaussian hump would reach a value of -4 rather than the -8 seen in Graph (B). \\(-g_1(t) - g_2(t)\\)︎✘ The first gaussian hump is positive. Exercise 11.2: AVNOW The graph shows a function that is a linear combination of three x-shifted gaussian functions \\[a_1 \\dnorm(x-3.5) + a_2 \\dnorm(x-0.5) + a_3 \\dnorm(x-(-4))\\] Question A Estimate the scalars \\(a_1, a_2\\), and \\(a_3\\) for the function drawn in Plot (A). (Be sure to get the order right!) \\(a_1 = 0.3, a_2 = 0.15, a_3=0.2\\)Right!  \\(a_1 = 0.15, a_2 = 0.2, a_3=0.3\\)︎✘ \\(a_1 = 0.2, a_2 = 0.3, a_3=0.15\\)︎✘ \\(a_1 = 0.15, a_2 = 0.3, a_3=0.2\\)︎✘ Plot (B) shows a function that is a linear combination of four x-shifted sigmoid functions. Each the multiplicative scalars is either 1 or \\(-1\\). Recall that a handy fiducial point for the sigmoid function is the input at which the output is 1/2. Question B Where are the fiducial points for the four sigmoids?     \\(-8, -2, 3, 7\\)\\(\\heartsuit\\ \\)       \\(-6, -4, 0, 6\\)︎✘        \\(-9, -8, 1, 5\\)︎✘        \\(-2, 2, 4, 6\\)︎✘ Question C What are the scalar multipliers on each sigmoid, in order from the leftmost to rightmost?     \\(1, -1, 1, -1\\)\\(\\heartsuit\\ \\)       \\(1, -1, -1, 1\\)︎✘        \\(-1, 1, 1, -1\\)︎✘        \\(-1, 1, -1, 1\\)︎✘ Exercise 11.3: FISHU According to data from the US National Health and Nutrition Evaluation Survey, the average height of adult females is 157 cm vs 167 for adult males. The standard deviations are 17 cm and 22 cm respectively. A good model for the person-to-person variation for females is dnorm(height, mean = 157, sd = 17) and similarly for males. To see the overall distribution of adult height, regardless of sex, make a linear combination of the distribution for females and for males, giving each a scalar of one-half (since the population is roughly 50-50 female/male). Open a SANDBOX and construct the linear combination function for the overall distribution. Use the scaffolding to plot out the distributions for the individual sexes and the overall distribution. female &lt;- makeFun(dnorm(height, mean = 157, sd=17) ~ height) male &lt;- makeFun(dnorm(height, mean = 167, sd=22) ~ height) # fill in the blanks in the next line overall &lt;- makeFun( _your_scalar_f_ * female(height) + _your_scalar_m_ * male(height) ~ height) slice_plot(female(height) ~ height, domain(height=c(100,220)), color=&quot;orange3&quot;, label_x=.5, label_text=&quot;F&quot;) %&gt;% slice_plot(male(height) ~ height, color=&quot;dodgerblue&quot;, label_text=&quot;M&quot;, label_x=.8) %&gt;% slice_plot(overall(height) ~ height, color=&quot;black&quot;, size=2) Some people erroneously think that since the mean height of men is larger than women by 10cm, you can readily distinguish between the sexes based on height. However, notice that the overall distribution (plotted in black) does not show a dip between the sexes: there is no clear separation based on height. As a thought experiment, let’s increase the separation in mean height from the actual value of \\(167-157=10\\) cm to something larger. You can increase the separation by 5 cm, for example, by making the men’s mean height 167+5. Question A What’s the smallest increase in separation (in cm) that produces a barely visible dip between the sexes in the overall height distribution?     5︎✘        10︎✘        15︎✘        20︎✘        25︎✘        30\\(\\heartsuit\\ \\) Exercise 11.5: fmwTFj Question A How long is the day on April Fools (\\(n=90\\)) at Latitude 39\\(^\\circ\\)N? (Use a sandbox for the calculation.)     12.38 hours\\(\\heartsuit\\ \\)       12.59 hours︎✘        12.64 hours︎✘        12.74 hours︎✘ Exercise 11.6: LPhyTb The graph shows (in black) a function constructed as the product of two basic modeling functions. The graph also shows a pair of blue curves that encompass the black function. These are called the envelope of the black function. Question A What are the two basic modeling functions being multiplied? A sinusoid and another sinusoid with a faster period.Excellent!  A gaussian and a sinusoid.︎✘ A sigmoidal function and a sinusoid.︎✘ Question B What is the period of the envelope? 10︎✘ It’s true that the broad peaks in the overall function occur every 10 time units. But a sine wave has two excursions from zero every cycle, one positive and one negative. So if the period of the envelope were 10, we would see an amplitude of the faster sinusoid near zero every 5 time units. 20Correct.  30︎✘ If this were so, the dips in amplitude of the faster sign would occur every 15 time units. Exercise 11.7: LDKKVA Being able to add or multiply functions can enable us to tell a somewhat complicated story. For example, the graph shows a simple model of the hourly temperature in from June through September temp &lt;- makeFun(20*cos(2*pi*(t-120)/365) + 10*sin(2*pi*t/1) + 50 ~ t) slice_plot(temp(day) ~ day, domain(day=c(90, 180)), npt=1000) %&gt;% gf_labs(y = &quot;Temperature (F)&quot;, x = &quot;Day of year&quot;) You can see in the graph the slow seasonal change in temperature represented by a sine function with a period of 365 days, as well as the relatively rapid hour-by-hour variation over the course of 24 hours. There are two different mechanisms at work, 1) the annual orbit of the Earth around the Sun which creates the seasons, 2) the daily rotation of the Earth around its axis. Each mechanism is approximated by a simple function. The overall pattern can be represented by a sum of functions. We are going to use this strategy of modeling complex phenomena as a sum of two or more simple functions. Problem 1 Epidemics are often modeled as a series of “waves.” Each wave involves different people. Let’s imagine two epidemic waves, one passing through the “dodgerblue” population and a smaller one through the “orange3” population, like this: Question A Assuming that there were no way to distinguish between red and blue cases, the epidemic would look like just one curve. Which of the following curves would the overall epidemic look like? (The colors are just to help you distinguish the different functions) A︎✘ The cumulative number of cases can’t possibly go down! B︎✘ The cumulative number of cases can’t possibly go down! C︎✘ You can’t see the separate waves in (C) even though the rise in the blue wave is clearly distinct in time from the rise in the red wave. DCorrect. Yes. Each wave adds another layer to the cumulative number of cases Each of the functions shown in the above graph is a “linear combination” of the red function and the blue function. The real total cumulative cases is “wave1(t)” plus “wave2(t).” The other functions are made up and are irrelevant to the real epidemic. Still, we can ask what arithmetic combination of “wave1(t)” and “wave2(t)” was used to create the made-up function. Question B For made-up function (A) in the graph, what was the linear combination? 1000 - wave1(t) + wave2(t)Correct.  2wave1(t) - 3wave2(t)︎✘ When t=0, both wave1(t) and wave2(t) are zero, so the sum would also be zero. That’s not true in function (A) 1000 + wave1(t) - wave2(t)︎✘ This linear combination would rise from 1000 to 2000 (at time t=100) and then fall off to 1500 as the negative wave2(t) comes into play. Exercise 11.8: MWDKVA It’s very common in communications systems to have a signal that is a sine-wave carrier that is modulated by another function. That is, the carrier is multiplied by the other function: waveform(t) = modulator(t) \\(\\times\\) carrier(t). Here are four examples in each of which a sine with a period of about 2 units is modulated by another function. In each case, that other function is one of the modeling functions we have studied. Question A (A) Of what sort is the function that is modulating the carrier?     exponential\\(\\heartsuit\\ \\)       gaussian︎✘        sigmoid︎✘        sine︎✘ Question B (B) Of what sort is the function that is modulating the carrier?     exponential︎✘        gaussian\\(\\heartsuit\\ \\)       sigmoid︎✘        sine︎✘ Question C (C) Of what sort is the function that is modulating the carrier?     exponential︎✘        gaussian︎✘        sigmoid\\(\\heartsuit\\ \\)       sine︎✘ Question D (D) Of what sort is the function that is modulating the carrier?     exponential︎✘        gaussian︎✘        sigmoid︎✘        sine\\(\\heartsuit\\ \\) Exercise 11.9: AMBXI Use a SANDBOX to answer the following questions: Question A What is the shape of the graph of the composition \\(\\pnorm(\\pnorm(x))\\)?     a sigmoid\\(\\heartsuit\\ \\)       a gaussian︎✘        an exponential︎✘ Question B What is the shape of the graph of the composition \\(\\pnorm(\\dnorm(x))\\)?     a sigmoid︎✘        a gaussian\\(\\heartsuit\\ \\)       an exponential︎✘ Question C What is the shape of the graph of the composition \\(\\dnorm(\\pnorm(x))\\)?     a sigmoid\\(\\heartsuit\\ \\)       a gaussian︎✘        an exponential︎✘ Question D What is the shape of the graph of the composition \\(\\ln(\\dnorm(x))\\)? a sharp rise from (0,0) followed by an asymptotic approach to 0 as \\(x\\rightarrow \\infty\\)︎✘ a fishhook︎✘ You have a creative imagination! a parabolaExcellent!  Question E What is the shape of the graph of the composition \\(\\ln(x^2)\\)?     similar to the log function itself\\(\\heartsuit\\ \\)       a gaussian function︎✘        a sigmoid︎✘ Question F What is the shape of \\(\\exp(x^2)\\)?     U-shaped\\(\\heartsuit\\ \\)       V-shaped︎✘        W-shaped︎✘        a gaussian function︎✘ Question G What is the shape of \\(\\exp(abs(x))\\)?     U-shaped\\(\\heartsuit\\ \\)       V-shaped︎✘        W-shaped︎✘        a sigmoid function︎✘ Question H What is the shape of \\(\\exp(-x^2))\\)?     U-shaped︎✘        V-shaped︎✘        W-shaped︎✘        a gaussian function\\(\\heartsuit\\ \\) Question I What is the range of \\(\\sin(1/x)\\)? \\(-1 \\leq \\sin(1/x) \\leq 1\\)Right!  \\(\\infty &lt; \\sin(1/x) &lt; \\infty\\)︎✘ \\(0 \\leq \\sin(1/x) &lt; \\infty\\)︎✘ \\(-\\infty &lt; \\sin(1/x) \\leq 1\\)︎✘ Question J What is the range of \\(1/\\sin(x)\\)? \\(-1 \\leq | \\sin(1/x) |\\)Excellent! Or, in words, less than -1 or greater than 1 \\(\\infty &lt; \\sin(1/x) &lt; \\infty\\)︎✘ \\(0 \\leq \\sin(1/x) &lt; \\infty\\)︎✘ \\(-\\infty &lt; \\sin(1/x) \\leq 1\\)︎✘ Question K What is the shape of the graph of the composition \\(\\ln(\\pnorm(x))\\)? a rise followed by an horizontal asymptotic approach to 0 as \\(x\\rightarrow \\infty\\)Excellent!  a fishhook︎✘ You have a creative imagination! a parabola︎✘ It’s likely that you saw polynomials as things to be factored, rather than as functions taking an input and producing an output. So they were written as equations: \\(e x^2 + 5x - 2 = 0\\)↩︎ These data, as well as the general idea for the topic come from La Haye and Zizler (2021), “The Lorenz Curve in the Classroom,” The American Statistician, 75(2):217-225↩︎ "],["fun-multiple-inputs.html", "Chapter 12 Functions with multiple inputs 12.1 f(x) times g(t) 12.2 Two-variable modeling polynomial 12.3 Exercises", " Chapter 12 Functions with multiple inputs We can use linear combination and function multiplication to build up custom functions from the basic modeling functions. Similarly, linear combination and function multiplication provide ways to construct functions of multiple inputs. 1400 12.1 f(x) times g(t) For example, when a guitar string is at rest it forms a straight line connecting its two fixed ends: one set by finger pressure along the neck of the guitar and the other at the bridge near the center of the guitar body. When a guitar string is plucked, its oscillations follow a sinusoid pattern of displacement. With the right camera and lighting setup, we can see these oscillations in action: For a string of length \\(L\\), the string displacement is a function of position \\(x\\) along the string and is a linear combination of functions of the form \\[g_k(x) \\equiv \\sin(k \\pi x /L)\\] where \\(k\\) is an integer. A few of these functions are graphed in Figure 12.1 with \\(k=1\\), \\(k=2\\), and \\(k=3\\). Figure 12.1: Vibrational modes of a guitar string. Shapes of the sort in Figure 12.1 are a stop-motion flash snapshot of the string. The string’s shape also changes in time, so the string’s displacement is a function of both \\(x\\) and \\(t\\). The displacement itself is a sinusoid whose time period depends on the length and tension of the string as well as the number of cycles of the spatial sine: \\[g_k(x, t) \\equiv \\sin(\\frac{k \\pi}{L} x) \\ \\sin(\\frac{k \\pi}{P}t)\\] Figure 12.2 shows a few snapshots of the 1.5 cycle string at different moments in time, and the motion of the linear combination.1410 Figure 12.2: String position changes over time. 12.2 Two-variable modeling polynomial In Section 11.3 we introduced the low-order polynomial, either \\(g_1(x) \\equiv a_0 + a_1 x\\) or \\(g_1(x) \\equiv b_0 + b_1 x + b_2 x^2\\) as a general-purpose way of generating a function with a smoothly curved shape. The same applies in constructing simple functions of two variables. Almost always, you should use at least a first-order polynomial, which is: \\[h_1(x, y) \\equiv a_0 + a_x x + a_y y\\] But there is an important extension of this, using what’s called a bilinear term or, more evocatively in statistics, an interaction term. This is \\[h_2(x, y) \\equiv \\underbrace{b_0}_\\text{intercept} + \\underbrace{b_x\\, x + b_y\\, y}_\\text{linear terms} + \\underbrace{b_{xy}\\,x\\, y}_\\text{bilinear term}\\] The bilinear term arises in models of phenemona such as the spread of epidemics, the population dynamics of predator and prey animals, and the rates of chemical reactions. In each of these situations one thing is interacting with another: a predator killing a prey animal, an infective individual meeting a person susceptible to the disease, one chemical compound reacting with another. 1420 Under certain circumstances, modelers include one or both quadratic terms, as in \\[h_3(x, y) \\equiv c_0 + c_x\\, x + c_y\\, y + c_{xy}\\,x\\, y + \\underbrace{c_{yy}\\, y^2}_\\text{quadratic in y}\\] The skilled modeler can often deduce which terms to include from basic facts about the system being modeled. We’ll need some additional calculus concepts before we can explain this in a straightforward way. In writing polynomials like \\[h_1(x, y) \\equiv a_0 + a_x x + a_y y\\] or \\[h_3(x, y) \\equiv c_0 + c_x x + c_y\\ y + c_{xy} x\\ y\\] we are using letters as subscripts on the coefficients. Think of \\(c_x\\) as saying, “I am the coefficient on the \\(x\\) term in the polynomial.” Using this style lets us use different letters from the start of the alphabet for the names of coefficients in the different polynomials while still making it clear which term each coefficient is scaling. We left function composition out of the list of ways to build multivariable functions out of simpler functions with a single input. For instance, consider the two functions \\(f(x)\\) and \\(g(t)\\). The composition \\(f(g(t))\\) has only one input: \\(t\\). Similarly, \\(g(f(x))\\) has only one input: \\(x\\). 12.3 Exercises Exercise 12.1: ICLSE Many printed tables are meant to be used as functions; you plug in the input values and read off the output. Here’s a table published by the National Oceanic and Atmospheric Administration for the heat index, a way of summarizing the perceived comfort (or discomfort) of summer-like weather conditions. Question A What are the inputs to the heat-index function temperature and relative humidityGood.  temperature and wind speed︎✘ Those are the inputs to the wind-chill function, not the heat index. temperature, latitude, and longitude︎✘ The heat index doesn’t depend on location. The table actually shows three different functions: The heat index in \\(^\\circ\\) F. The heat index in \\(^\\circ\\) C. A caution warning level. Question B For inputs of 70% relative humidity and \\(88^{\\circ}\\) F, what are the outputs of the three functions? \\(100^{\\circ}\\) F, \\(38^\\circ\\) C, and “extreme caution.”Correct.  \\(100^\\circ\\) F, \\(38^\\circ\\) C, and “danger.”︎✘ Check again! \\(100^\\circ\\) F, \\(33^\\circ\\) C, and “extreme caution.”︎✘ 33C does is not the same temperature as 100F. Question C Holding the relative humidity at 70%, how much would the ambient temperature have to increase (from \\(88^\\circ\\) F) to change the caution-level output to “dangerous?” Increase by \\(2^\\circ\\) FRight!  Increase by \\(6^\\circ\\) F︎✘ It looks like you’re increasing the humidity to the point where the heat index is \\(106^circ\\) F. But we asked you how much the temperature input has to change, not the heat-index output. Increase relative humidity to 80%.︎✘ It’s true that at \\(100^\\circ\\) F and 80% humidity, the caution-index is “dangerous.” But the problem specified holding humidity constant. Question D From a starting point of \\(88^\\circ\\) F and 70% humidity, what is the slope of the increase in heat index when moving to 80% humidity. \\(6^\\circ\\) F per 10 percentage points humidityNice!  \\(6^\\circ\\) F︎✘ A slope is always “rise over run.” You’ve got the rise right, but what about the run? \\(6^\\circ\\) F per 80% humidity.︎✘ The slope is the change in output divided by the change in input, i.e. “rise over run.” 80% is the humidity at the endpoint, but the run is the change in humidity from the starting point to the endpoint. Question E What is the heat-index output when the inputs are 52% relative humidity and \\(91^\\circ\\) F? Choose the best answer. \\(98.4^\\circ\\) FRight! Of course, the 4 in the last digit is sketchy, but it’s reasonable to calculate the interpolated output by averaging over neighboring outputs. \\(101^\\circ\\) F︎✘ That’s the output at 55% humidity and \\(92^\\circ\\) F. The table doesn’t say.︎✘ While it’s true that there is no table entry specifically for 52% and \\(91^\\circ\\) F, you can make a very reasonable guess by interpolation, that is, reading between the rows and columns. Question F True or false: The caution-level output could have been presented as a function of just one variable, rather than needing both temperature and humidity both. TRUEExcellent! The caution-level output is not a function of ambient temperature alone or of humidity alone. But if you know the heat-index, you know that caution level exactly. FALSE︎✘ Notice that the caution-level output is the same for any given level of the heat index, regardless of the ambient temperature or humidity separately. The US National Weather Service also publishes a heat index graphic, the one below. Source link Exercise 12.2: EDKKW Recall the Pythagorean theorem: \\(C^2 = A^2 + B^2\\). Let’s write this as a function that takes as inputs the lengths of the two legs and produces as output the length of the hypotenuse. \\[\\text{hypotenuse}(a, b) \\equiv \\sqrt{\\strut a^2 + b^2}\\] This can be seen as a composition of a function \\(f(x) \\equiv \\sqrt{x}\\) into a linear combination of square functions of different inputs: \\(g(a, b) \\equiv a^2 + b^2\\). Question A What is the function \\(f()\\)? \\(f(x) \\equiv a^2\\)︎✘ This wouldn’t make sense. The output of \\(f()\\) doesn’t depend on its input. \\(f(x) \\equiv \\sqrt{x}\\)Correct.  \\(f(x) \\equiv x^2\\)︎✘ This is part of the interior function, not the outer function. \\(f(x) \\equiv +\\)︎✘ Sorry, but the output of the hypothenuse() function needs to be a quantity, and \\(+\\) is not a quantity. Question B What is the function \\(g()\\)? \\(g(x) \\equiv a^2\\)︎✘ This wouldn’t make sense. The output of \\(f()\\) doesn’t depend on its input. \\(g(a) \\equiv x^2\\)︎✘ This wouldn’t make sense. The output of \\(f()\\) doesn’t depend on its input. \\(g(x) \\equiv x^2\\)Excellent! Right, a power-law function. It doesn’t matter what we call the input, so long as it’s used consistently in the definition. \\(g(x) \\equiv a^2 + b^2\\)︎✘ Sorry, but the input name is \\(x\\) and the formula on the right side of the tilde expression has \\(a\\) and \\(b\\) in it. Question C There are two functions in the linear combination. What are they?     \\(g(a)\\) and \\(g(b)\\)\\(\\heartsuit\\ \\)       \\(f(x)\\) and \\(g(x)\\)︎✘        \\(f(b)\\) and \\(g(b)\\)︎✘ Question D What are the scalars in the linear combination? \\(1\\) and \\(1\\)Correct.  \\(1\\) and \\(-1\\)︎✘ There are no scalars.︎✘ I think I know what you’re getting at. The tradition in mathematics is that when a scalar is \\(1\\), we don’t write it down. But still, the scalar is \\(1\\). You used \\(a\\) and \\(b\\) as the names of the inputs to hypotenuse(). Aren’t \\(a\\) and \\(b\\) meant to be parameters, not input names? You can use whatever you want as input names, so long as they are used consistently between the left and right sides of the \\(\\\\equiv\\). Names like \\(x\\), \\(t\\), and \\(y\\) scream out to be recognized as input names, so these are what we use most of the time. But the Pythagorean theorem is usually written using A, B, and C. I’m honoring that convention so that a human reader gets a cultural hint what the inputs stand for. I’m unapologetic about this, since you got fair warning by the left side of the \\(\\\\equiv\\) what the argument names are. Exercise 12.4: dB1r5F Auckland, New Zealand is in a field of dormant volcanos. The highest, at 193 meters above sea level, is Maungawhau. Formerly, tourists could drive to the peak and look down into the crater, as seen in the picture. Figure 12.3: The crater of Maungawhau, near Auckland, New Zealand. Source The initial creator of R, Ross Ihaka, teaches at the University of Auckland. His digitization of a topographic map is easily plotted, as here: Figure 12.4: A combination surface and contour plot of the topography of Maungawhau. The z-axis is height and is in meters. The x- and y-axes are latitude and longitude, measured in 10-meter units from a reference point. (So, \\(x=10\\) is 100 meters from \\(x=20\\).) Get used to the presentation of the surface plot and how to rotate it and zoom in. To see the crater clearly, you can rotate the surface plot to look straight downwards, effectively presenting you with a color-coded contour plot. Moving the cursor over the surface will display the \\(x\\) and \\(y\\) coordinates, as well as the \\(z\\)-value at that coordinate point. Question A What is the \\((x, y)\\) location of the low-point of the crater? (Choose the closest answer.)     \\((x=34, y=29)\\)\\(\\heartsuit\\ \\)       \\((x=31, y=25)\\)︎✘        \\((x=25, y=34)\\)︎✘        \\((x=29, y=34)\\)︎✘ Question B What color is used to designate the lowest elevations?     dark blue\\(\\heartsuit\\ \\)       green︎✘        yellow︎✘ If you were to climb up Maungawhau, at some point you would be at the same elevation as the low-point of the crater, even though you are outside the crater. Think of the contour that corresponds to that elevation. Let’s call it the “half-way” contour since it’s roughly half-way up the volcano. Question C What is the shape of the “half-way” contour?     a line segment︎✘        a crescent︎✘        a closed curve\\(\\heartsuit\\ \\)       a cross︎✘ Imagine that you are filling up the crater with water. At some point, the water rises to a level where it will spill over the lip of the crater. Question D What is the elevation at which the water will start to spill over the crater lip? (Pick the closest answer.)     169 meters\\(\\heartsuit\\ \\)       172 meters︎✘        175 meters︎✘        178 meters︎✘ Question E Explain in terms of the shapes of contours how you can identify the elevation at which the water would spill over the rim. Exercise 12.5: drawing We’ve created a function named \\(\\text{twins}(x,y)\\) to help you practice making contour plots. You’ll need to open a sandbox to draw the plot. Here is some scaffolding for the command: twins &lt;- mosaic::rfun(~ x + y, seed = 302, n=5) contour_plot(twins(x, y) ~ x + y, domain(x=c(0,1), y=c(-1,1))) Question A The domain of the plot should be large enough to show a mountain next to a deep hole. Which of these domains will do the job? domain(x=c(-5, 5), y=c(-5, 5)Right!  domain(x=c(1, 5), y=c(1, 5)︎✘ This shows the mountain, but not the hole. domain(x=c(1,1), y=c(-1,1)))︎✘ Some of the hole is shown, but none of the mountain. domain(x=c(5,10), y=c(0,10)))︎✘ There’s hardly anything going on in this domain. The function here is pretty flat except for a dip in the lower left. In a different sandbox (so you can still see the contour plot in the first sandbox), draw a slice through the function along the line \\(y=0\\). Use the same \\(x\\)-domain as in the correct answer to the previous question. In the slice_plot() command below, you will need to replace __tilde-expression___ and __domain__ with the correct syntax. twins &lt;- mosaic::rfun(~ x + y, seed = 302, n=5) slice_plot(__tilde-expression__, __domain__) Question B Which of these expressions will accomplish the task? slice_plot(twins(x, y=0) ~ x, domain(x=c(-5,5)))Excellent!  slice_plot(twins(x) ~ x, domain(y=c(-5, 5)))︎✘ The domain should be over \\(x\\), not \\(y\\). And twins() takes two inputs, even if one of them is fixed at zero. slice_plot(twins(x, y=0) ~ x, domain(x=c(-5, 5), y=c(-5, 5)))︎✘ A slice plot has a domain that includes only one input. slice_plot(twins(x, y=0) ~ x + y, domain(x=c(-5, 5), y=c(-5, 5)))︎✘ A slice plot has only one input on the right side of the tilde expression. Exercise 12.6: daylength Consider this graph of the length of the day at different levels of latitude and different days of the year. Source. First, orient yourself to the graph and what the contours mean. Note the vertical lines indicating the days of the equinoxes and solstices. Question A True or False: There is a place on the equator when the day length is exactly 12 hours at some time of year. TRUE︎✘ If there were, the horizontal (dashed) line denoting the equator would cross the 12-hour contour. It doesn’t. FALSENice! Since the dashed equator line no where overlaps with the 12-hour contour line, there is no time of year when the length of day on the equator is exactly 12 hours. Presumably this is because daylight starts somewhat before the sun rises above the horizon and ends somewhat after the sun goes below the horizon. The word “equinox” comes from the Latin for “equal night.” Question B True or False: To judge from the contour plot, on the equinox every latitude has a length of day somewhat longer than the length of night. TRUENice!  FALSE︎✘ Note that neither of the lines for the March or September equinoxes cross the 12-hour length-of-day contour. Question C US Air Force Academy is at latitude 38.9983° N. Reading from the contour plot, roughly what is the length (in hours) of the longest day of the year?     13︎✘        14︎✘        15\\(\\heartsuit\\ \\)       16︎✘        17︎✘        18︎✘        19︎✘ Exercise 12.7: kelxlB The contour plot below is marked with several colored lines which represent slices through the surface. Your job is to match these up with the slice plots presented below. In the slice plots, the input \\(t\\) reflects the position on the slice. At \\(t=0\\), position is at the leftmost point of the slice, while at \\(t=1\\) position is at the right terminus of the slice. Question A Which color line corresponds to slice 1?     black︎✘        gray︎✘        blue︎✘        tan\\(\\heartsuit\\ \\)       yellow︎✘ Question B Which color line corresponds to slice 2?     black︎✘        gray\\(\\heartsuit\\ \\)       blue︎✘        tan︎✘        yellow︎✘ Question C Which color line corresponds to slice 3?     black\\(\\heartsuit\\ \\)       gray︎✘        blue︎✘        tan︎✘        yellow︎✘ Question D Which color line corresponds to slice 4?     black︎✘        gray︎✘        blue︎✘        tan︎✘        yellow\\(\\heartsuit\\ \\) Exercise 12.8: ticlw The gradient plot below is marked with several colored lines which represent slices through the surface. Your job is to match these up with the slice plots presented below. In the slice plots, the input \\(t\\) reflects the position on the slice. At \\(t=0\\), position is at the leftmost point of the slice, while at \\(t=1\\) position is at the right terminus of the slice. Question A Which color line corresponds to slice 1?     black︎✘        gray\\(\\heartsuit\\ \\)       blue︎✘        tan︎✘        yellow︎✘ Question B Which color line corresponds to slice 2?     black︎✘        gray︎✘        blue\\(\\heartsuit\\ \\)       tan︎✘        yellow︎✘ Question C Which color line corresponds to slice 3?     black︎✘        gray︎✘        blue︎✘        tan︎✘        yellow\\(\\heartsuit\\ \\) Question D Which color line corresponds to slice 4?     black︎✘        gray︎✘        blue︎✘        tan\\(\\heartsuit\\ \\)       yellow︎✘ "],["fun-piecewise.html", "Chapter 13 Piecewise functions 13.1 Splitting the domain 13.2 Basic piecewise functions 13.3 Exercises", " Chapter 13 Piecewise functions Each of our basic modeling functions, with two exceptions, has a domain that is the entire number line \\(-\\infty &lt; x &lt; \\infty\\). No matter how big or small is the value of the input, the function has an output. Such functions are particularly nice to work with, since we never have to worry about the input going out of bounds. 1500 The two exceptions are: the logarithm function, which is defined only for \\(0 &lt; x\\). some of the power-law functions: \\(x^p\\). When \\(p\\) is negative, the output of the function is undefined when \\(x=0\\). You can see why with a simple example: \\(g(x) \\equiv x^{-2}\\). Most students had it drilled into them that “division by zero is illegal,” and \\(g(0) = \\frac{1}{0} \\frac{1}{0}\\), a double law breaker. When \\(p\\) is not an integer, that is \\(p \\neq 1, 2, 3, \\cdots\\) the domain of the power-law function does not include negative inputs. To see why, consider the function \\(h(x) \\equiv x^{1/3}\\). It can be tedious to make sure that you are on the right side of the law when dealing with functions whose domain is not the whole number line. The designers of the hardware that does computer arithmetic, after several decades of work, found a clever system to make it easier. It’s a standard part of such hardware that whenever a function is handed an input that is not part of that function’s domain, one of two special “numbers” is returned. To illustrate: sqrt(-3) ## [1] NaN (-2)^0.9999 ## [1] NaN 1/0 ## [1] Inf NaN stands for “not a number.” Just about any calculation involving NaN will generate NaN as a result, even those involving multiplication by zero or cancellation by subtraction or division.19 For instance: 0 * NaN ## [1] NaN NaN - NaN ## [1] NaN NaN / NaN ## [1] NaN Division by zero produces Inf, whose name is reminiscent of “infinity.” Inf infiltrates any calculation in which it takes part: 1510 3 * Inf ## [1] Inf sqrt(Inf) ## [1] Inf 0 * Inf ## [1] NaN Inf + Inf ## [1] Inf Inf - Inf ## [1] NaN 1/Inf ## [1] 0 To see the benefits of the NaN / Inf system let’s plot out the logarithm function over the graphics domain \\(-5 \\leq x \\leq 5\\). Of course, part of that graphics domain, \\(-5 \\leq x \\leq 0\\) is not in the domain of the logarithm function and the computer is entitled to give us a slap on the wrists. The NaN provides some room for politeness. Open a sandbox and see what happens when you make the plot. slice_plot(log(x) ~ x, domain(x=c(-5,5))) 13.1 Splitting the domain In a purely mathematical sense, the problem with functions being undefined over an extended part of a domain has been handled with cunning and imagination, but the solution—the invention of complex numbers—is not our concern here. Instead, we’re going to embrace functions that have a domain smaller than the whole number line and see what we can do with them. To illustrate, let’s use computer notation to create a function whose domain is \\(x &lt; 1\\). To do this, we need a way to write “if,” as in, “If \\(x\\) is 1 or greater, return NaN.” We’ll use a function in R that let’s us ask a TRUE/FALSE question and, depending on the answer, do one or another calculation. The question-answering R function is ifelse() whose name is remarkably descriptive. The ifelse() function takes three arguments. The first is the question to be asked, the second is the value to return if the answer is “yes,” and the third is the value to return for a “no” answer. g &lt;- makeFun( ifelse(x &lt; 1, x, NaN) ~ x) slice_plot(g(x) ~ x, domain(x = c(-2, 2))) What takes getting used to here is the expression x &lt; 1 which is a question not a statement of fact. There’s no standard traditional mathematical notation for questions, although some people use a question mark as in \\(x \\stackrel{?}{&lt;} 1\\). The table shows computer notation for some common sorts of questions. 1520 R notation English x &gt; 2 “Is \\(x\\) greater than 2?” y &gt;= 3 “Is \\(y\\) greater than or equal to 3?” x == 4 “Is \\(x\\) exactly 4?” 2 &lt; x &amp; x &lt; 5 “Is \\(x\\) between 2 and 5?”20 x &lt; 2 | x &gt; 6 “Is \\(x\\) either less than 2 or greater than 6?” abs(x-5) &lt; 2 “Is \\(x\\) within two units of 5?” 13.2 Basic piecewise functions Having an ability to split up the domain of a function and provide different formula for each of the pieces allows us to construct piecewise functions. To illustrate, the function \\(h(x) \\equiv |x|\\). You’ll recognize this as the “absolute value” function. The intuitive algorithm is to “strip the negative sign, if any” from the input. But with the ability to divide the domain into pieces, we gain access to a less mysterious sort of arithmetic operation and can re-write \\[h(x) \\equiv \\left\\{ \\begin{array}{ll} x &amp; \\text{for}\\ 0 \\leq x \\\\ \\text{- x} &amp; \\text{otherwise}\\\\\\end{array} \\right.\\] Or, in computer notation h &lt;- makeFun(ifelse(x &gt;= 0, x, -x) ~ x) Note that the absolute value function is built-in to R in the form of the abs() function. Less familiar is the Heaviside function which has important uses in physics and engineering: \\[\\text{Heaviside}(x) \\equiv \\left\\{ \\begin{array}{cl} 1 &amp; \\text{for}\\ 0 \\leq x \\\\0 &amp; \\text{otherwise}\\end{array} \\right.\\] In computer notation, this is Heaviside &lt;- makeFun(ifelse(x &lt; 0, 0, 1) ~ x) The vertical gap between the two pieces is called a discontinuity. Intuitively, you cannot draw a discontinuous function without lifting the pencil from the paper. The Heaviside function has a discontinuity at \\(x=0\\). Similarly, the ramp function (aka “ReLU”) is a kind of one-sided absolute value: \\[\\text{ramp}(x) \\equiv \\left\\{ \\begin{array}{cl} x &amp; \\text{for}\\ 0 \\leq x\\\\0 &amp; \\text{otherwise}\\end{array} \\right.\\] Or, in computer notation: ramp &lt;- makeFun(ifelse(0 &lt; x, x, 0) ~ x) slice_plot(ramp(x) ~ x, domain(x=c(-3, 3))) A linear combination of two input-shifted ramp functions gives a piecewise version of the sigmoid. sig &lt;- makeFun(ramp(x+0.5) - ramp(x-0.5) ~ x) slice_plot(sig(x) ~ x, domain(x=c(-3, 3))) Figure 13.1 is a graph of monthly natural gas use in the author’s household versus average temperature during the month. (Natural gas is measured in cubic feet, appreviated ccf.) 1530 Figure 13.1: The amount of natural gas used for heating the author’s home varies with the outside temperature. The graph looks somewhat like a hockey stick. A sloping straight-line dependence of ccf on temperature for temperatures below \\(60^\\circ\\)F and constant for higher temperatures. The shape originates from the dual uses of natural gas. Gas is used for cooking and domestic hot water, the demand for which is more of less independent of outdoor temperature at about 15 ccf per month. Gas is also used for heating the house, but that’s needed only when the temperature is less than about \\(60^\\circ\\)F. We can accomplish the hockey-stick shape with a linear combination of the ramp() function and a constant. The ramp function represents gas used for heating, the constant is the other uses of gas (which are modeled as not depending on temperature. Overall, the model is \\[\\text{gas_ccf}(x) \\equiv 4.3\\, \\text{ramp}(62-x) + 15\\] Even simpler is the model for the other uses of natural gas: \\[\\text{other_ccf}(x) \\equiv 15\\]. Our last example concerns a bit of familiar technology: music synthesis. Generating a pure tone electronically is easily done using a sinusoid. Generating a note with rich instrumental timbre can be accomplished by a linear combination of sinusoids. Of course, the note will be localized in time. This could be accomplished by multiplying the sinusoids by a gaussian function envelope. 1540 It turns out that the gaussian function, dnorm(), does not generate a realistic sound. Instead, a more complicated envelope is used, such as the ADSR function shown in Figure 13.2. The function has six (!) parameters: the time the key is pressed, the duration A of the “attack” phase when the sound amplitude is increasing in response to the impulse imposed on the key, a decay of duration D to an output level S that lasts until the key is released, then a decay to zero over duration R. It’s reasonable to think of the D and S phases as a piecewise linear approximation to exponential decay. Figure 13.2: The ADSR envelope function used in music synthesis consists of 6 pieces including zero output before the key is pressed and after the pulse ends. Source 13.3 Exercises Exercise 13.05: EDKYV The function bigger() is defined piecewise in terms of two extremely simple functions. Each of the two simple functions has a contour plot with contours that are parallel. The piecewise combination of the simple functions has a more complicated contour plot, with each simple function’s parallel contours showing up in half of the domain. We’ll call these “pieces” of the domain. bigger &lt;- makeFun(ifelse(y &gt; x, y, x) ~ x + y) contour_plot(bigger(x,y) ~ x+y, domain(x=c(-2,2), y=c(-2,2))) Question A Which of the following best describes the two pieces of the domain? One is above and to the left of the line of identity (that is, \\(y=x\\)) and the other is below and to the right of that line.Nice!  One is \\(x &gt; 0\\) and the other \\(x \\leq 0\\)︎✘ One is \\(x &gt; 0\\) and the other \\(y \\leq 0\\)︎✘ Exercise 13.07: E9e7c6 library(Zcalc) If you are unlucky and develop a serious ear or throat or other infection, and if the infection is bacterial and not viral, you may be prescribed antibiotics. You probably know how it goes. You go to the pharmacy to pick up a bottle of pills. There might be anywhere between 10 pills and 40. The directions will certainly tell you to make sure to finish the bottle; to take the full course of medication. It may say take a pill twice a day, or three times, or every six hours, perhaps with food. The details of this regimen are determined largely by the details of whether food inhibits or buffers absorption of the medicine and by the efficiency by which your body metabolizes the medicine and then removes it from your blood via your liver. Modeling this process—often called the *pharmacokinetics of the drug—is an important step in drug development. A simple but effective model of the drug concentration over time is a piecewise function: zero before you take the pill, then an exponential decay from an initial level of one unit after you take the pill. pill &lt;- makeFun(ifelse(t &lt; 0, 0, exp(-k * t)) ~ t, k = log(2)/1.5) The shape of the pill() function is seen in Figure 13.3. Another part of the model is the therapeutic threshold, the minimal concentration for medical effectiveness. Keep in mind that this is a model. In reality, the drug not is absorbed instantaneously as in the model, and the medical effectiveness varies smoothly with concentration rather than being an all-or-nothing affair. slice_plot(pill(t) ~ t, domain(t=-2:10)) %&gt;% gf_hline(yintercept = ~ 0.25, color=&quot;magenta&quot;) %&gt;% gf_text(0.25 ~ 8, label=&quot;Therapeutic threshold&quot;, color=&quot;magenta&quot;, vjust=0, nudge_y=0.02) %&gt;% gf_labs(y=&quot;Drug availability&quot;, x = &quot;Time (hrs)&quot;) Figure 13.3: A simple illustrative model of drug availability from taking a unit dose at time zero. The therapeutic threshold depends on the drug: 0.25 is shown here. The critical features of the model are the half-life of the drug in the body and the therapeutic threshold, both of which depend on the particular drug in question. Question A What is the half life of the drug depicted in the Figure 13.3?     60 minutes︎✘        90 minutes\\(\\heartsuit\\ \\)       120 minutes︎✘        180 minutes︎✘ Figure 13.3 shows the availability from a single pill. The goal of taking multiple pills, spread out over time, is to keep the drug availability above the therapeutic threshold for an extended time, e.g. 10 days. There are three parameters to the therapy: how often you take a pill, and the dose delivered by a single pill, and the medicine’s half-life. Question B Occasionally, the prescription directs you to take a single pill once a day. Suppose the half-life of the medicine is 3 hours. How big would the dose A need to be in order to keep the availability above a threshold of 0.25 for a 24-hour period?     2 units︎✘        16 units︎✘        64 units\\(\\heartsuit\\ \\)       1024 units︎✘ Let’s explore a familiar-sounding directive: Take one pill every six hours. We can model this by a linear combination of time-shifted pill() functions. Each pill provides a dose of size A. six_hours &lt;- makeFun(A*pill(t, k) + A*pill(t-6, k) + A*pill(t-12, k) + A*pill(t-18, k) + A*pill(t-24, k) ~ t, k=log(2)/3, A = 1) slice_plot(six_hours(t) ~ t, domain(t=-1:24)) The graph shows that the drug is above the therapeutic threshold (0.25) for the entire first day. From the graph of drug availability versus time, do you think continuing the one-pill-every-6-hours regimen will continue to keep the drug level over the therapeutic threshold for the remainder of the course of treatment? Explain why or why not. Let’s switch to an one-pill every 8 hour regimen, the pills being taken at midnight, 8am, and 4pm, … How big a dose A will be needed to keep the drug availability above the therapeutic threshold for the entire course of treatment? (Hint: Construct a function analogous to six_hours() and plot out the drug availability over the 24 hours of the first day. Then vary the dose A until you find the minimum dose that keeps the availability over the threshold of 0.25 for the entire day.) Suppose the instructions were to take 2 pills when you start treatment and then an additional pill every 8 hours. How big a dose A would be needed to keep the drug availability above the therapeutic threshold for the entire course of treatment? Which of the three regimens described (6-hour, 8-hour, 8-hour-double-first-dose) involves the smallest total dose? (The total dose is the sum of the doses for each pill administration.) One that does produce a number is NaN^0.↩︎ Literally, “Is \\(x\\) both greater than 2 and less than 5?”↩︎ "],["modeling-cycle.html", "Chapter 14 Modeling cycle 14.1 Example: Cooling water 14.2 Example: The tides 14.3 Modeling project", " Chapter 14 Modeling cycle Effective modelers treat models with skepticism. They look for ways in which models fail to capture salient features of the real world. They have an eye out for deviations between what their models show and what they believe they know about the system being modeled. They consider ways in which the models might not serve the purpose for which they were developed. 1560 When modelers spot a failure or deviation or lack of proper utility, they might discard the model but more often they make a series of small adjustments, tuning up the model until is successfully serves the purposes for which it is intended. Thus, modeling is a cyclic process of creating a model, assessing the model, and revising the model. The process comes to a sort of preliminary end when the model serves its purposes. But even then, models are often revised to check whether the results are sensitive to some factor that was not included or to check whether some component that was deemed essential really is so. 14.1 Example: Cooling water Looking back on the exponential fitted to the cooling water data in Section 8.3, it looks like our original estimate of the half-life is a bit too small; the data doesn’t seem to decay at the rate implied by \\(k = -0.0277\\). Perhaps we should try a somewhat slower decay, say \\(k = -0.2\\) and see if that improves things. In the cooling water example, we’re using only a subset of the data collected by Prof. Wagon. The next commands re-create that subset so that you can work with it. They also plot the data and an exponential model. 1565 # reconstruct the sample set.seed(101) Stans_data &lt;- CoolingWater %&gt;% sample_n(20) # Plot the sample and overlay a model gf_point(temp ~ time, data=Stans_data) %&gt;% gf_lims(y = c(20, NA)) %&gt;% slice_plot(25 + 83.3*exp(-.0277*time) ~ time, color=&quot;dodgerblue&quot;) See if \\(k=-0.02\\) provides a better fit to the model. (You can add another slice_plot() to be able to compare the original and \\(k=-0.02\\) models.) Later in this course, we’ll study optimization. There are optimization techniques for directing the computer to refine the parameters to best match the data. Just to illustrate, here’s what we get: refined_params &lt;- fitModel(temp ~ A + B*exp(k*time), data = Stans_data, start = list(A = 25, B = 83.3, k = -0.0277)) coef(refined_params) ## A B k ## 25.92628463 60.69255269 -0.01892572 new_f &lt;- makeFun(refined_params) gf_point(temp ~ time, data = Stans_data) %&gt;% slice_plot(new_f(time) ~ time, color=&quot;dodgerblue&quot;) Figure 14.1: Polishing the fit using the rough model as a starting point. The refined parameters give a much better fit to the data than our original rough estimates by eye. We had two rounds of the modeling cycle. First, choice of an exponential model and a rough estimate of the parameters A, B, and \\(k\\). Second, refinement of those parameters using the computer. Looking at the results of the second round, the experienced modeler can see some disturbing discrepancies. First, the estimated baseline appears to be too high. Related, the initial decay of the model function doesn’t seem to be fast enough and the decay of the model function for large \\(t\\) appears to be too slow. Prof. Stan Wagon noticed this. He used additional data to fill in the gaps for small \\(t\\) and refined his model further by changing the basis functions in the linear combination. He hypothesized that there are at least two different cooling processes. First, the newly poured water raises the temperature of the mug itself. Since the water and mug are in direct contact, this is a fast process. Then, the complete water/mug unit comes slowly into equilibrium with the room temperature. 1567 The newly refined model was a even better match to the data. But nothing’s perfect and Prof. Wagon saw an opportunity for additional refinement based on the idea that there is a third physical mechanism of cooling: evaporation from the surface of the hot water. Prof. Wagon’s additional circuits of the modeling cycle were appropriate to his purpose, which was to develop a detailed understanding of the process of cooling. For other purposes, such as demonstrating the appropriateness of an exponential process or interpolating between the data points, earlier cycles might have sufficed. Here’s a graph of the model Prof. Wagon constructed to match the data. Figure 14.2: A model that combines three exponentials provides an excellent fit. This is an excellent match to the data. But … matching the data isn’t always the only goal of modeling. Prof. Wagon wanted to make sure the model was physically plausible. And looking at the refined parameters, which include two exponential processes with parameters \\(k_1\\) and \\(k_2\\), he saw something wrong: But what can we make of \\(k_1\\), whose [positive value] violates the laws of thermodynamics by suggesting that the water gets hotter by virtue of its presence in the cool air? The most likely problem is that our simple model (the proportionality assumption) is not adequate near the boiling point. There are many complicated factors that affect heat transportation, such as air movement, boundary layer dissipation, and diffusion, and our use of a single linear relationship appears to be inadequate. In the next section [of our paper] we suggest some further experiments, but we also hope that our experiments might inspire readers to come up with a better mathematical model. The modeling cycle can go round and round! 14.2 Example: The tides In Section 8.2 we looked at a sinusoid model of tide levels in Rhode Island. We left unresolved how to refine the estimate of the period \\(P\\) and find the time offset \\(t_0\\) in the sinusoidal model \\[\\text{tide}(t) \\equiv A \\sin\\left(\\frac{2\\pi}{P} (t-t_0)\\right) + B\\] 1040 \\[{\\color{blue}{\\text{tide}(t)} \\equiv 1.05 + 0.55 \\sin(2\\pi (t - t_0)/11)}\\] The new parameter, \\(t_0\\), should be set to be the time of a positive-going crossing of the baseline. Looking at the tide data (black) plotted in Figure 14.3 we can pick out such a crossing at about time = 17. Happily, changing the phase does not itself necessitate re-estimating the other parameters: baseline, amplitude, period. This model, incorporating the phase, has been graphed in \\(\\color{blue}{\\text{blue}}\\). Figure 14.3: Shifting the phase of the sinusoid gives the flexibility needed to align the peaks and troughs of the model with the data. Performing this alignment for one peak makes it clear that the period is wrong. For some modeling purposes, such as prediction of future tides, the phase information is essential. For others, say, description of the amplitude of the tides, not. But getting the phase roughly right can help point out other problems. For instance, in the left panel of Figure 14.3 the blue model is roughly aligned with the data. Not at all so in the right panel. What leads to the discrepancy is a bad estimate for the period. 13 hours is roughly right, but over a five-day period the error accumulates until, in the right panel, the model has a trough where the data peak, and vice versa. Although the blue sinusoid is not perfect, having it for comparison suggests that the previously estimated period of 13 hours is too long. We can shorten the period gradually in our model until we find something that better matches the data. For example: Figure 14.4 shows that a period of 12.3 hours is a good match to the data. With this refinement the model is \\[{\\color{green}{\\text{tide}(t)} \\equiv 1.05 + 0.55 \\sin(2\\pi (t - 17)/12.3)}\\] Figure 14.4: With the phase about right, a better estimate can be made of the period: 12.3 hours. We might call it quits with the model in Figure 14.4. But once we have a pretty good model fit, it’s easy to polish the parameter estimates, letting the computer do the tedious work of trying little tweaks to see if it can improve the fit. The R/mosaic fitModel() can do this tweaking for us. As the following commands show, fitModel() takes a tilde expression as input. To the left of the tilde goes the name of the function output in the data frame being used. The right side is a formula for the model, with names used for each parameter and using the names of inputs from the data frame. The second argument is the data frame. The third argument is used to convey an estimate for each parameter; that estimate should be pretty good if fitModel() is to be able to refine it. The output from fitModel() is a function, which we’re naming tide_mod(). tide_mod &lt;- fitModel(level ~ A + B*sin(2*pi*(hour-t0)/P), data = RI_tide, start=list(A=1.05, B=0.55, t0=17, P=12.3)) coef(tide_mod) ## A B t0 P ## 1.0220540 0.4998367 15.3899905 12.5593556 The command coef(tide_mod) displays the parameters found by fitModel() which will be an improvement—perhaps a big improvement, perhaps not—on our original estimates. These new parameters differ only slightly from the ones shown in Figure 14.4, but the match to the data with the new coefficients is discernably better, even by eye. Figure 14.5: Polishing the parameters of the sinusoid This last model seems capable of making reasonable predictions, so if we collected up-to-date data we might be able to fit a new model to predict the tide level pretty accurately a few days ahead of time. Also, the excellent alignment of the model peaks with the data tell us that the cyclic tide has a period that is constant, at least so far as we can tell. 1576 With the period estimate \\(P=12.56\\) hours, we can go looking for other phenomena that might account for the tides. The period of the day-night cycle is, of course 24 hours. So the tides in Providence come in and out twice a day. But not exactly. Something else must be going on. Isaac Newton was the first to propose that the tides were caused by the gravitational attraction of the Moon. A complete cycle of the Moon—moon rise to moon rise—takes about 50 minutes longer than a full day: the Earth revolves once every 24 hours, but in that time the Moon has moved a bit further on in its orbit of the Earth. So the Moon’s period, seen from a fixed place on Earth is about 24.8 hours. Half of this, 12.4 hours, is awfully close to our estimate of the tidal period: 12.56 hours. The difference in periods, 8 minutes a day, might be hard to observe over only 4 days. Maybe with more data we’d get a better match between the tides and the moon. This is the modeling cycle at work: Propose a model form (a sinusoid), adjust parameters to match what we know (the Providence tide record), compare the model to the data, observe discrepancies, propose a refined model. You can stop the model when it is giving you what you need. The period 12.56 hour model seems good enough to make a prediction of the tide level a few days ahead, and is certainly better than the “two tides a day” model. But our model is not yet able to implicate precisely the Moon’s orbit in tidal oscillations. Discrepancies between a model and data play two roles: they help us decide if the model is fit for the purpose we have in mind and they can point the way to improved models. That the tidal data deviates from the steady amplitude of our model can be a clue for where to look next. It’s not always obvious where this will lead. Historically, careful analysis of tides led to a highly detailed, highly accurate model: a linear combination of sinusoids with periods near a half-day 12.42 , 12.00, 12.66, and 11.97 hours as well components with periods that are about a day long 23.93, 25.82, 24.07, 26.87, and 24.00 hours. A tide-prediction model is constructed by finding the coefficients of the linear combination; these differ from locale to locale. There is no global model of tides, but rather a framework of linear combinations of sinusoids of different periods. What customizes the framework to the tides in a particular locale is the coefficients used in the linear combination. 1577 14.3 Modeling project The data frame SunsetLA records the number of minutes after 4 pm until the sun sets in Los Angeles, CA over a 4-year interval from January 2010 (month 1) through December 2013 (month 48). Open a sandbox and make a plot of sunset time versus month. gf_point(Minutes ~ Month, data = SunsetLA) %&gt;% gf_line() We’re using both gf_point() and gf_line(). With data that oscillates up and down, connecting the data points with lines makes it easier to see the pattern. Question C What is the range of the number of minutes until sunset over the whole 4-year period? 40 to 190 minutesNice!  120 minutes︎✘ A range is an interval spanned by two numbers. 40 to 180 minutes︎✘ The largest values are half a tick mark up from 180. Tick marks are spaced by 20 minutes. 0 to 48 months︎✘ That’s the domain. The range is along the vertical axis. Question D The data fall nicely on a sine-shaped curve. What is the period of that sine? 6 months︎✘ Look at the number of months from one peak to another. 11 months︎✘ Look more carefully. And remember that the change in length of day is an annual phenomenon. 12 monthsGood.  12 minutes︎✘ Period refers to an interval on the domain of the function, not the range. The function \\[\\text{sunset}(\\text{Month}) \\equiv A \\sin(2 \\pi\\, \\text{Month} / 12) + C\\] is a linear combination of two functions: The constant function one(Month) The sine function sin(2*pi*Month/12) The two functions are scaled by \\(C\\) and \\(A\\), respectively. Make rough but reasonable numeric estimates for \\(C\\) and \\(A\\) from the data. Then, in the sandbox, define the sunset() function using the numerical estimates in the linear combination. Plot your function as a layer on top of the data. (Pipe the gf_point() layer to slice_plot().) sunset &lt;- makeFun(A + C*sin(2*pi*(Month - offset)/12), A = __your estimate__, C = __your estimate__, offset=0) gf_point(Minutes ~ Month, data = SunsetLA) %&gt;% gf_line() %&gt;% slice_plot(sunset(Month) ~ Month) The domain for slice_plot() is inherited to that implied by the SunsetLA data. Notice that the input name in slice_plot() corresponds to that established in gf_point(). Question E Your sunset() function should be a pretty good match to the data except for one thing. What is that thing? The sunset() function has a completely different range than the data.︎✘ This won’t be the case if you have estimated \\(C\\) and \\(A\\) correctly. The period of the sunset() function doesn’t match the data.︎✘ Did you use sin(2*pi*Month/12)? If so, the period should be right. There is a horizontal time shift between sunset() and the data.Right!  We’re going to fix the problem with sunset() by defining a time offset to use as a reference. For a sine function, a suitable time offset is the value along the horizontal axis when the phenomenon being modeled crosses \\(C\\) with a positive slope. There are 4 such points along the horizontal axis readily identifiable in the data. (They may not be at an integer value of Month.) Question F Which of these is a suitable value for the time offset? 0 months︎✘ That’s not a time when the data suggest that \\(C\\) is being crossed. 19 months︎✘ That’s a maximum, not a crossing of \\(C\\). 21.5 months︎✘ That’s a crossing of \\(C\\), but not one with a positive slope. 15.5 monthsCorrect. This is a good rough value. Since the period is 12 months, you could equally well have said the offset is 3.5 months. In the original scaffolding, the value of offset was zero. Change that to match your answer to the previous question. Plot out the modified sunset() function and confirm that it is a much better match to the data than the original (that is, the one without the time offset). You can “tune” your function by tweaking the numerical values of the \\(A\\), \\(C\\), and \\(offset\\) parameters until you get a solid match. Alternatively, you can use fitModel() to do the tuning for you. Plug in your estimates (a.k.a. “guesses”) for the parameters in place of the ___ in the following. Then run the code. You’ll see your estimate of the function compared to the result of having the computer refine your estimate. Chances are, the computer does a better job of stringing the function through the data. ## rough estimates from graph rough_A &lt;- __estimated_A__ rough_C &lt;- __estimated_C__ rough_offset &lt;- __estimated_offset___ guessed_fun &lt;- makeFun(A*sin(2*pi*(Month - offset)/12) + C ~ Month, A = rough_A, C = rough_C, offset = rough_offset) tuned_fun &lt;- fitModel(Minutes ~ A*sin(2*pi*(Month - offset)/12) + C, data = SunsetLA, start = list(A = rough_A, C = rough_C, offset = rough_offset) ) gf_point(Minutes ~ Month, data = SunsetLA) %&gt;% gf_line(color = &quot;dodgerblue&quot;) %&gt;% slice_plot(tuned_fun(Month) ~ Month) %&gt;% slice_plot(guessed_fun(Month) ~ Month, color = &quot;orange3&quot;) Perhaps you were expecting the tuned sine function to match the data exactly. It does not. One reason for this is that the Earth’s orbit around the Sun is not exactly circular. The sine function is only a model of the phenomenon, good for some purposes and not for others. For a more complete explanation, see this article on Wikipedia. (Thomas Swalm contributed to this project.) "],["magnitudes.html", "Chapter 15 Magnitudes 15.1 Counting digits 15.2 Using digit() to understand magnitude 15.3 Quantity and magnitude 15.4 Composing \\(\\ln()\\) 15.5 Magnitude graphics 15.6 Reading logarithmic scales 15.7 Fractional digits (optional) 15.8 Exercises", " Chapter 15 Magnitudes Undoubtedly you are comfortable with the standard way of writing numbers, for instance 33 or 512 or 1051. Elementary school students master the comparison of such numbers. Which is greater: 512 or 33? Which is less, 1051 or 512? You can answer such questions at a glance; the comparison can be accomplished simply by counting the number of digits. 1051 has four digits, so it is larger than the three-digit number 512. There are two digits in 33, so it smaller than 512. When two numerals have the same number of digits—say, 337 and 512—you can’t answer the “greater than” question by simple counting. Instead, you proceed from left to right and compare the number in each place. So, for 512 and 337, you compare 5 to 3 and … since 5 is greater than 3, 512 is greater than 337. If the two leading digits are the same, go on to the next digit and so on for all the digits in turn. 1600 Things were not always this simple. Our number system that uses place and Arabic numerals is a human invention. An example of an earlier number system is Roman numerals. Here, comparison is hard. For instance, which of these three numbers is bigger? \\[\\text{MLI or CXII or XXXIII}\\] The typographically shorter number is the largest, and vice versa. Even when two Roman numerals have the same length, it’s not trivial to compare them on a place-by-place basis. For instance, IC is about fifteen times bigger than VI, even though I is much smaller than V. 15.1 Counting digits Digit counting provides an easy, fast way to perform many calculations, at least approximately. What is \\(\\sqrt{10000}\\)? There are five digits, and the square root of a number will have “half the number of digits.” So, \\(\\sqrt{10000} = 100\\). What is \\(10 \\times 34\\)? Easy: 340. Just append the one zero from 10 to the end of 34. What is \\(1000 \\times 13\\)? Just as easy: 13,000. We even punctuate written numbers with commas and a period in order to facilitate counting digits. Imagine having a digit counting function called digit(). It takes a number as input and produces a number as output. We don’t have a formula for digit(), but for some inputs the output can be calculated just be counting. For example: digit(10) \\(\\equiv\\) 1 digit(100) \\(\\equiv\\) 2 digit(1000) \\(\\equiv\\) 3 … and so on … digit(1,000,000) \\(\\equiv\\) 6 … and on. The digit() function easily can be applied to the product of two numbers. For instance: digit(1000 \\(\\times\\) 100) = digit(1000) + digit(100) = 3 + 2 = 5. Similarly, applying digit() to a ratio gives the difference of the digits of the numerator and denominator, like this: digit(1,000,000 \\(\\div\\) 100) = digit(1,000,000) - digit(100) = 6 - 2 = 4 15.2 Using digit() to understand magnitude We haven’t shown you the digit() function for anything but the handful of discrete inputs listed above. It was a heroic task to produce the continuous version of digit(). The method is sketched out in 15.7. In practice, digit() is so useful that it could well have been one of our basic modeling functions: \\[\\text{digit(x)} = 2.302585 \\ln(x)\\] or, in R, log10(). We elected \\(\\ln()\\) rather than digit() for reasons that will be seen when we study differentiation. 15.3 Quantity and magnitude The familiar quantity 60 miles-per-hour is written as a number (60 here) followed by units. The quantity is neither the number nor the units: it is the combination of the two. For instance, 100 is obviously not the same as 60. And miles-per-hour is not the same as kilometers-per-hour. Yet, 60 miles-per-hour is almost exactly the same quantity as 100 kilometers-per hour.21 1610 6, 60, 600, and 6000 miles-per-hour are quantities that differ in size by orders of magnitude. Such differences often point to a substantial change in context. A jog is 6 mph, a car on a highway goes 60 mph, a cruising commercial jet goes 600 mph, a rocket passes through 6000 mph on its way to orbital velocity. In everyday speech, the difference between 60 and 6 is 54; just subtract. Modelers and scientists routinely mean something else: the difference between 60 and 6 is “one order of magnitude.” Similarly, 60 and 6000 are different by “two orders of magnitude,” and 6 and 6000 by three orders of magnitude. In everyday English, we have phrases like “a completely different situation” or “different in kind” or “qualitatively different” (note the l) to indicate substantial differences. “Different orders of magnitude” expresses the same kind of idea but with specific reference to quantity. The use of factors of 10 in counting orders of magnitude is arbitrary. A person walking and a person jogging are on the edge of being qualitatively different, although their speeds differ by a factor of only 2. Aircraft that cruise at 600 mph and 1200 mph are qualitatively different in design, although the speeds are only a factor of 2 apart. A professional basketball player (height 2 meters or more) is qualitatively different from a third grader (height about 1 meter). Modelers develop an intuitive sense for when to think about difference in terms of a subtractive difference (e.g. 60 - 6 = 54) and when to look at orders of magnitude (e.g. 60-to-6 is one order of magnitude). This seems to be a skill based in experience and judgment, as opposed to a mechanical process. One clue that thinking in terms of orders of magnitude is appropriate is when you are working with a set of objects whose range of sizes spans one or many factors of 2. Comparing baseball and basketball players? Probably no need for orders of magnitudes. Comparing infants, children, and adults in terms of height or weight? Orders of magnitude may be useful. Comparing bicycles? Mostly they fit within a range of 2 in terms of size, weight, and speed (but not expense!). Comparing cars, SUVs, and trucks? Differences by a factor of 2 are routine, so thinking in terms of order of magnitude is likely to be appropriate. Another clue is whether “zero” means “nothing.” Daily temperatures in the winter are often near “zero” on the Fahrenheit or Celcius scales, but that in no way means there is a complete absence of heat. Those scales are arbitrary. Another way to think about this clue is whether negative values are meaningful. If so, thinking in terms of orders of magnitude is not likely to be useful. You may have guessed that digits() is handy for computing differences in terms of orders of magnitude. Here’s how: 1620 Make sure that the quantities are expressed in the same units. Calculate the difference between the digits() of the numerical part of the quantity. What is the order-of-magnitude difference in velocity between a snail and a walking human. A snail slides at about 1 mm/sec, a human walks at about 5 km per hour. Putting human speed in the same units as snail speed: \\[5 \\frac{km}{hr} = \\left[\\frac{1}{3600} \\frac{hr}{sec}\\right] 5 \\frac{km}{hr} = \\left[10^6 \\frac{mm}{km}\\right] \\left[\\frac{1}{3600} \\frac{hr}{sec}\\right] 5 \\frac{km}{hr} = 1390 \\frac{mm}{sec} \\] Calculating the difference in digits() between 1 and 1390: log10(1390) - log10(1) ## [1] 3.143015 So, about 3 orders of magnitude difference in speed. To a snail, we walking humans must seem like rockets on their way to orbit! Animals, including humans, go about the world in varying states of illumination, from the bright sunlight of high noon to the dim shadows of a half moon. To be able to see in such diverse conditions, the eye needs to respond to light intensity across many orders of magnitude. The lux is the unit of illuminance in the Système international. This table22 shows the illumination in a range of familiar outdoor settings: Illuminance Condition 110,000 lux Bright sunlight 20,000 lux Shade illuminated by entire clear blue sky, midday 1,000 lux Typical overcast day, midday 400 lux Sunrise or sunset on a clear day (ambient illumination) 0.25 lux A full Moon, clear night sky 0.01 lux A quarter Moon, clear night sky For a creature active both night and day, they eye needs to be sensitive over 7 orders of magnitude of illumination. To accomplish this, eyes use several mechanisms: contraction or dilation of the pupil accounts for about 1 order of magnitude, photopic (color, cones) versus scotopic (black-and-white, rods, nighttime) covers about 3 orders of magnitude, adaptation over minutes (1 order), squinting (1 order). 15.4 Composing \\(\\ln()\\) The logarithm is the inverse of the exponential function. In other words, \\[\\ln(e^x) = x\\ \\ \\text{and}\\ \\ e^{\\ln(x)} = x\\] Think about this in terms of the kinds of quantities that are the input and output to each function. 1630 Logarithm: The input is a quantity, the output is the magnitude of that quantity. Exponential: The input is a magnitude, the output is the quantity with that magnitude. 15.5 Magnitude graphics In order to display a variable from data that varies over multiple orders of magnitude, it helps to plot the logarithm rather than the variable itself. Let’s illustrate using the Engine data frame, which contains measurements of many different internal combustion engines of widely varying size. For instance, we can graph engine RPM (revolutions per second) versus enging mass, as in Figure 15.1. gf_point(RPM ~ mass, data = Engines) Figure 15.1: Engine RPM versus mass for 39 different enginges plotted on the standard linear axis. In the graph, most of the engines have a mass that is … zero. At least that’s what it appears to be. The horizontal scale is dominated by the two huge 100,000 pound monster engines plotted at the right end of the graph. Plotting the logarithm of the engine mass spreads things out, as in Figure 15.2. gf_point(RPM ~ mass, data = Engines) %&gt;% gf_refine(scale_x_log10()) Figure 15.2: Engine RPM versus mass on semi-log axes. Note that the horizontal axis has been labelled with the actual mass (in pounds), with the labels evenly spaced in terms of their logarithm. This presentation, with the horizontal axis constructed this way, is called a semi-log plot. When both axes are labeled this way, we have a log-log plot, as shown in Figure 15.3. gf_point(RPM ~ mass, data = Engines) %&gt;% gf_refine( scale_x_log10(), scale_y_log10() ) Figure 15.3: Engine RPM versus mass on log-log axes. Semi-log and log-log axes are widely used in science and economics, whenever data spanning several orders of magnitude need to be displayed. In the case of the engine RPM and mass, the log-log axis shows that there is a graphically simple relationship between the variables. Such axes are very useful for displaying data, but can be hard for the newcomer to read quantitatively. For example, calculating the slope of the evident straight-line relationship in Figure 15.3 is extremely difficult for a human reader and requires translating the labels into their logarithms. Robert Boyle (1627-1691) was a founder of modern chemistry and of the scientific method in general. As any chemistry student already knows, Boyle sought to understand the properties of gasses. His results are summarized in Boyle’s Law. The data frame Boyle contains two variables from one of Boyle’s experiments as reported in his lab notebook: pressure in a bag of air and volume of the bag. The units of pressure are mmHg and the units of volume are cubic inches.23 Famously, Boyle’s Law states that, at constant temperature, the pressure of a constant mass of gas is inversely proportional to the volume occupied by the gas. Figure 15.4 shows a cartoon of the relationship. Figure 15.4: A cartoon illustrating Boyle’s Law. Source: NASA Glenn Research Center Figure 15.5 plots out Boyle’s actual experimental data. I gf_point(pressure ~ volume, data = Boyle) %&gt;% gf_lm() Figure 15.5: A plot of Boyle’s pressure vs volume data on linear axes. The straight line model is a poor representation of the pattern seen in the data. You can see a clear relationship between pressure and volume, but it’s hardly a linear relationship. Plotting Boyle’s data on log-log axes reveals that, in terms of the logarithm of pressure and the logarithm of volume, the relationship is linear. gf_point(log(pressure) ~ log(volume), data = Boyle) %&gt;% gf_lm() Figure 15.6: Plotting the logarithm of pressure against the logarithm of volume reveals a straight-line relationship. Figure 15.6 shows that Boyle’s log-pressure and log-volume data are a straight-line function. In other words: \\[\\ln(\\text{Pressure}) = a + b \\ln(\\text{Volume})\\] You can find the slope \\(b\\) and intercept \\(a\\) from the graph. For now, we want to point out the consequences of the straight-line relationship between logarithms. Exponentiating both sides gives \\[e^{\\ln(\\text{Pressure})} = \\text{Pressure} = e^{a + b \\ln(\\text{Volume})} = e^a\\ \\left[e^{ \\ln(\\text{Volume})}\\right]^b = e^a\\, \\text{Volume}^b\\] or, more simply (and writing the number \\(e^a\\) as \\(A\\)) \\[\\text{Pressure} = A\\, \\text{Volume}^b\\] A power-law relationship! 15.6 Reading logarithmic scales Plotting the logarithm of a quantity gives a visual display of the magnitude of the quantity and labels the axis as that magnitude. A useful graphical technique is to label the axis with the original quantity, letting the position on the axis show the magnitude. 1640 To illustrate, Figure 15.7(left) is a log-log graph of horsepower versus displacement for the internal combustion engines reported in the Engines data frame. The points are admirably evenly spaced, but it is hard to translate the scales to the physical quantity. The right panel in Figure 15.7 shows exactly the same data points, but now the scales are labeled using the original quantity. gf_point(log(BHP) ~ log(displacement), data = Engines) gf_point(BHP ~ displacement, data = Engines) %&gt;% gf_refine(scale_y_log10(), scale_x_log10()) Figure 15.7: Horsepower versus displacement from the Engines data.frame plotted with log-log scales. The tick marks on the vertical axis in the left pane are labeled for 0, 2.5, 5.0, 7.5, and 10. That doesn’t refer to the horsepower itself, but to the logarithm of the horsepower. The right pane has tick labels that are in horsepower at positions marked 1, 10, 100, 1000, 10000. Such even splits of a 0-100 scale are not appropriate for logarithmic scales. One reason is that 0 cannot be on a logarithmic scale in the first place since \\(\\log(0) = -\\infty\\). Another reason is that 1, 3, and 10 are pretty close to an even split of a logarithmic scale running from 1 to 10. It’s something like this: 1 2 3 5 10 x |----------------------------------------------------| 0 1/3 1/2 7/10 1 log(x) It’s nice to have the labels show round numbers. It’s also nice for them to be evenly spaced along the axis. The 1-2-3-5-10 convention is a good compromise; almost evenly separated in space yet showing simple round numbers. 15.7 Fractional digits (optional) So far, we have the digit() function in a tabular form: 1650 input output \\(\\vdots\\) \\(\\vdots\\) 0.01 -2 0.1 -1 1 0 10 1 100 2 1000 3 10,000 4 100,000 5 1,000,000 6 \\(\\vdots\\) \\(\\vdots\\) Here’s the point-plot presentation of the table: Figure 15.8: Connecting the data points for the digit function to make a continuous function. We’ve imagined digits() to be a continuous function so we’ve connected the gaps with a straight line. Now we have a function that has an output for any input between 0.01 and 1,000,000, for instance, 500,000. The angles between consecutive line segments give the function plotted in Figure 15.8 an unnatural look. Still, it is a continuous function with an output for any input even if that input is not listed in the table. Starting around 1600, two (now famous) mathematicians, John Napier (1550-1617) and Henry Briggs (1561-1630) had an idea for filling in gaps in the table. They saw the pattern that for any of the numbers \\(a\\) and \\(b\\) in the input column of the table \\[ \\text{digit}(a \\times b) = \\text{digit}(a) + \\text{digit}(b)\\] This is true even when \\(a=b\\). For instance, digit(10)=1 and digit(10\\(\\times\\) 10) = 2. Consider the question what is digit(316.2278)? That seems a odd question unless you realize that \\(316.2278 \\times 316.2278 = 100,000\\). Since digit(100000) = 5, it must be that digit(316.2278) = 5/2. Another question: what is digit(17.7828)? This seems crazy, until you notice that \\(17.7828^2 = 316.2278\\). So digit(17.78279) = 5/4. For a couple of thousand years mathematicians have known how to compute the square root of any number to a high precision. By taking square roots and dividing by two, it’s easy to fill in more rows in the digit()-function table. You get even more rows by noticing other simple patterns like \\[\\text{digit}(a/10) = \\text{digit}(a) -1 \\ \\ \\text{and} \\ \\ \\ \\text{digit}(10 a) = \\text{digit}(a) + 1\\] Here are some additional rows in the table input output Why? 316.2278 2.5 From \\(\\sqrt{\\strut100,000}\\) 17.17828 1.25 From \\(\\sqrt{\\strut 316.2278}\\) 4.21696 0.625 From \\(\\sqrt{\\strut 17.17828}\\) 31.62278 1.5 From 316.2278/10 3.162279 0.5 From 31.62278/10 You can play this game for weeks. We asked the computer to play the game for about half a second and expanded the original digit() table to 7975 rows. Figure 15.9 plots the expanded digits() function table. Figure 15.9: The digit function with more entries Now we have a smooth function that plays by the digit rules of multiplication. Henry Briggs and his assistants did a similar calculation by hand. Their work was published in 1617 as a table. Figure 15.10: Part of the first page of Henry Briggs table of logarithms The table was called the Chilias prima, Latin for “First group of one thousand.” True to its name, the table gives the output of digits() for the inputs 1, 2, 3, …, 998, 999, 1000. For instance, as you can see from the top row of the right-most column, digits(67) = 1.82607480270082. In everyday speech, 67 has two digits. The authors of Chilias prima sensibly didn’t use the name “digit()” for the function. They chose something more abstract: “logarithm().” Nowadays, this function is named \\(\\log_{10}()\\). In R, the function is called log10(). 1660 log10(67) ## [1] 1.826075 Our main use for \\(\\log_{10}()\\) (in R: log10()) will be to count digits in order to quickly compare the magnitude of numbers. The difference digits(\\(x\\)) - digits(\\(y\\)) tells how many factors of 10 separate the magnitude of the \\(x\\) and \\(y\\). Another important logarithmic/digit-counting function is \\(\\log_2()\\), written log2() in R. This counts how many *binary digits are in a number. For us, \\(\\log_2(x)\\) tells how many times we need to double, starting at 1, in order to reach \\(x\\). For instance, \\(\\log_2(67) = 6.06609\\), which indicates that \\(67 = 2\\times 2 \\times 2 \\times 2 \\times 2 \\times 2 \\times 2^{0.06609}\\) \\(\\log_2(x)\\) and \\(\\log_{10}(x)\\) are proportional to one another. One way to think of this is that they both count “digits” but report the results in different units, much as you might report a temperature in either Celsius or Fahrenheit. For \\(\\log_2(x)\\) the units of output are in bits. For \\(\\log_{10}(x)\\) the output is in decades. A third version of the logarithm function is called the natural logarithm and is denoted \\(\\ln()\\) in math notation and simply log() in R. We’ll need additional calculus concepts before we can understand what justifies calling \\(\\ln()\\) “natural.” 15.8 Exercises Exercise 15.2: ILXEG Open a SANDBOX and make the following log-log plot of horsepower (BHP) versus displacement (in cc, cubic-centimeters) of the internal combustion engines listed in the Engines data frame. gf_point(BHP ~ displacement, data = Engines) %&gt;% gf_refine(scale_x_log10(), scale_y_log10()) %&gt;% gf_labs(x = &quot;displacement (cc)&quot;) In the plot, you’ll see that the vertical axis has labels at 1, 10, 100, 1000, 10000. These numbers are hardly spaced evenly when plotted on a linear scale, but on the log scale they are evenly spaced. Since there is a factor of ten between consecutive labels, the interval between the labels is called a decade. On the horizontal axis, the labels are at 10, 1000, 100,000, and 10,000,000. Each of those intervals spans a factor of one hundred. For instance, from 1000 is one-hundred times 10, 100,000 is one-hundred times 1000, and so on. An interval of size 100 is said to span two decades, not 20 years but a factor of 100. Based on the log-log plot, answer these questions. Question A How many engines have a displacement of 1 liter or less? none︎✘ Perhaps you recognized that the left-most tick mark corresponds to a value of 1, and that no data points are 1 or smaller. But one liter corresponds to 1000 cc. 7︎✘ This is the number of engines with displacement of 10 cc or smaller. But one liter corresponds to 1000 cc. 14Right! Right. It’s the \\(10^3\\) tick that marks 1 liter, since 1 liter is 1000 cc. 25︎✘ That would be true if the cut-off were 10 liters. But it’s not. Question B Using the log-log plot, how many decades of BHP are spanned by the data? 4︎✘ Not a bad answer, but not the best one either. Notice that the smallest engine is about half a decade below 1 BPM, and the largest is about half a decade above 10,000 BPH 5Nice!  100︎✘ The number \\(10^{100}\\) is called a googol and is roughly how many particles (including photons, neutrinos, etc.) are in the universe. Imagine, quite contrary to fact, that 1 BHP could be generated by burning one molecule of fuel per second. Then as many fuel molecules as there are particles in the universe would have to be burned each second to power an engine at the high end of a span of 100 decades. Exercise 15.4: j3xe You have likely heard the phrase “exponential growth” used to describe the COVID-19 pandemic. Let’s explore this idea using actual data. The COVID-19 Data Hub is a collaborative effort of universities, government agencies, and non-governmental organizaions (NGOs) to provide up-to-date information about the pandemic. We’re going to use the data about the US at the whole-country level. (There’s also data at state and county levels. Documentation is available via the link above.) Perhaps the simplest display is to show the number of cumulative cases (the confirmed variable) and deaths as a function of time. We’ll focus on the data up to June 30, 2020. The plot shows confirmed cases in blue and deaths in tan. gf_line(deaths ~ date, data = Covid_US %&gt;% filter(date &lt; as.Date(&quot;2020-06-30&quot;)), color = &quot;orange3&quot;) %&gt;% gf_line(confirmed ~ date, color = &quot;blue&quot;) ::: Question A As of mid June, 2020 about how many confirmed cases were there? (Note that the labeled tick marks refer to the beginning of the month, so the point labeled Feb is February 1.) about 50,000︎✘ The number 1e6 means 1,000,000, that is, six zeros following the 1. about 200,000︎✘ The number 1e6 means 1,000,000, that is, six zeros following the 1. about 500,000︎✘ The number 1e6 means 1,000,000, that is, six zeros following the 1. about 1,000,000︎✘ Mid June is the tick mark after the mark labelled Jun. about 2,000,000Excellent!  about 5,000,000︎✘ Mid June is the tick mark after the mark labelled Jun. Here’s the same graphic as above, but taking the logarithm (base 10) of the number of cases (that is, confirmed) and of the number of deaths. Since we’re taking the logarithm of only the y-variable, this is called a “semi-log” plot. gf_point(log10(confirmed) ~ date, data = Covid_US %&gt;% filter(date &lt; as.Date(&quot;2020-06-30&quot;)), color = &quot;dodgerblue&quot;) %&gt;% gf_point(log10(deaths) ~ date, color = &quot;orange3&quot;) Up through the beginning of March in the US, it is thought that most US cases were in people travelling into the US from hot spots such as China and Italy and the UK, as opposed to contagion between people within the US. (Such contagion is called “community spread.”) So let’s look at the data representing community spread, from the start of March onward. Exponential growth appears as a straight-line on a semi-log plot. Obviously, the overall pattern of the curves is not a straight line. The explanation for this is that the exponential growth rate changes over time, perhaps due to public health measures (like business closures, mask mandates, etc.) The first (official) US death from Covid-19 was recorded was recorded on Feb. 29, 2020. Five more deaths occurred two days later, bringing the cumulative number to 6. Question B The tan data points for Feb 29/March 1 show up at zero on the vertical scale for the semi-log plot. The tan data point for March 2 is at around 2 on the vertical scale. Is this consistent with the facts stated above? No. The data contradict the facts.︎✘ Think about what it means to be 0 on the vertical scale. Yes. The vertical scale is in log (base 10) units, so 0 corresponds to 1 death, since \\(\\log_{10} 1 = 0\\).Nice!  No. The vertical scale doesn’t mean anything.︎✘ You can see from the plotting command what the quantity on the vertical axis is: log10(confirmed) for the blue dots and log10(deaths) for the tan. One of the purposes of making a semi-log plot is to enable you to compare very large numbers with very small numbers on the same graph. For instance, in the semi-log plot, you can easily see when the first death occurred, a fact that is invisible in the plot of the raw counts (the first plot in this exercise). Another feature of semi-log plots is that they preserve proportionality. Look at the linear plot of raw counts and note that the curve for the number of deaths is much shallower than the curve for the number of (confirmed) cases. Yet on the semi-log plot, the two curves are practically parallel. On a semi-log plot, the arithmetic difference between the two curves tells you what the proportion is between those curves. The parallel curves mean that the proportion is practically constant. Calculate what the proportion between deaths and cases was in the month of May. Here’s a mathematical hint: \\(\\log_{10} \\frac{a}{b} == \\log_{10} a - \\log_{10} b\\). We are interested in \\(\\frac{a}{b}\\). Question C What is the proportion of deaths to cases during the month of May? about 1%︎✘ This would correspond to a (vertical) difference between the curves of about 2 log10 units. Is it really that big? about 2%︎✘ This would correspond to a (vertical) difference between the curves of about 1.7 log units. Is it really that big? about 5%Excellent! On the semi-log plot, the deaths curve is about 1.2 log10 units lower than the cases curve. \\(10^{-1.2} = 0.063 = 6.3\\%\\)) separates the two curves. about 25%︎✘ I’m not really sure what could lead you to this answer. You’re making a mistake that I didn’t anticipate. about 75%︎✘ It’s true that in May log10(deaths) is about 5, and log10(cases) is about 6, and 5/6 is indeed roughly 75%. But, on a log scale, the proportion relates to the difference between logs, not the ratio of logs. In many applications, people use semi-log plots to see whether a pattern is exponential or to compare very small and very large numbers. Often, people find it easier if the vertical scale is written in the original units rather than the log units. To accomplish both, the vertical scale can be ruled with raw units spaced logarithmically, like this: gf_point(confirmed ~ date, data = Covid_US %&gt;% filter(date &lt; as.Date(&quot;2020-06-30&quot;)), color = &quot;dodgerblue&quot;) %&gt;% gf_point(deaths ~ date, color = &quot;orange3&quot;) %&gt;% gf_refine(scale_y_log10()) The labels on the vertical axis show the raw numbers, while the position shows the logarithm of those numbers. The next question has to do with the meaning of the interval between grid lines on the vertical axis. Note that on the horizontal axis, the spacing between adjacent grid lines is half a month. Question D What is the numerical spacing (in terms of raw counts) between adjacent grid lines on the vertical axis? (Note: Two numbers are different by a “factor of 10” when one number is 10 times the other.\" Similarly, “a factor of 100” means that one number is 100 times the other. 10 cases︎✘ If this were true, moving up from the lowest label (1e+01, that is, 10) the next grid line would be at 20, then 30, then 40. 100 cases︎✘ If this were true, moving up from the lowest label (1e+01) the next grid line would be at 110, then 210, then 310. A factor of 10.Excellent! Right. Every time you move up by one grid line, the raw number increases ten-fold, so 10, 100, 1000, 10,000, and so on. The phrase a factor of 10 means to multiply by 10, not to add 10. A factor of 100.︎✘ You’re thinking along the right lines, but this is the difference between every second grid line, not adjacent grid lines. Exercise 15.5: RWESX Open a sandbox to carry out some calculations with Boyle’s data. To see how the data frame is organized, use the head(Boyle) and names(Boyle) commands. The scaffolding here contains a command for plotting out Boyle’s data. It also includes a command, gf_lm() that will add a graph of the best straight-line model to the plotted points. Recall that the # symbol turns what follows on the line into a comment, which is ignored by R. By removing the # selectively you can turn on the display of log axes. gf_point(pressure ~ volume, data = Boyle) %&gt;% gf_refine( # scale_x_log10(), # scale_y_log10() ) %&gt;% gf_lm() Question A In a sandbox, plot pressure versus volume using linear, semi-log, and log-log axes. Based on the plot, and the straight-line function drawn, which of these is a good model of the relationship between pressure and volume? linear︎✘ This would look like a straight line on linear axes. exponential︎✘ This would look like a straight line on semi-log axes. power-lawGood.  Exercise 15.6: gmZiWh Recall Robert Boyle’s data on pressure and volume of a fixed mass of gas held at constant pressure. In Section 15.5 of the text you saw a graphical analysis that enabled you to identify Boyle’s Law with a power-law relationship between pressure and volume: \\[P(V) = a V^n\\] On log-log axes, a power-law relationship shows up as a straight-line graphically. Taking logarithms translates the relationship to a straight-line function:\\[\\text{lnP(lnV)} = \\ln(a) + n\\, \\ln(V)\\] To find the parameter \\(n\\), you can fit the model to the data. This R command will do the job: fitModel(log(pressure) ~ log(a) + n*log(volume), data = Boyle) %&gt;% coefficients() Open a SANDBOX and run the model-fitting command. Then, interpret the parameters. Question A What is the slope produced by fitModel() when fitting a power law model? Roughly -1︎✘ You must be a very precise person! Almost exactly -1Nice!  About -1.5︎✘ I’m not sure how you arrived at this answer. Slope \\(&gt; 0\\)︎✘ You should be able to see from the graph you made in part (1) that the slope is negative. According to the appropriate model that you found in (A) and (B), interpret the function you found relating pressure and volume. Question B As the volume becomes very large, what happens to the pressure? Pressure becomes very small.Nice!  Pressure stays constant︎✘ You can see from the graph in part (A) that pressure does change with volume. Pressure also becomes large.︎✘ You can see from the graph in part (A) that pressure goes down as volume goes up. None of the above︎✘ Return to your use of fitModel() to find the slope of the straight-line fit to the appropriately log-transformed model. When you carried out the log transformation, you used the so-called “natural logarithm” with expressions like log(pressure). Alternatively, you could have used the log base-10 or the log base-2, with expressions like log(pressure, base = 10) or log(volume, base = 2). Whichever you use, you should use the same base for all the logarithmic transformations when finding the straight-line parameters. Question C (D) Does the slope of the straight line found by fitModel() depend on which base is used? NoNice!  Yes︎✘ Did you use the same base for both logarithms in your fitModel() expression? There’s no way to tell.︎✘ Yes, there is. Try using fitModel() with the different bases of log. Question D (E) Does the intercept of the straight line found by fitModel() depend on which base is used? YesExcellent! Good. But this will come out in the wash when you calculate the parameter \\(C\\) in \\(C x^b\\), since \\(C\\) will be either \\(2^\\text{intercept}\\) or \\(10^\\text{intercept}\\) or \\(e^\\text{intercept}\\) depending on the base log you use. No︎✘ Are you sure you tried different bases? Exercise 15.7: EWLCI Here is a plot of the power output (BHP) versus displacement (in cc) of 39 internal combustion engines. gf_point(BHP ~ displacement, data = Engines) %&gt;% gf_lims(y = c(0, 30000)) Question A Your study partner claims that the smallest engine in the data has a displacement of 2000 cc (that is, 2.0 liters) and 100 horsepower. Based only on the graph, is this claim plausible? Yes, because 2000 cc and 100 hp would look like (0, 0) on the scale of this graph.Nice!  Yes, because that size engine is typical for a small car.︎✘ That may be, but certainly you’ve encountered lawn mower engines that are much smaller. No, the smallest engine is close to 0 cc.︎✘ Would you be able to distinguish visually an engine of 1 cc from an engine of 1000cc on this graph? Both these values would lie on the same horizontal pixel in the graph. No, my study partner is always wrong.︎✘ Be that as it may, we’re looking for a principled answer, not an ad hominem one. Semi-log scales The next command will make a graph of the same engine data as before, but with a log scale on the horizontal axis. The vertical axis is still linear. gf_point(BHP ~ displacement, data = Engines) %&gt;% gf_refine(scale_x_log10()) Question B Using just the graph, answer this question: The engines range over how many decades of displacement? (Remember, a decade is a factor of 10.) 7 decadesCorrect.  Can’t tell︎✘ Yes, you can. Figure out what one decade corresponds to in terms of distance on the log axes. \\(10^7\\) decades︎✘ The estimated volume of the entire universe is about \\(4 \\times 10^{86}\\) cc. The volume of a neutron is about \\(6 \\times 10^{-81}\\) cc. The range between a neutron and the universe is therefore about \\(86 - -81 = 167\\) decades. Do you think it likely that there is an internal combustion engine smaller than a neutron or larger than the universe? About 3.5 decades︎✘ Perhaps you’re treating the distance between axis labels as one decade. Look carefully and you see that it’s actually a factor of 100, that is, two decades. Exercise 15.8: TLEXE Question A Consider the axis scales shown above. Which kind of scale is the horizontal axis? linearCorrect. You can see this because a given length along the axis corresponds to the same arithmetic difference regardless of where you are on the axis. the distance between 0 and 50 is exactly the same as the difference between 50 and 100, or the distance between 150 and 200. logarithmic︎✘ A clue that an axis is not logarithmic is that there is a zero marked. The log of zero is \\(-\\infty\\), which can’t appear on any actual graph. Another key is whether the scale shows doubling behavior. The distance between 50 and 100 represents one doubling: 100 is twice 50. If the scale were logarithmic, moving forward that same distance from 100 would bring you to 200. But that’s not what happens here. semi-logarithmic︎✘ “Semi-logarithmic” is not about a single axis but about two axes: horizontal and vertical. It means that one axis is linear while the other is logarithmic. log-log︎✘ “Log-log” is not about a single axis but about two axes. It means that both the horizontal and vertical axes are logarithmic. Question B Which kind of scale is the vertical axis? linear︎✘ Measure the distance from 30 to 50. If the scale were linear, then moving that same distance from 50 would bring you to 70, and moving that distance again would bring you to 90. But you can see that instead of reaching 90, you’d reach something greater than 100 on the scale. So the scale is not linear. logarithmicExcellent!  semi-logarithmic︎✘ “Semi-logarithmic” is not about a single axis but about two axes: horizontal and vertical. It means that one axis is linear while the other is logarithmic. log-log︎✘ “Log-log” is not about a single axis but about two axes. It means that both the horizontal and vertical axes are logarithmic. Question C Given your answers to the previous two questions, what kind of plot would be made in the frame being displayed at the top of this question? semi-logExcellent!  log-log︎✘ A log-log plot has log scales for both axes. The horizontal axis here is linear. linear-linear︎✘ No, the vertical axis is logarithmic. Exercise 15.9: SELIX The data frame SSA_2007 comes from the US Social Security Administration and contains mortality in the US as a function of age and sex. (“Mortality” refers to the probability of dying in the next year.) Open a sandbox and copy in the following scaffolding to see the organization of the data. data(SSA_2007) SSA_2007 Once you understand the data organization, delete the old scaffolding and insert this: data(SSA_2007) gf_point(Mortality ~ Age, color = ~ Sex, data = SSA_2007) There is a slight mistake in the way the command is written, so an error message will be generated. To figure out what’s wrong, read the error message, check the variable names, and so on until you successfully make the plot. Question A What was the mistake in the plotting command in the above code box? Variable names didn’t match the ones in the data.Right!  The tilde in the argument color = ~ sex︎✘ The color = argument is right. The value being used, ~ sex, is a one-sided formula and is used for things like color, shape, transparency, …. The data frame name is spelled wrong.︎✘ No. There is no function gf_point().︎✘ No. gf_point() is one of the more commonly used plotting functions Essay question tmp-4: What’s the obvious (simple) message of the above plot? Now you are going to use semi-log and log-log scales to look at the mortality data again. To do this, you will use the gf_refine() function. gf_point( __and_so_on__) %&gt;% gf_refine( scale_y_log10(), scale_x_log10() ) Fill in the __and_so_on__ details correctly and run the command in your sandbox. As written, both vertical and horizontal axes will be on log scales. This may not be what you want in the end. Arrange the plotting command to make a semi-log plot of mortality versus age. Interpret the plot to answer the following questions. Note that labels such as those along the vertical axis are often called “decade labels.” Question B The level of mortality in year 0 of life is how much greater than in year 1 and after? About twice as large.︎✘ Hint: How much is the change between successive labels on the y axis? About five times as large︎✘ Hint: How much is the change between successive labels on the y axis? About 10 times as largeExcellent!  About 100 times as large︎✘ Hint: How much is the change between successive labels on the y axis? Question C Near age 20, the mortality of males is how much compared to females? Less than twice as large.︎✘ Hint: Due to the nature of logs, a difference of half a decade corresponds to a change of \\(\\sqrt{10}\\). A bit more than three times as largeRight!  About 8 times as large︎✘ Hint: Due to the nature of logs, a difference of half a decade corresponds to a change of \\(\\sqrt{10}\\). About 12 times as large︎✘ Hint: Due to the nature of logs, a difference of half a decade corresponds to a change of \\(\\sqrt{10}\\). Question D Between the ages of about 40 and 80, how does mortality change with age? It stays about the same.︎✘ But the curve is sloping up, isn’t it? It increases as a straight line.︎✘ It would be fair to say this about the logarithm of mortality. But a straight line in log mortality means that mortality itself is increasing exponentially. It increases exponentially.Nice!  It increases, then decreases, then increases again.︎✘ Interesting that you would say this when the function in clearly monotonically increasing above age 30. Remake the plot of mortality vs age once again, but this time put it on log-log axes. The sign of a power-law relationship is that it shows up as a straight line on log-log axes. Question E Between the ages of about 40 and 80 is the increase in mortality better modeled by an exponential or a power-law process? Power-law︎✘ But it’s hard to find any straight line on the log-log plot. ExponentialRight! Right. The graph is much closer to a straight line on semi-log scales than on log-log scales. No reason to prefer one or the other.︎✘ One is much closer to a straight line than the other. Exercise 15.10: PeQJCA The graph comes from an online guide, “Retirement Income Analysis with Scenario Matrices,” published in 2019 by William F. Sharpe, winner of the Nobel Prize in economices in 1990. The guide is intended to be of interest to those planning for retirement income who also happen to have a sophisticated understanding of mathematics and computing. You may or may not be in the former group, but it is hoped that, as you follow this course, you are becoming a member of the later group. Figure 15.11: Mortality rates for people aged 50+ in the US in 2009. The mortality rate is the probability of dying in one year. It’s shown here as a function of age and sex. As you can see, the graph shows nearly parallel straight-line functions for both women and men, with women somewhat less likely than men to die at any given age. Question A What is the format of the graphics axes? linear︎✘ The function might be linear, but we’re asking about the coordinate axes? semi-logCorrect.  log-log︎✘ The ‘age’ axis is linear. For instance, the interval from 50 to 55 is just as long on the axis as is the interval from 95 to 100. Question B If the age axis had been logged, which of the following would be true? The interval from 50 to 55 would be graphically larger than the interval from 95 to 100.Good.  The interval from 50 to 55 would be graphically smaller than the interval from 95 to 100.︎✘ The two intervals would have the same graphical length.︎✘ Question C At age 100, which of these is closest to the mortality rate for men? About 10%︎✘ The blue dot is well above the tick mark for a mortality of \\(10^{-1}\\). About 20%.︎✘ 20% would be the first tick mark above the \\(10^{-1}\\) mark. About 40%.Excellent! 40% is the third tick mark above the \\(10^{-1}\\) mark. About 60%︎✘ 60% is the *fifth tick mark abavoe the \\(10^{-1}\\) mark. Question D At age 65, women have a lower probability of dying than men. How much lower, proportionately? About 5% lower than men︎✘ About 15% lower than men.︎✘ You’re not taking into account the log scale of the vertical axis. About 40% lower than men.Right! Women have a mortality rate of 1% while the rate for men is just under 2%. Question E A rough estimate for the absolute limit of the human lifespan can be made by extrapolating the lines out to a mortality of 100%. This extrapolation would be statistically uncertain, and the pattern might change in the future either up or down, but let’s ignore that for now and simply extrapolate simply a line fitting the data from age 50 to 100. Which of these is the estimate made in that way for the absolute limit of the human lifespan?     105 years︎✘        110 years\\(\\heartsuit\\ \\)       120 years︎✘        130 years︎✘ Question F To judge from the graph, the function relating mortality to age is which of the following? A straight-line function with positive slope.︎✘ A power-law with a positive exponent.︎✘ That would be a straight line on log-log axes. An exponentially increasing function with a horizontal asymptote at mortality = 0.Nice! A straight-line on semi-log axes—what we have here—is diagnostic of an exponential function. The function value would go to zero for age = \\(- \\infty\\), but that mathematical fact is hardly relevant to human lifespan. An exponentially decaying function, with a horizontal asymptote at mortality = 100%.︎✘ 95.69 km/hr is exactly 60 mph.↩︎ Source: https://en.wikipedia.org/wiki/Daylight↩︎ Boyle’s notebooks are preserved at the Royal Society in London. The data in the Boyle dataframe have been copied from this source.)↩︎ "],["dimensions.html", "Chapter 16 Dimensions 16.1 Mathematics of quantity 16.2 Compound dimensions 16.3 Arithmetic with dimensions 16.4 Example: Dimensional analysis 16.5 Conversion: Flavors of 1 16.6 Dimensions and linear combinations 16.7 Exercises", " Chapter 16 Dimensions Next time you’re at a family gathering with your 10-year old cousin, give her the following math quiz. 1700 What’s 3 + 2? What’s 7 - 3? What’s 3 miles + 2 miles? What’s 3 miles + 2 kilometers? What’s 3 miles + 2 kilograms? I don’t know your cousin, but I suspect she will have an easy time answering (1) and (2) correctly. As for (3), she might give the correct answer, “5 miles,” or just say “5.” If so, you’ll follow up with “5 what?” at which point she’ll definitely say “miles.” is a bit harder. You might need to prompt her with the information that 1 kilometer is about 0.6 miles. Then, if she’s pretty smart, she’ll answer “4.2 miles.” 10-year olds are pretty creative, so I’m not sure how she’ll answer (5). But if you ask your Ph.D. aunt, she’ll answer along the lines of “silly question,” or “there’s no such thing.” That’s true. Consider these everyday quantities: 60 miles per hour: a typical speed for driving on a highway 2106 square feet: the in-bounds area for a court used for singles tennis. 355 cubic centimeters: the volume in a canned beverage (in the US). 2.5 gallons per minute: the US mandated maximum flow rate for water through a shower head. 35 miles per gallon: a typical fuel economy for a small car in the US. 0.044 lbs per square foot: the body-mass index of Dwayne (“The Rock”) Johnson. In the more conventional units of kg per square meter, his BMI is 30.8. Consider how you would measure such things: We ordinarily use a speedometer to measure instantaneous car speed and police use a radar gun. But fundamentally, you measure the distance traveled and the time used and divide distance by time. Most people would rely on the internet for this information, but you would check your local court by measuring the width (27 feet is the standard) and the length of the course (78). Multiply the two. Pour the beverage into a measuring cup and read off the volume. But more fundamentally, you could measure the circumference of the can (\\(2 \\pi r\\)), square it (\\(4 \\pi^2 r^2\\)) and divide by \\(4 \\pi\\) to get the cross section area of the can. Then multiply that by the height of the can. We don’t usually monitor water used by a shower. But if you need to, get a 5-gallon pail (the standard volume of the plastic pails used for so many purposes in construction), put it under the shower head, and measure the time it takes to fill the pail. Divide the volume by the time. Record the mileage on the car’s odometer when you fill up the car with gas. Drive. When you next get gas, measure the new odometer reading and the volume of gas you purchased. Divide the change in odometer reading by the gas volume. (In Europe, you would divide the gas volume by the change in odometer reading.) Weigh Dwayne. The scale is usually graduated in both pounds and kilograms: take your choice. Measure his height; the ruler-in-the-doorway method works well. Then divide his weight by the square of his height. Evidently, it makes sense to multiply and divide different types of quantities: feet, gallons, kilometers, kilograms, pounds, hours, …. But you won’t ever see a quantity constructed by adding or subtracting miles and hours or gallons and and square feet. You can square feet and cube centimeters, but can you take the square root of a gallon? Does it make sense to raise 2 to the power of 3 yards? 1710 This section is about the mathematical structure of combining quantities; which kinds of mathematical operations are legitimate and which are not. 16.1 Mathematics of quantity [Fun-10a] Know the definition of a fundamental dimension and the notation for the most common ones (definition page 241-242) [Fun-10b] Understand how derived dimensions are formed from fundamental dimensions (definition page 241-242) [Fun-10c] Know that units are ways of measuring dimensions and derived dimensions. The first step in understanding the mathematics of quantity is to make an absolute distinction between two concepts that, in everyday life, are used interchangeably: dimension and unit. Length is a dimension. Meters is a unit of length. We also measure length in microns, mm, cm, inches, feet, yards, kilometers, and miles, to say nothing of furlongs, fathoms, astronomical units (AU), and parsecs. Time is a dimension. Seconds is a unit of time. We also measure time in micro-seconds, milli-seconds, minutes, hours, days, weeks, months, years, decades, centuries, millenia. Mass is a dimension. Kilograms is a unit of mass. Length, time, and mass are called fundamental dimensions. This is not because length is more important than area or volume. It’s because you can construct area and volume by multiplying lengths together. This is evident when you consider units of area like square-inches or cubic centimeters, but obscured in the names of units like acre, liter, gallon. We use the notation L, T, and M to refer to the fundamental dimensions. (Electrical current Q is also a fundamental dimension, but we won’t have much use for it in our examples. Also useful are \\(\\Theta\\) (“theta”) for temperature, S for money, and P for a count of organisms such as the population of the US or the size of a sheep herd.) Brackets translate between a quantity and the dimension. For instance, [1 yard] = L, [1000 kg] = M, [3 years] = T, [10 \\(\\mu\\) (microns)] = L, 16.2 Compound dimensions There are other dimensions: volume, force, pressure, energy, torque, velocity, acceleration, and such. These are called compound dimensions because we represent them as combinations of the fundamental dimensions, L, T, and M. The notation for these combinations involves multiplication and division. For instance: Volume is L \\(\\times\\) L \\(\\times\\) L \\(=\\) L\\(^3\\), as in “cubic centimeters” Velocity is L/T, as in “miles per hour” Force is M L/T\\(^2\\), which is obscure unless you remember Newton’s Second Law that \\(\\text{F} = \\text{m}\\,\\text{a}\\): “force equals mass times acceleration.” In terms of dimension, mass is M, acceleration is L/T\\(^2\\). Multiply the two together and you get the dimension “force.” Multiplication and division are used to construct a compound dimension from the fundamental dimensions L, T, and M. Addition and subtraction are never used to form a compound dimension. Much of the work in understanding dimensions involves overcoming the looseness of everyday speech. Remember the weight scale graduated in pounds and kilograms. The unit kilograms is a way of measuring M, but the unit of pounds is a way of measuring force: M L/T\\(^2\\). Weight is not the same as mass. This makes no sense to most people and doesn’t really matter in everyday life. It’s only when you venture off the surface of the Earth that the difference shows up. The Mars rover Perseverence has a weight of 1000 kg on Earth. It was weightless for most of its journey to Mars. After landing on Mars, Perseverence weighed just 380 kg. But the rover’s mass didn’t change at sll. 1720 Another source of confusion carried over from everyday life is that sometimes we measure the same quantity using different dimensions. You can measure a volume by weighing water; a gallon of water weighs 8 pounds, a liter of water has a mass of 1 kg. Serious bakers measure flour by weight; a casual baker uses a measuring cup. We can measure water volume with length because water has a (more-or-less) constant mass density. But 8 pounds of gasoline is considerably more than a gallon. It turns out that the density of flour varies substantially depending on how it’s packed, on humidity, etc. This is why it matters whether you weigh flour for baking or measure it by volume. You can measure time by the swing of a pendulum. To measure the same time successfully with different pendula they need to have the same length, not the same mass. A unit is a conventional amount of a quantity of a given dimension. All lengths are the same dimensionally, but they can be measured with different conventions: inches, yards, meters, … Units for the same dimension can all be converted unambiguously one into the other. A meter is exactly the same quantity of length as 39.3701 inches, a mile is the same length as 1609.34 meters. Liters and gallons are both units of volume (L\\(^3\\)): a gallon is the same as 3.78541 liters. You will hear it said that a kilogram is 2.2 pounds. That’s not strictly true. A kilogram has dimension M and a pound has dimension ML/T\\(^2\\). Quantities with different dimensions cannot be “equal” or even legitimately compared to one another. Unless you bring something else into the game that physically changes the situation, for instance gravity (dimension of acceleration due to gravity (dimension \\(\\text{L}/\\text{T}^2\\)). The weight of a kilogram on the surface of the Earth is is 2.2 pounds because gravitational acceleration is (almost) the same everywhere on the surface of the Earth. It’s also potentially confusing that sometimes different dimensions are used to get at the same idea. For instance, the same car that gets 35 miles / gallon in the US (dimension \\(\\text{L}/\\text{L}^3 = 1/\\text{L}^2\\)) will use 6.7 liters per 100 kilometers (\\(\\text{L}^3 / L = \\text{L}^2\\)) in Europe. Same car. Same fuel. Different conventions using different dimensions. 1730 Keeping track of the various compound dimensions can be tricky. For many people, it’s easier to keep track of the physical relationships involved and use that knowledge to put together the dimensions appropriately. Often, the relationship can be described using specific calculus operations, so knowing dimensions and units helps you use calculus successfully. Easy compound dimensions that you likely already know: [Area] \\(= \\text{L}^2\\). Some corresponding units to remind you: “square feet,” “square miles,” “square centimeters.” [Volume] \\(= \\text{L}^3\\). Units to remind you: “cubic centimeters,” “cubic feet,” “cubic yards.” (What landscapers informally call a “yard,” for instance “10 yards of topsoil” should properly be called “10 cubic-yards of topsoil.”) [Velocity] \\(= \\text{L}/\\text{T}\\). Units: “miles per hour,” “inches per second.” [Momentum] \\(= \\text{M}\\text{L}/\\text{T}\\). Units: “kilogram meters per second.” Anticipating that you will return to this section for reference, we’ve also added some dimensions that can be understood through the relevant calculus operations. [Acceleration] \\(= \\text{L}/\\text{T}^2\\). Units: “meters per second squared,” In calculus, acceleration is the derivative of velocity with respect to time, or, equivalently, the 2nd derivative of position with respect to time. [Force] \\(= \\text{M}\\, \\text{L}/\\text{T}^2\\) In calculus: force is the derivative of momentum with respect to time. [Energy] or [Work] \\(= \\text{M}\\, \\text{L}^2/\\text{T}^2\\) In calculus, energy is the integral of force with respect to length. [Power] \\(= \\text{M}\\, \\text{L}^2/\\text{T}^3\\) In the language of calculus, power is the derivative of energy with respect to time. Density sounds like a specific concept, but there are many different kinds of densities. These have in common that they are a ratio of a physical amount to a geometric extent: 1740 a physical amount: which might be mass, charge, people, etc. a geometric extent: which might be length, area, or volume. Some examples: “paper weight” is the mass per area, typically grams-per-square-meter “charge density” is the amount of electrical charge, usually per area or volume “lineal density of red blood cells” is the number of cells in a capillary divided by the length of the capillary. (Capillaries are narrow. Red blood cells go through one after the other.) “population density” is people per area of ground. The theory of dimensions and units was developed for the physical sciences. Consequently the fundamental dimensions are those of physics: length, mass, time, electrical current, luminous intensity. Since proper use of units is important even outside the physical sciences, it’s helpful to recognize the dimension of several other kinds of quantity. “people” / “passengers” / “customers” / “patients” / “cases” / “passenger deaths”: these are different different ways to refer to people. We’ll consider such quantities to have dimension P, for population. “money”: Units are dollars (in many varieties: US, Canadian, Australian, New Zealand), euros, yuan (synonym: renminbi), yen, pounds (many varieties: UK, Egypt, Syria, Lebanon, Sudan and South Sudan), pesos (many varieties), dinar, franc (Swiss, CFA), rand, riyal, rupee, won, and many others. Conversion rates depend on situation and national policy, but we will consider money a dimension, denoted by S (from the name of the first coinage, the Mesopotanian Shekel). Examples: Passenger-miles is a standard unit of transport. Passenger-miles-per-dollar is an appropriate unit of the economic efficiency of transport. Passenger-deaths per million passenger-mile is one way to describe the risk of transport. 16.3 Arithmetic with dimensions Recall the rules for arithmetic dimensioned quantities. We restate them briefly with the square-bracket notation for “the dimension of.” For instance, “the dimension of \\(b\\)” is written \\([b]\\). We also write \\([1]\\) to stand for the dimension of a pure number, that is, a quantity without dimension. Operation Result Only if satisfies Metaphor Multiplication \\([a \\times b] = [a] \\times [b]\\) anything goes promiscuous Division \\([a \\div b] = [a] \\div [b]\\) anything goes promiscuous Addition \\([a + b] = [a]\\) \\([a] = [b]\\) monogomous Subtraction \\([a - b] = [a]\\) \\([a] = [b]\\) monogomous Trigonometric \\([\\sin(a)] = [1]\\) \\([a] = [1]\\) celibate Exponential \\([e^a] = [1]\\) \\([a] = [1]\\) (of course, \\([e] = [1]\\)) celibate Power-law \\([b ^ a] = \\underbrace{[b]\\times[b]\\times ...\\times [b]}_{a\\ \\ \\text{times}}\\) \\([a] = [1]\\) with \\(a\\) an integer exponent celibate Square root \\([\\sqrt{b}] = [c]\\) \\([b] = [c\\times c]\\) idiosyncratic Cube root \\([\\sqrt[3]{b}] = [c]\\) \\([b] = [c \\times c \\times c]\\) idiosyncratic Hump \\([\\text{hump}(a)] = [1]\\) \\([a] = [1]\\) celibate Sigmoidal \\([\\text{sigmoid}(a)] = [1]\\) \\([a] = [1]\\) celibate 16.4 Example: Dimensional analysis We want to relate the period (in T) of a pendulum to it’s length and mass. Acceleration due to gravity also plays a role; that has dimension \\(\\text{L}\\cdot \\text{T}^{-2}\\). For simplicity, we’ll assume that only the bob at the end of the pendulum cable or rod has mass. 1750 The analysis strategy is to combine the four quantities we think play a role into one total quantity that is dimensionless. Since it is dimensionless, it can be constant regardless of the mass, length, period, gravity of each individual situation. \\[\\text{[Period]}^a \\cdot \\text{[Mass]}^b \\cdot \\text{[Length]}^c \\cdot \\text{[Gravity]}^d = T^a \\cdot M^b \\cdot L^c \\cdot L^d \\cdot T^{-2d} = [1]\\] To be dimensionless: \\(c = -d\\), cancel out the L \\(a = 2d\\), cancel out the T \\(b=0\\), there’s no other mass term, and we need to cancel out the M All of the exponents can be put in terms of \\(d\\). That doesn’t tell us what \\(d\\) should be, but whatever value for \\(d\\) we decide to choose, we get a ratio that’s equivalent to: \\[ \\frac{[\\text{Gravity}]\\cdot [\\text{Period}]^2}{[\\text{Length}]} = [1]\\] This is a relationship between dimensions of quantities. To render it into a formula involving the quantities themselves we need to take into account the units. \\[ \\frac{\\text{Gravity}\\cdot \\text{Period}^2}{\\text{Length}} = B\\] We can experimentally determine the numerical value of the dimensionless constant \\(B\\) by measuring the period and length of a pendulum and (on Earth) recognizing that gravitational acceleration on Earth’s surface is 9.8 meters-per-second-squared. Such experiment and mathematical models using differential equations give \\(B = (2\\pi)^2\\). 16.5 Conversion: Flavors of 1 Numbers are dimensionless but not necessarily unitless. Failure to accept this distinction is one of the prime reasons people have trouble figuring out how to convert from one unit to another. 1760 The number one is a favorite of elementary school students because its multiplication and division tables are completely simple. Anything times one, or anything divided by one, is simply that thing. Addition and subtraction are pretty simple, too, a matter of counting up or down. When it comes to quantities, there’s not just one one but many. And often they look nothing like the numeral 1. Some examples of 1 as a quantity: \\(\\frac{180}{\\pi} \\frac{\\text{degrees}}{\\text{radians}}\\) \\(0.621371 \\frac{\\text{mile}}{\\text{kilometer}}\\) \\(3.78541 \\frac{\\text{liter}}{\\text{gallon}}\\) \\(\\frac{9}{5} \\frac{^\\circ F}{^\\circ C}\\) \\(\\frac{1}{12} \\frac{\\text{dozen}}{\\text{item}}\\) I like to call these and others different flavors of one. In every one of the above examples, the dimension of the numerator matches the dimension of the denominator. The same is true when comparing feet and meters ([feet / meter] is L/L = [1]), or comparing cups and pints ([cups / pint] is \\(\\text{L}^3/\\text{L}^3 = [1]\\)) or comparing miles per hour and feet per second ([miles/hour / ft per sec] = L/T / L/T = [1]). Each of these quantities has units but it has no dimension. It’s helpful to think about conversion between units as a matter of multiplying by the appropriate flavor of 1. Such conversion will not change the dimension of the quantity but will render it in new units. Example: Convert 100 feet-per-second into miles-per-hour. First, write the quantity to be converted as a fraction and alongside it, write the desired units after the conversion. In this case that will be \\[100 \\frac{\\text{feet}}{\\text{second}} \\ \\ \\ \\text{into} \\ \\ \\ \\frac{\\text{miles}}{\\text{hour}}\\] First, we’ll change feet into miles. This can be accomplished by multiplying by the flavor of one that has units miles-per-foot. Second, we’ll change seconds into hours. Again, a flavor of 1 is involved. What number will give a flavor of one? One mile is 5280 feet, so \\[\\frac{1}{5280} \\frac{\\text{miles}}{\\text{foot}}\\] is a flavor of one. Next, we need a flavor of one that will turn \\(\\frac{1}{\\text{second}}\\) into \\(\\frac{\\text{1}}{\\text{hour}}\\). We can make use of a minute being 60 seconds, and an hour being 60 minutes. \\[\\underbrace{\\frac{60\\ \\text{s}}{\\text{minute}}}_\\text{flavor of 1}\\ \\underbrace{\\frac{60\\ \\text{minutes}}{\\text{hour}}}_\\text{flavor of 1} = \\underbrace{3600\\frac{\\text{s}}{ \\text{hour}}}_\\text{flavor of 1}\\] Multiplying our carefully selected flavors of one by the initial quantity, we get \\[ \\underbrace{\\frac{1}{5280} \\frac{\\text{mile}}{\\text{foot}}}_\\text{flavor of 1} \\times \\underbrace{3600 \\frac{\\text{s}}{\\text{hour}}}_\\text{flavor of 1} \\times \\underbrace{100 \\frac{\\text{feet}}{\\text{s}}}_\\text{original quantity} = 100 \\frac{3600}{5280} \\frac{\\text{miles}}{\\text{hour}} = 68.18 \\frac{\\text{miles}}{\\text{hour}}\\] 16.6 Dimensions and linear combinations Low-order polynomials are a useful way of constructing model functions. For instance, suppose we want a model of the yield of corn in a field per inch of rain over the growing season, will call it corn(rain). The output will have units of bushels (of corn). The input will have units of inches (of rain). A second-order polynomial will be appropriate for reasons to be discussed in Chapter 23. 1770 \\[\\text{corn(rain)} \\equiv a_0 + a_1\\, \\text{rain} + \\frac{1}{2} a_2\\, \\text{rain}^2\\] Of course, the addition in the linear combination will only make sense if all three terms \\(a_0\\), \\(a_1\\,\\text{rain}\\), and \\(\\frac{1}{2}\\, a_2\\, \\text{rain}^2/2\\) have the same dimension. But clearly \\([\\text{rain}] \\neq [\\text{rain}^2]\\). In order for things to work out, the coefficients must themselves have dimension. We know the output of the function will have dimension \\([\\text{volume}] = \\text{L}^3\\). Thus, \\([a_0] = \\text{L}^3\\). \\([a_1]\\) must be different, because it has to combine with the \\([\\text{rain}] = \\text{L}\\) and produce \\(\\text{L}^3\\). Thus, \\([a_1] = \\text{L}^2\\). Finally, \\([a_2] = \\text{L}\\). Multiplying that by \\([\\text{rain}]^2\\) will give the required \\(\\text{L}^3\\) In everyday communication as well as in most domains such as construction, geography, navigation, and astronomy we measure angles in degrees. 90 degrees is a right angle. But in mathematics, the unit of angle is radians where a right angle is 1.5708 radians. (1.5708 is the decimal version of \\(\\pi/2\\).) The conversion function, which we’ll call raddeg(), is \\[\\text{raddeg}(r) \\equiv \\frac{180}{\\pi} r\\] The function that converts degrees to radians, which we’ll call degrad() is very similar: \\[\\text{degrad}(d) \\equiv \\frac{\\pi}{180} d\\] (Incidentally, \\(\\frac{180}{\\pi} = 57.296\\) while \\(\\frac{\\pi}{180} = 0.017453\\).) In traditional notation, the trigonometric functions such as \\(\\sin()\\) and \\(\\tan()\\) can be written with an argument either in degrees or radians. For instance, \\(\\sin(90^\\circ) = \\sin\\left(\\frac{\\pi}{2}\\right)\\). Similarly, for the inverse functions like \\(\\arccos()\\) the units of the output are not specified. This works because there is always a human to intervene between the written expression and the eventual computation. In R, as in many other computer languages like Python or spreadsheet packages, there is no valid expression like sin(90 deg). In these languages, 90 deg is not a valid expression (although it might be good if it were valid!). In these and many other languages, angles are always given in radians. Such consistency is admirable, but people are not always so consistent. It is a common source of computer bugs that angles in degrees are handed off to functions like \\(\\sin()\\) and that the output of \\(\\arccos()\\) is (wrongly) interpreted as degrees rather than radians. 1780 Function composition to the rescue! Consider this function given in the Wikipedia article on the position of the sun as seen from Earth.24 \\[\\delta_\\odot(n) \\equiv - 23.44^\\circ \\cdot \\cos \\left [ \\frac{360^\\circ}{365\\, \\text{days}} \\cdot \\left ( n + 10 \\right ) \\right ]\\] Where \\(n\\) is zero at the midnight marking New Years and increases by 1 per day. (The \\(n+10\\) has units of days and translates New Years back 10 days, to the day of the winter solstice.) \\(\\delta_\\odot()\\) gives the declination of the sun: the latitude pieced by an imagined line connecting the centers of the earth and the sun. The Wikipedia formula is well written in that it uses some familiar numbers to help the reader see where the formula comes from. 365 is recognizably the length of the year in days. \\(360^\\circ\\) is the angle traversed when making a full cycle around a circle. \\(23.44^\\circ\\) is less familiar, but the student of geography might recognize it as the latitude of the Tropic of Cancer, the latitude farthest north where the sun is directly overhead at noon (on the day of the summer solstice). But there’s a world of trouble for programmer who implements the formula as dec_sun &lt;- makeFun(-23.44 * cos((360/365)*(n+10)) ~ n) For instance, the equinoxes are around March 21 (n=81) and Sept 21 (n=264). On an equinox, the delination of the sun is zero degrees. But let’s plug \\(n=81\\) and \\(n=264\\) into the formula and see what we get. dec_sun(81) ## [1] 5.070321 dec_sun(264) ## [1] -23.38324 The equinoxes aren’t even equal! And they are not close to zero. Does this mean astronomy is wrong? The Wikipedia formula should have been programmed this way, using 2 \\(\\pi\\) radians instead of 360 degrees in the argument to the cosine function: dec_sun_right &lt;- makeFun(-23.44 * cos(( 2*pi / 365)*(n+10)) ~ n) dec_sun_right(81) ## [1] -0.1008749 dec_sun_right(264) ## [1] -0.1008749 The deviation of one-tenth of a degree reflects rounding off the time of the equinox to the nearest day. 16.7 Exercises Exercise 16.1: mHACgC You are designing a pendulum for a planned joint NASA/ESA mission to Mars. From the orbital period and radius of Mars, its mass is known. From the mass and the observed diameter of the planet, gravitational acceleration at the surface is calculated as 3.721 m/s\\(^2\\). According to Section 16.4, the period is \\(\\text{Period} = 2 \\pi \\sqrt{\\frac{\\text{Length}}{\\text{Gravity}}}\\). The length of your pendulum is 3 feet. Question A What will be the period of your pendulum when it eventually gets to Mars? (Hint: Don’t make the mistake of the engineers working on the Mars Polar Lander and forget to resolve the different units of length presented in the problem.)     1.3 seconds︎✘        1.9 seconds︎✘        3.1 seconds\\(\\heartsuit\\ \\)       9.1 seconds︎✘ Question B What is the period of your pendulum on Earth?     1.3 seconds︎✘        1.9 seconds\\(\\heartsuit\\ \\)       3.1 seconds︎✘        9.1 seconds︎✘ Exercise 16.2: UGDKY For each mathematical operation, identify the operation as valid or invalid according to the rules of dimensional arithmetic. Question A In this formula \\[\\frac{8 \\text{m} - 2.5 \\text{km}}{2 \\text{min} - 32 \\text{s}}\\] choose which rule (if any) is violated. Addition or Subtraction rule︎✘ Both the numerator and denominator are valid subtractions, with dimension L and T respectively. Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! Exponential︎✘ There’s no exponent here. It’s valid. No rules are violated.Good.  Question B In this formula \\[\\frac{3 \\text{g} \\times 2 \\text{m}}{3 \\text{km}^2}\\] choose which rule (if any) is violated. Addition or Subtraction rule︎✘ No addition or subtraction here. Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! Exponential︎✘ There’s no exponent here. It’s valid. No rules are violated.Excellent!  Question C For this formula \\[10^{\\frac{4 \\text{hr}}{3 \\text{g}}}\\] choose which rule (if any) is violated. Addition or Subtraction rule︎✘ No addition in this formula. Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! ExponentialCorrect. The exponent is 4 ft / 3 g, which has dimension L / M. Exponents must always have dimension [1]. It’s valid. No rules are violated.︎✘ Question D In this formula \\[6^{\\frac{2 \\text{hr}}{3 \\text{min}}}\\]choose which rule (if any) is violated. Addition or Subtraction rule︎✘ No addition or subtraction in this formula. Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! Exponential︎✘ The exponent is 4 hr/3 min, which has dimension T/T = [1]. So the rule is satisfied. It’s valid. No rules are violated.Excellent!  Question E In this formula \\[5 \\text{g} \\times 3 \\text{kg} - 7 \\text{lbs}\\] choose which rule (if any) is violated. Addition or Subtraction ruleRight! You can’t subtract M from M\\(^2\\). (Strictly speaking, lbs has dimension of force, \\(M L^2 / T^2\\), but you can’t subtract force from M\\(^2\\) either. Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! Exponential︎✘ There’s no exponent here. It’s valid. No rules are violated.︎✘ Question F In this formula \\[\\sqrt[3]{8 m^3 + 27 \\text{ft}^2}\\] choose which rule (if any) is violated. Addition or Subtraction ruleNice! You can’t add L\\(^3\\) to L\\(^2\\). Multiplication or Division rule︎✘ There are no restrictions for multiplication and division, so a formula can hardly violate them! Exponential︎✘ Maybe you’re thinking that the cube-root rule is violated, but since the quantity in the cube root is invalid, the root doesn’t do anything additionally wrong. It’s valid. No rules are violated.︎✘ Exercise 16.3: DVGKY Question A The dimension of \\(t\\) is T, that is, \\([t] = T\\). What must the dimension of \\(k\\) be in \\(e^{kt}\\) for the operation to make sense? [1]︎✘ Then \\([k\\,t] = \\text{T}\\), which would violate the exponential rule. T\\(^{-1}\\)Correct. Right, [k] needs to cancel out [t] so that the exponention is valid. T︎✘ Then \\([k\\,t] = \\text{T}\\)^2$, which would violate the exponential rule. None of the above︎✘ Question B What must the dimension of \\(c\\) for the arithmetic operation \\(1 + c \\cdot 2^{k\\,t}\\) to make sense? [1]Nice! Right. You’re going to have to add \\(c \\cdot 2^{kt}\\) to 1. Since \\([k\\,t] = [1]\\), \\(c\\) also needs to be dimensionless. T\\(^{-1}\\)︎✘ T︎✘ Then $[k,t] = \\(T^2\\), which would violate the exponential rule. Depends on the dimension of \\(2^{kt}\\)︎✘ We already determined that \\([kt] = [1]\\), so \\([2^{kt}] = [1]\\). Exercise 16.4: KGYKY The surface area \\(S\\) of a mammal is reasonably well approximated by the function \\[S(M) \\equiv k M^{2/3}\\] where \\(M\\) is the body mass (in kg) and the constant \\(k\\) depends on the particular species under consideration. Note that \\(M^{2/3}\\) is not an allowed arithmetic operation. \\([M] = \\text{mass}\\), and mass, like any other dimension, cannot be raised to a non-integer power. More properly, the expression should be written \\[\\left(\\frac{M}{1\\ kg}\\right)^{2/3}\\] The division by “1 kg” renders dimensionless the quantity in the parentheses: \\[\\left[\\frac{M}{1\\ kg}\\right] = 1\\] In order to render the quantity both dimensionless and unitless, \\(M\\) should be specified in kg. The usual practice is to skip the “1 kg” business and simply say, “Where \\(M\\) is in kg.” You will see such notation frequently in your career and should take care to use the indicated units. You’ll need to open a computing sandbox to do the calculations. Question A Consider a baby and an adult. The adult’s mass is \\(8\\) times greater than the baby’s. Then the adult’s surface area is …? The same as the baby’s︎✘ 1.5 times of the baby’s︎✘ 4 times the baby’sCorrect.  8 times the baby’s︎✘ Question B Consider a human of body mass 70 kg with a skin surface area of 18,600 cm2. Which of the following units for the constant of proportionality \\(k\\) is correct? cm\\(^2\\) kg\\(^{-2/3}\\)︎✘ Kilograms to a fractional power is not a sensible unit. cm\\(^2\\)Right!  cm\\(^2\\) kg\\(^{2/3}\\)︎✘ When you multiply \\((70 kg/kg)^{2/3}\\) by \\(k\\), you need to get a result in \\(cm^2\\). kg\\(^{-1}\\)︎✘ Would this produce \\(cm^2\\) for the result? Question C In the units of part (B), which value is \\(k\\) closest to?     1︎✘        10︎✘        100︎✘        1000\\(\\heartsuit\\ \\) The numerical value of the constant \\(k\\) changes depending on what units you want to express it in. The value you found in part (C) works for masses stated in kg and skin areas in cm\\(^2\\). Suppose you want to figure out a value of \\(k&#39;\\) that you can use in the formula for people who are used to talking about skin area in square inches and mass in pounds. The units of \\(k\\) are cm\\(^2\\), and we want the units of \\(k&#39;\\) to be in\\(^2\\). That part is easy: just multiply \\(k\\) by two flavors of one to change the units from cm to inches, like this: \\[k&#39; = k\\ \\underbrace{\\frac{\\text{in}}{2.6 \\text{cm}}}_\\text{flavor of 1}\\ \\underbrace{\\frac{\\text{in}}{2.6 \\text{cm}}}_\\text{flavor of 1} = \\frac{k}{2.6^2}\\] where the flavor of 1 reflects that 1 inch is 2.6 cm. But this is not the whole story. We have to be very careful in dealing with the \\(\\left(\\frac{M}{1 kg}\\right)^{2/3}\\). Translated to pounds, \\(M = 70\\ \\text{kg} = 154\\ \\text{lbs}\\), since, in the rough-and-ready way everyday people express themselves, 1 kg \\(\\approx\\) 2.2 lbs.25 Plugging in \\(M=154\\) lbs makes the power-law part of the formula for skin area \\[\\left(\\frac{154\\ \\text{lbs}}{1\\ \\text{kg}}\\right)^{2/3}\\] You can’t take (pounds)\\(^{2/3}\\) or (kg)\\(^{2/3}\\); you won’t get a sensible unit in either case. But [pounds/kg] = [1], so taking the two-thirds power of the ratio is perfectly legitimate. Still, there’s a problem. Multiplying \\(k\\ 154^{2/3} (\\text{lbs}/\\text{kg})^{2/3}\\) has the right dimension, but strange-looking units that have nothing to do with skin area. The resolution to this paradox is to multiply \\(\\frac{154\\ \\text{lbs}}{1\\ \\text{kg}}\\) by an appropriate flavor of 1 to render the dimensionless quantity unitless as well as dimensionless. This flavor will be \\(\\frac{1 \\text{kg}}{2.2 lbs}\\), giving a formula for skin area in square inches: Question D Optional challenge) Assuming that \\(k = 1000 \\text{cm}^2\\) when specifying mass in kilograms, what should be the numerical value of \\(k&#39;\\) in square-inches that should be used when body mass is given in pounds?     8.7︎✘        87\\(\\heartsuit\\ \\)       870︎✘        8700︎✘        87000︎✘ Exercise 16.5: JELCI The “Energy-maneuverability Theory” (E-M) of aircraft performance was developed by renowned fighter pilot Col John Boyd and mathematician Thomas Christie in the 1960s. The theory posits that the available maneuverability of an aircraft is closely related to its specific energy \\(E_s\\), that is, the kinetic plus potential energy of the aircraft divided by aircraft weight. To be highly maneuverable, an aircraft must be able to change it’s specific energy rapidly in time. Let’s call this ability the specific power (that is, power divided by mass), \\(P_s\\). An aircraft with large \\(P_s\\) is more maneuverable than one with small \\(P_s\\). An important formula in E-M Theory is \\[P_s = \\frac{T - D}{W} V\\] where \\(T\\) is aircraft thrust, \\(D\\) is drag, \\(W\\) is weight, and \\(V\\) is velocity. \\((T-D)\\), thrust minus drag, is the net forward force on the aircraft. Recall these facts about the dimension of physical quantities: Velocity has dimension \\(L^1 T^{-1}\\) (e.g. meters per second) Acceleration has dimension \\(L^1 T^{-2} =\\) [Velocity] \\(\\times\\ T^{-1}\\) (e.g. meters per second-squared) Force has dimension \\(M \\times\\ \\) Acceleration Energy has dimension [Force] \\(\\times\\ L\\) Power has dimension [Energy] \\(\\times\\ T^{-1}\\). Question A Which of the following is a correct dimensional formulation of power?     [Force][Velocity]\\(\\heartsuit\\ \\)       [Energy][Velocity]︎✘        [Force] / [Velocity]︎✘        [Energy] / [Velocity]︎✘ Question B What is the dimension of \\(P_s\\) in E-M Theory? [Power] \\(\\times\\ M^{-1}\\)Correct. In other words, specific power, that is, power per mass. [Force] \\(\\times\\) Acceleration︎✘ Just so you know, such a dimension is rarely, if ever, encountered in practice. [Force] \\(\\times\\) [Velocity]︎✘ You’re leaving out the division by \\(W\\) in the E-M Theory formula. [Power]︎✘ Exercise 16.6: aNEcW1 Newton’s law of universal gravitation—also known as the inverse square law—is generally written \\[F = G \\frac{m_1\\ m_2}{r^2} .\\] \\(m_1\\) and \\(m_2\\) are the masses of the two objects (say, Earth and Sun). \\(r\\) is the distance between the two objects (about 150,000,000 km). \\(F\\) is the gravitational force and \\(G\\) is a fixed quantity called the “gravitational constant.” Of course, you already know the dimension of force, mass, and distance. Question A What is the dimension of the gravitational constant, \\(G\\)? \\(L^3\\ M^{-1}\\ T^{-2}\\)Nice!  \\(L^2\\ M^{-2}\\)︎✘ Remember, \\(G m_1 m_2 / r^2\\) has to have the same dimensions as force. \\(L^2\\ M^{2}\\ T^{-2}\\)︎✘ Check your signs! \\(L^2\\ M^{-2}\\ T^{-2}\\)︎✘ Question B The quantity \\(G\\) is \\(6.674 \\times 10^{−11}\\) when \\(L\\) is in meters, \\(M\\) is in kilograms, and \\(T\\) in seconds. What is the gravitational force between Earth (mass \\(6 \\times 10^{24}\\) kg) and Sun (mass \\(2\\times 10^{30}\\) kg) ? \\(3.6 \\times 10^{28}\\) NewtonsCorrect.  \\(3.6 \\times 10^{31}\\) meters︎✘ \\(3.6 \\times 10^{28}\\) meters per second-squared︎✘ \\(3.6 \\times 10^{31}\\) meter seconds per kg︎✘ Exercise 16.7: VA9Dxi In this book, we are parameterizing the sinusoid using the period \\(P\\), the duration a cycle. In many settings, such as communications engineering and physics, it is preferable to parameterize in terms of the frequency, often written with the Greek letter \\(\\omega\\) (“omega”). Here’s the relationship: \\[\\sin\\left(\\frac{2\\pi}{P} t\\right) = \\sin(2\\pi \\omega t)\\] Question A When the input quantity \\(t\\) represents time, it has dimension T. The period P has the same dimension so that the overall argument to \\(\\sin()\\) is dimensionless, as required. What is the dimension of \\(\\omega\\)?     T︎✘        T\\(^2\\)︎✘        T\\(^{-1}\\)\\(\\heartsuit\\ \\)       T\\(^{-2}\\)︎✘ In an earlier exercise, we looked at human breathing. The period of a breathing cycle differs from hour to hour and from person to person. (It’s also somewhat, but not completely, under conscious control.) A reasonable scale for the period of normal human breathing is 3 seconds. Question B Given a respiratory period of 3 seconds/breath, what is the respiratory frequency in units of breaths/minute? 20 breaths/minuteExcellent! Right. Each breath takes 1/20th of a minute, which is 3 seconds, the period specified in the question. 3 breaths/minute︎✘ If this were true, each breath would take 20 seconds to complete. 1/3 breath per minute︎✘ With breaths completed every three seconds, 1/3 of a breath is completed each second. But the problem asked for breaths per minute. 20 seconds per breath︎✘ The period is in the units of seconds per breath, but the frequency will have units of breaths per second. Frequency is the reciprocal of period (and vice versa). Article accessed on May 30, 2021↩︎ Of course, pounds is a measure of force, not mass. But people use it as if it were mass. A mass of 70 kg corresponds to about 4.8 slugs. In Earth’s gravity, the mass 4.8 slugs produces a force of 154 pounds.↩︎ "],["projects-and-review.html", "Projects and review 16.8 Ebola in Guinea, part I 16.9 Analysis of the outbreak 16.10 More data smoothing 16.11 Final thoughts", " Projects and review 16.8 Ebola in Guinea, part I In December 2013, an 18-month-old boy from a village in Guinea suffered fatal diarrhea. Over the next months a broader outbreak was discovered, and in mid-March 2014, the Pasteur Institute in France confirmed the illness as Ebola-Virus Disease caused by the Zaire ebolavirus. Although the outbreak was first recognized in Guinea, it eventually encompassed Liberia and Sierra Leone as well. By July 2014, the outbreak spread to the capitals of all three countries. We are going to examine the time course of the epidemic using reports that were issued by the World Health Organization along with some concepts and techniques we have been studying in the first block of Math 141Z. Data are provided by the US Centers for Disease Control (CDC). 16.8.1 Data The CDC data are provided to you as a dataframe named EbolaAll. The dataframe consists of 182 reports spread out over 18 months during 2014 and 2015. Each report is represented by a single row in the dataframe . Each report gives the number of new cases and disease-related deaths since the last report in each or three countries: Sierra Leon, Liberia, and Guinea. These values have been calculated from the raw, cumulative data. The data have been scrubbed to remove obvious errors. 16.8.2 Exploring the Data We will begin by looking at some data. Use head(EbolaAll) to see the column headers and first 6 rows of data. As you can see, the EbolaAl dataframe is structured like a table, and each row contains multiple columns of data. The table below lists the column names found in EbolaAll dataframe along with a brief description of what the column records. Date: Date when the World Health Organization issued the report Gcases: Number of new cases in Guinea Gdeaths: Number of new deaths in Guinea Lcases: Number of new cases in Liberia Ldeaths: Number of new deaths in Liberia SLcases: Number of new cases in Sierra Leone SLdeaths: Number of new deaths in Sierra Leone TotCases: Total number of cases across all three countries TotDeaths: Total number of deaths across all three countries We will focus on the Guinea data. As we have done throughout this book, we model this data using the pattern-book functions. In a SANDBOX, use gf_point() to plot the number of new cases in Guinea (variables Date and Gcases in dataframe EbolaAll). **Question 1**: Look at the shape of the graph. Of the functions we have studied, which would be most appropriate as a model for the new cases in Guinea? If none of the functions we have studied best matches this data, select &quot;None of the above.&quot; Although we are tempted to regard data sets as definitive, they are the culmination of an imperfect process of data collection in the field and imperfect processing/correction/amendment by people. For instance, most of the cases (and deaths) in the epidemic were never confirmed by viral testing and are considered “suspected cases.” Cases and deaths reported on one day might possibly be from previous days, and some cases and deaths were, no doubt, not reported. In the Sandbox, run the following command to look at the data: DT::datatable(EbolaAll) The resulting display is interactive; you can page through the many rows of data. Question 2: Look through the data printout and find a data point form one of the World Health Organization reports that seems strange or inconsistent when compared with nearby reports. To receive full credit for this question, you must state the country and date of the report and explain your reasons for identifying this report as inconsistent. 16.8.3 Data Wrangling An essential part of all projects involving data is to prepare the data for analysis: a process often called data wrangling. Although data wrangling is an important skill, it is not the topic of this book. So we will take care of the programming and present you with the results in the form of a data frame EbolaGuinea. The wrangling accomplished two things: averaging the data over 7-report windows and extracting a numerical “day number” from the Date of each report. First, rather than working with the year:month:day format of Date, it’s convenient to use a purely numerical quantity to represent time. So, we’ll translate the day when reports were issued into number of days from the initial report, presenting the result in the column Days. This makes the data-analysis programming easier, since all our mathematical software knows how to handle numbers, but not necessarily calendar dates. Second, we’re going to smooth the number of cases and the number of deaths. We did this by averaging each day’s number-of-cases and number-of deaths over several report. As you can see in the data, the interval between reports is not constant. Some reports occur just one day after the previous report; sometimes there is a week between reports. The widely spaced reports tend to have much higher cases and deaths than reports that come every day. This is for the simple reason that each report gives the number of new cases and deaths since the previous report; there’s more time for the numbers to accumulate when there is a wide spacing between reports. The data reflect not just the process of the Ebola epidemic, but also the way the data were collected and reported, which is not directly of interest to us. To reduce this report-to-report fluctuation, we’ll average the number of new cases in each report with the three reports before and three reports after: a moving average over seven reports. The result of our wrangling—the dataframe EbolaGuinea—includes three new columns: Days: When the report was issued in terms of a count of days from the initial report. G7Rcases: Number of new cases in Guinea averaged across 7 reports G7Rdeaths: Number of new deaths in Guinea averaged across 7 reports 16.9 Analysis of the outbreak In your Sandbox, use gf_point() to plot the smoothed data in EbolaGuinea to show the time course of the epidemic. The variables you want to plot are G7Rcases versus Days. averaged number of new cases in Guinea (variables Days and G7Rcases in dataframe EbolaGuinea). Question 3 Look at the shape of the graph. Of the functions we have studied, which would be most appropriate as a model for the new cases in Guinea? If none of the functions we have studied best matches this data, select “None of the above.” It is well known that the infection rate during an outbreak follows a Gaussian pattern when the population interacts consistently. Ebola initially spreads exponentially as people pass the virus to one another. As people are exposed to the virus, there are fewer and fewer people who are still susceptible. The result is that the rate of exponential growth slows and, when the fraction of the population that is susceptible becomes small, the epidemic slows down and the number of new cases decays exponentially. Overall, the pattern of new cases day-by-day looks like a gaussian: zero cases per day before the outputbreak, exponential growth at first after the virus is introduced to the population, leveling out for a time, and exponential decay back to zero new cases. The graph of G7Rcases versus Days looks only vaguely like a gaussian hump. One possible explanation is that the data summarize more than one outbreak, as the virus spreads from one region to another. We’ll treat each individual output as a gaussian and try to figure out how many of them make up the whole data. The individual outbreaks will be modelled as a gaussian function with it’s own center and width. The center for each gaussian corresponds to the peak of the hypothesized outbreak in one particular region. We’ll combine the several gaussians in a linear combination. The scalar multiplying each gaussian is related to the size of the population exposed in each outbreak. Here is an R/mosaic definition of a linear combination of two gaussian outbreaks. my_mod &lt;- makeFun(15800*(A*dnorm(t,m1,sd1) + (1-A)*dnorm(t,m2,sd2)) ~ t) There are five parameters in the function. m1 the time when the first hypothesized outbreak peaked, m2 is the peak time of the second hypothesized outbreaks, and sd1 and sd2 reflect the duration of each outbreak. The parameter A represents the relative population sizes of the two regions. The number 15,800 reflects the total number of cases, which we know retrospectively. (The 15,800 includes a correction for the average day spacing between reports, but that detail need not concern us here.) Note that selecting A sets the amplitude for both Gaussians, i.e. A and 1−A. The amplitudes A and 1-A sum up to 1. Arranging things this way effectively make A the size of the one outbreak, leaving 1-A to be the size of the other outbreak. To see how these Gaussians work together, start with the following values: A = 0.5, m1 = 150, sd1 = 50, m2 = 350, sd2 = 50. Do not change the 15800 number which reflects the overall size of the whole outbreak, as opposed to the relative size of the hypothesized individual outbreaks: A and 1-A. Use gf_point(), the pipe operator %&gt;%, and slice_plot() to overlay your model on top of the data. Discrepancies between the model and the data can lead you to improve the model by adjusting the parameters. It’s to be expected that you will need several cycles of such parameter adjustments until you find a model that seems to agree with the data in a satisfactory way. to you Guinea cases along with your model. Once you have adjusted your model to match the data as closely as you can, write down the parameters you used in your report, as well as the graph comparing the data to your final model. Question 3: Find the longest time interval during which your model systematically overstates the number of cases. What’s the start and end of that interval? (Your answer can be rough, just so long as it points the reader of your report to the interval you mean.) 16.10 More data smoothing Accurately modeling the Guinea case data with two gaussian functions is difficult. Despite the smoothing, the numbers in G7Rcases fluctuate irregularly and substantially from report to report. Another way to smooth the data, that is, to reduce the irregular report-to-report fluctuations, is to accumulate the number of new cases to get the total number of cases up through each report. (This accumulation, at the end of the epidemic, will be the total number of people who came down with Ebola illness.) Such a sum of new cases from the beginning of the outbreak through the day of each report is called a cumulative sum or “running total.” Keep in mind that this is not a number, but a new column of data giving the number of cases to date for each of the dates in the data. To illustrate, the small set of numbers: [1 2 3 4 5 6]. The cumulative sum of this set shows the running total: [1 3 6 10 15 21]. Make sure you are comfortable with how the second set of numbers is related to the first. The R function cumsum() calculates the cumulative sum on a column of data. You are going to need to do a little data wrangling; we can’t do it for you because we don’t know what model you decided to settle on. There are many computer systems for data wrangling. You may have heard of one called Structured Query Language (SQL) which is a required skill listed in many job listings and a multi-billion dollar component of the economy. We will use a system called dplyr specially designed for the R language. In the dplyr system, the function mutate() is used to create a new column in a data frame by carrying out calculations on the existing columns. Here is an R/dplyr command to generate the running total of cases. (We’re using Gcases instead of the smoothed G7Rcases because the cumulative summing will do the smoothing for us.) EbolaGuinea &lt;- EbolaGuinea %&gt;% mutate(GcasesTotal = cumsum(Gcases)) It’s worthwhile to parse that command carefully. The part to the right of &lt;- is an instruction for taking the EbolaGuinea data frame and adding a new column. The new column will be called GcasesTotal. The values in the new column will be generated by applying cumsum() to the Gcases column. Altogether, the right-hand side of the statement creates a new data frame that includes the new column. The left-hand side of the statement stores this new data frame under a name. For convenience, we’re using EbolaGuinea as that name. Effectively, the command as a whole, including the name assignment EbolaGuinea &lt;- can be seen as updating the data frame with the new column. You can verify that the new column is in place by showing the first several lines of the updated data frame: head(EbolaGuinea) Use gf_point() to plot GCasesTotal versus Days. The graph will show how the number of cases accumulated over time to to the overall total for the epidemic as a whole. Question 5: Consider which of the functions we have studied could be fitted to represent the GCasesTotal versus Days curve in your graph? It’s likely that none of the functions we have studied fits the data particularly well, but one of them will be better than the others. We haven’t forgotten that you already created a model of the new cases by a linear combination of gaussian functions. What we want to do now is translate your model for the number of new cases each day into a model of the cumulative number of cases to date. In other words, we want to perform the same action that cumsum() does, but applied to your model rather than data. To do this, you will replace the gaussian dnorm() function in your model with the sigmoidal pnorm(). No other changes are needed. This works because the gaussian and sigmoid functions are related to one another in just the same way as cumsum() relates the GCases column to the GCasesTotal column. Remember that the Gaussian and sigmoid functions are related to one another. The sigmoid is the accumulation of the Gaussian, i.e. it is the cumulative sum of the Gaussian. We will use this relationship to improve your double Gaussian model. Create a new function in your sandbox called my_mod_cumulative(). Plot this new function over the GCasesTotal versus Dates data. As before, you can do this with gf_point(), the pipe operator %&gt;%, and slice_plot(). Question 6: Observe the rate of change (slope) of your model. The rate of change represents the number of new infections per day. Find the day on which your rate of change is greatest. Describe how this is related to the argmax of your model from Question 4. Try adjusting the parameters in my_mod_cumulative() to better match the function to the GCasesTotal data. Some aspects of the outbreak can be better seen from the cumulative number of cases to date, and other aspects may be better seen with the-newcases-each-day data. Now we will leverage the relationship between the Gaussian and sigmoid functions. Adjust your double Gaussian model and use the Question6 cumulative sums graph to evaluate your modifications. The procedure is outlined here: 16.11 Final thoughts The gaussian as a model for the time course of new cases, and the sigmoid for the time course of accumulated cases to date, are well established. But here we’ve used two gaussians (or, equivalently, two sigmoids). So was there one outbreak or two? Question 7: Think about why the two-gaussian model matches the data better than the one-gaussian model. What might this mean in terms of the structure of the Ebola outbreak in Guinea? Don’t be afraid to speculate and frame your answer in terms that a layman might understand. The modeling cycle is all about using your current model to identify ways that you might be able to improve the model. Of course, in practice, you need to present your model for use, so you have to exit the cycle at some point. You’re at that point now, but we ask you to reflect a bit more. Question 8: Given the results of your modeling efforts and your answer to Question 7, might it be better to model the outbreak using 3 or 4 Gaussians in our linear combination? What are the challenges associated with using more Gaussians? Question 9: The EbolaAll data frame records the Sierra Leone and Liberia outbreaks as well as the outbreak in Guinea. How might you use that additional data to explore the validity of your modeling process? Authors: Prof. Robert Wolverson, USAFA &amp; Daniel Kaplan, Macalester College and USAFA. "],["prolog-differentiation-and-birth.html", "Prolog: Differentiation and birth", " Prolog: Differentiation and birth Stories are an important way in which people communicate and receive their understanding of the world. History, as the name suggests, is replete with stories. The definition of history as the “study of what happened in the light of what might have happened” even suggests a counter-factual aspect to some stories.26 Mathematics instruction is weak on stories, with a few exceptions such as the Eureka! moment or the apple falling from an orchard tree. Our new topic, differentiation, might be well served by connecting it to stories … but judge for yourself. The ancient Greek understanding of the origins and actions of the world was conveyed by stories of titans, gods, nymphs, and other characters. For the most part, these characters were created by the coupling of two parents, somewhat as we can create new functions by bringing together existing ones in composition, multiplication, and (linear) combination. In Greek mythology, the twelve Olympians of the pantheon, are Zeus, Hera, Poseidon, Demeter, Athena, Apollo, and others such as Ares (war fighting) and Aphrodite (love, beauty). Each Olympian has his or her own character and special power and authority. Athena, for instance, is a god of wisdom, craft, and war strategy. Similarly, we have our nine pattern-book functions, each of which can morph into a variety of shapes by introducing parameters. Athena is said to have emerged fully formed from the forehead of her father Zeus, a strange form of birth but a birth nonetheless. The technical word for birth is “parturition” whose first syllable is reminiscent of “to part” or “parting”: the separation of child from parent. And, as every parent and child knows, a child is different from—apart from—the parent. A person in their own right. Their characteristics and hopes are, even if related, distinct and they can play utterly different roles in history or myth. In Greek mythology, parthenogenesis—procreation from a single parent—is common. For instance, Dionysos sprang from the virgin Persephone. The topic of this Block, differentiation, is to be thought of much like parthenogenesis. There is one parent—a function. From this parent springs a new being, also a function. Among our pattern-book functions, there are many parent-child pairs, just as the Olympian Athena is the child of Zeus. For instance, the reciprocal function is the child of the logarithm. The exponential is its own parent and the sine is its own grandparent. Insofar as the role of functions is to convey information about relationships and patterns, the child function created by differentiation conveys different information or a different perspective or emphasis than the parent. (Not so true in the case of the exponential, which is its own child, grandchild, and down the line. As such, it has a special role to play in modeling.) Calculus books tend to be technical. Their description of the the process of one-parent birth—that is, differentiation—usually emphasizes the details of pushing and pulling, viscera and parturition.27 But usually these efforts are details that contribute little or nothing to the important story and don’t make it into polite conversation. The basis of the story is the fact of the parent-child relationship and the understanding that the child and the parent are different people whose characteristics and actions, desires, fates, and foibles are intertwined but different. So before we delve into the obstetric details of differentiation in the next chapters, keep in mind that the important part is the creation of a new and different being whose story will convey to us different information and insight than the parent. Examples of the parent-child connection created by differentiation are all around us. When the parent function signifies the volume of water in a lake, differentiation produces a new function that tells us about the flows of streams into and out of the lake, rain, and evaporation. Differentiating the function that conveys the position of an object generates a new function that represents the velocity of that object. If the parent is the function of time that tells the size of retirement investment, the birth by differentiation creates a function with a different story: savings, expenditure, profit, and loss. Just as people have a solid, immediate understanding of the parent-child relationship, people have an almost tangible grasp of differentiation relationships. You can sense position with your eyes, as you can sense velocity by the wind in your face regardless of where you happen to be at the time. You know whether a flow is great or small even without knowing the volume of the lake or ocean to which the flow is delivered. Science as a story is full of parent-child relationships, and sometimes is constructed out of the child-grandparent relationship. For instance, the function representing acceleration is the child of velocity, which is in turn the child of position. And, occasionally in science and mathematics, the great-grandchild or the great-great-grandchild are part of the relationships being described. A warning: There is one important way in which thinking of differentiation as parthenogenesis is utterly misleading. With functions, birth can be run in reverse, generating the parent function from the child. The process of this utterly unbiological reverse birthing is called “anti-differentiation,” and is every bit as important as differentiation even if it is harder to envision. The American Heritage Dictionary of the English Language, 5th Edition gives this word origin for “history”: “Middle English histoire from Old French from Latin historia from Greek historiā from historein to inquire from histōr learned man weid- in Indo-European roots.” [weid is also the origin of “wit.”]↩︎ Athena’s birth story features iron-mongering within Zeus’s head, and the male mid-wife’s use of an axe-blow to the head.↩︎ "],["change-relationships.html", "Chapter 17 Change relationships 17.1 Mathematics in motion 17.2 Continuous time 17.3 Instantaneous rate of change 17.4 Slopes and motion 17.5 Acceleration 17.6 Notations for differentiation 17.7 Visualizing the slope function 17.8 Dimension of derivatives 17.9 Exercises", " Chapter 17 Change relationships As you know, a function is a mathematical idea used to represent a relationship between quantities. For instance, the water volume of a reservoir behind a dam varies with the seasons and over the years; there is a relationship between water volume (one quantity) and time (another quantity). Similarly, the flow in a river feeding the reservoir has a relationship with time. In spring the river may be rushing with snow-melt, in late summer the river may be dry, but after a summer downpour the river flow again rises briefly. In other words, river flow is a function of time. Differentiation is a way of describing a relationship between relationships. The water volume in the reservoir has a relationship with time. The river flow has a relationship with time. Those two relationships are themselves related: the river flow feeds the reservoir and thereby influences the water volume. It’s not so easy to keep straight what’s going on in a relationship between relationships. When you can describe such a thing, it often gives great insight to the mechanisms that drive the world. For instance, Johannes Kepler (1572-1630) spent years analyzing the data collected by astronomer Tycho Brahe (1546-1601). The data showed clearly a relationship between time and the speed of a planet across the sky. Long-standing wisdom claimed that there is also a specific relationship between a planet’s position and time. From antiquity it had been certain that planets moved in circular orbits. Kepler worked hard to find the relationship between the two relationships: speed vs time and position vs time. He was unsuccessful until he dropped the assumption that planet orbits are circular. Positing orbits as elliptical, Kepler was able to find a simple relationship between speed vs time and position vs time. Building on Kepler’s work, Newton hypothesized that planets might be influenced by the same gravity that pulls an apple to the ground. It was evident from human experience that gravity has the most trivial relationship with time: gravity is constant! But Newton could not find a link between this constant notion of gravity and Kepler’s planetary motion as a function of time. Success came when Newton hypothesized—without any direct evidence from experience—that gravity is a function of distance. Newton’s formulation of the relationship between relationships— gravity-as-a-function-of-distance and orbital-position-as-a-function-of time—became the a foundation of model science. Newton’s theories of gravity, force, and motion created an extremely complicated chain or reasoning that is still almost impossible to grasp. Or, more precisely, it is almost impossible to grasp until you have the language for describing relationships between relationships. Newton invented this language, the language of differentiation. As you learn to understand this language, you will find it easier to express and understand relationships between relationships, that is, the mechanisms that account for the ever changing quantities around us. 17.1 Mathematics in motion The questions that started it all had to do with motion. There were words to describe speed: fast and slow. There were words to describe force: strong and weak, heavy and light. And there were words to describe location and distance: far and near, long and short, here and there. But what were the relationships among these things? And how did time fit in, an intangible quantity that had aspects of location (long and short) and of speed (quick and slow)? 2000 Galileo (1564-1642) started the ball rolling.28 As the son of a musician and music theorist, he had a sense of musical time, a steady beat of intervals. When a student of medicine in Pisa, he noted that swinging pendulums kept reliable time, regardless of the amplitude of their swing. After accidentally attending a lecture on geometry, he turned to mathematics and natural philosophy. Inventing the telescope, his observations put him on a collision course with the accepted classical truth about the nature of the planets. Seeking to understand gravity, he built an apparatus that enabled him to measure accurately the position in time of a ball rolling down a straight ramp. The belled gates he set up to mark the ball’s passage were spaced arithmetically in musical time: 1, 2, 3, 4, …. But the distance between the gates was geometric: 1, 4, 9, 16, …. Thus he established a mathematical relationship between increments in time and increments in position. Time advanced as 1, 1, 1, 1, … and position as 1, 3, 5, 7, …. He observed that the second increments of position, the increments of the increments 1, 3, 5, 7, …, were themselves evenly spaced: 2, 2, 2, …. 2005 Putting these observations in tabular form, and adding columns for the first increment \\(y(t) \\equiv x(t+1) - x(t)\\) and the second increment \\(y(t+1) - y(t)\\) \\(t\\) \\(x(t)\\) first increment second increment 0 0 1 2 1 1 3 2 2 4 5 2 3 9 7 4 16 Galileo had neither the mathematics nor the equipment to measure motion continuously in time. So what might be obvious to us now, that position is a function of time \\(x(t)\\), would have had little practical significance to him. But we discover in his first increments of \\(x\\) something very much like the slope function in Chapter 9. 2010 \\[{\\cal D}_t\\, x(t) \\equiv \\frac{x(t + 1) - x(t)}{1}\\] From his data, he observed that \\({\\cal D}_t\\, x(t)\\) increases linearly in \\(t\\): \\[{\\cal D}_t x(t) = 2 t + 1\\] Calculating the second increments of \\(x\\) is done by the “slope function of the slope function,” which we can call \\({\\cal D}_{tt}\\): \\[{\\cal D}_{tt} x(t) \\equiv {\\cal D}_t \\left[{\\cal D}_t x(t)\\right] = {\\cal D_t} \\left[\\strut 2t+1\\right] = \\frac{\\left[\\strut2(t+1) + 1\\right] - \\left[\\strut 2 t + 1\\right]}{1} = 2\\] 17.2 Continuous time Newton placed the motion in continuous time rather than Galileo’s discrete time. He reframed the slope function from the big increments of the slope operator \\({\\cal D}_t\\) to imagined vanishingly small increments of a operator that we shall denote \\(\\partial_t\\) and call differentiation. 2015 The kind of question for which Newton wanted to be able to calculate the answer was, “How to find the function \\(x(t)\\) whose second increment, \\(\\partial_{tt} x(t) = 2\\)?” His approach, which he called the “method of fluxions,” became so important that its name became, simply, “Calculus.” 2020 Over the next three centuries, calculus evolved from a set of techniques for describing motion into the general-purpose mathematics of change. Applying calculus in the real world involves understanding change relationships between quantities. To give some examples: 2025 Electrical power is the change with respect to time of electrical energy. Birth rate is one component of the change with respect to time of population. Interest, as in bank interest or credit card interest, is the change with respect to time of assets. Inflation is the change with respect to time of prices. Disease incidence is one component of the change with respect to time of disease prevalence. Force is the change with respect to position of energy. 17.3 Instantaneous rate of change On the radio once, I heard a baseball fanatic describing the path of a home run slammed just inside the left-field post. “Coming off the bat, the ball screamed upwards, passing five stories over the head of the first baseman and still gaining altitude. Then, somewhere over mid left-field, gravity caught up with the ball, forcing it down faster and faster until it crashed into the cheap seats.” A nice image, perhaps, but wrong about the physics. Gravity doesn’t suddenly catch hold of the ball; even when upward bound, gravity influences the ball to exactly the same extent as it does at the peak of the flight and as the ball falls back down. The vertical velocity of the ball is positive while climbing and negative on descent, but that velocity is steadily changing all through the flight: a smooth, almost linear numerical decrease in velocity from the time the ball leaves the bat to when it lands in the bleachers. At each instant of time, the vertical velocity of the ball has a numerical value in feet-per-second. That value changes continuously and is never the same at any two points in the ball’s flight. If \\(Z(t)\\) is the height of the ball at time \\(t\\), and \\(v_Z(t)\\) is the vertical velocity at time \\(t\\), then the slope function \\[{\\cal D}_t Z(t) \\equiv \\frac{Z(t+h) - Z(t)}{h}\\] tells us the average velocity of the ball over a time interval of \\(h\\). The “average velocity” is a human construction. At each instant in time the ball has a velocity that is constantly changing. The reality of the ball is that it has only an instantaneous velocity. The average velocity is merely a concession to the way we might measure the velocity, by recording the height at two different times and computing the difference in height divided by the difference in time. Our measurement of the average velocity gets closer to the instantaneous velocity when we make the time interval \\(h\\) smaller. Ideally, to genuinely reflect the state of the ball at a instant, we would make the interval of time infinitely small, that is, we would make \\(h = 0\\). One thing that happens when we make \\(h = 0\\) is that the formula for \\({\\cal D}_t Z(t)\\) suffers from a divide by zero; a meaningless arithmetic operation. So it would seem that “instantaneous velocity” is a mathematical non-starter, even if it is a physical reality. But there’s something else that happens when \\(h = 0\\), the two heights \\(Z(t + h)\\) and \\(Z(t)\\) become equal, so \\(Z(t + h) - Z(t) = 0\\). Not only are we dividing by zero when calculating \\({\\cal D}_t Z(t)\\), the quantity that we are dividing zero into is itself zero. We have 0/0. That’s a doubly mysterious quantity, an arithmetic non-entity. The mystery of 0/0 baffled mathematicians and philosophers for thousands of years. It was Newton who turned it into a computational reality, although his reasoning was regarded with suspicion for two hundred years. The world’s best mathematicians struggled for centuries with the logic of finding a mathematical framework for making sense of what a baseball and gravity do naturally. Rather than ourselves dealing with the intricacies of mathematical logic, we can gain an adequate understanding of the situation by avoiding \\(h=0\\) in favor of a gentler, gradual, evanescent h. The type of slope function calculated with this (as yet undefined) evanescent h is called a derivative and corresponds to the instantaneous rate-of-change function. The process of constructing the derivative of a function \\(f(t)\\) is called differentiation. And to help us keep track of things, whenever we construct a derivative of \\(f(t)\\), we will name the constructed function \\(\\partial_t f(t)\\). Similarly, the name of the function that is the derivative of \\(g(x)\\) will be \\(\\partial_x g(x)\\) 17.4 Slopes and motion Consider a graph of the position of a car along a road as in Figure 17.1. Over the course of an hour, the car traveled about 25 miles. In other words, the average speed is 25 miles/hour: the slope of the tan-colored line segment. Given the traffic, sometimes the car was stopped (time C), sometimes crawling (time D) and sometimes much faster than average (time B). 2030 Figure 17.1: The position of an imagined car over an hour of time. (black) The tan-colored line shows what the position would have been if the car had travelled steadily at the average speed for the hour. Of course, when you’re driving you are aware of the car’s speed at any instant. You need only look at the speedometer to read off the value (in miles per hour). Speedometers don’t show the average speed for the entire trip. The average speed is the slope of the tan-colored line in Figure 17.1, 25 miles in one hour, usually stated 25 miles-per-hour. 2035 In terms of Figure 17.1, the speedometer reading is the slope of \\(f(t)\\) at the given instant. You can see from the Figure that at instant A the speed is very close to the average speed for the entire trip. At instant B the car is going faster; the slope is much steeper. On the other hand, at instant C the car is at a standstill; its position doesn’t change at all. 2040 A car’s speedometer shows the speed at each moment—or instant—of the trip. As you can see in Figure 17.1, the speed varies and is sometimes less than the average speed, sometimes greater, and occasionally equal to the average speed over the trip. 2045 You can easily judge from a graph of \\(f(t)\\) whether the instantaneous speed is faster or slower than the average speed. Better, however, if we simply record the speedometer reading and graph that, as in 17.2. You can read off the speed from the graph at any instant of time simply by reference to the vertical axis. Figure 17.2: The instantaneous speed of the car whose position vs time is shown in Figure 17.1. The two graphs in Figures 17.1 and 17.2 show exactly the same car trip. For each of the two graphs, the presentation of the data makes it easy to see some things and hard to see others. For instance, figuring out when the car is at a stand-still is harder in the position-vs-time graph than in the speed-vs-time graph. 2050 17.5 Acceleration Having worked out a theory of slope functions, Newton was ready to express the laws of motion in continuous time. He did this by denoting position as \\(x(t)\\). The familiar concepts of velocity and force could then be defined in terms of slope functions of position and the “quantity of matter,” which we call “mass.” 2055 Velocity is the slope function of position: \\(v(t) \\equiv {\\cal D}_t x(t)\\). Net force is the slope function of velocity times mass: \\(F(t) \\equiv m {\\cal D}_t v(t) = m {\\cal D}_{tt} x(t)\\) To take mass out of the formulation, we give a name specifically to the slope function of velocity: acceleration. Acceleration is the slope function of velocity: \\(a(t) \\equiv {\\cal D}_t v(t) = {\\cal D}_{tt} x(t)\\). With acceleration as a concept, we can define net force as mass times acceleration. This is Newton’s Second Law of Motion. We used net force as the quantity we related to mass and the slope function of velocity. There are different sources of forces which add up and can cancel out. Famously, Newton formulated the law of universal gravitation which ascribed the force between masses as proportional to the product of the two masses and inversely proportional to the square of the distance between them. But a mass on a table has no net force on it, since the table pushes back (push = force) on the mass to cancel out the force due to gravity. “Net force” takes such cancellation into account. 2060 17.6 Notations for differentiation There are several traditional notations for differentiation of a function named \\(f()\\). Here’s a list of some of them, along with the name associated with each: Leibnitz: \\(\\frac{df}{dx}\\) Partial: \\(\\frac{\\partial f}{\\partial x}\\) Euler: \\(D_x f\\) Newton (or “dot”): \\(\\dot{f}\\) Lagrange (or “prime”): \\(f&#39;\\) One-line: \\(\\partial_x f\\) (This hybrid of partial and Euler notation, will be the main differential notation used in this book.) It is a fact of mathematical and scientific life that a variety of notations are used for differentiation. To some extent, this reflects historical precedence and, to be honest, nationalistic European politics of the 18th century. To make sense of mathematical writing in the many areas in which calculus is used, you have to recognize all of them for what they are. Your skill will be enhanced if you also memorize the names of the different styles. It’s not all that different from the pattern in English of having multiple words for the same sort of object, for instance: car, automobile, junker, ride, wheels, crate, jalopy, limo, motor car, horseless carriage. 2100 In the days when carriages where pulled by horses, the phrase “horseless carriage” made a useful distinction. Today, when horses are rarely seen on the road, it makes sense to trim down the notation to its essentials: horseless cariage. Think of \\(\\partial_x\\) as this sort of minification of older notations.29 If you’ve studied calculus before, you have likely seen the \\(f&#39;\\) notation. This is admirably concise but is only viable in a narrow circumstance: functions that take a single input. What \\(f&#39;\\) leaves out is a means to specify a crucial aspect of differentiation, the with-respect-to variable. The general situation for differentiation involves functions of one or more variables, for example, \\(g(x, y, z)\\). For such functions, you need to specify which is the with-respect-to variable. For instance, we can differentiate \\(g()\\) three different ways, each way incrementing one or another of the three inputs: 2075 \\[\\partial_x g(x, y, z) \\equiv \\frac{g(x+h, y, z) - g(x, y, z)}{h}\\] \\[\\partial_y g(x, y, z) \\equiv \\frac{g(x, y+h, z) - g(x, y, z)}{h}\\] \\[\\partial_z g(x, y, z) \\equiv \\frac{g(x, y, z+h) - g(x, y, z)}{h}\\] At this point in your studies, you haven’t seen why you might choose to differentiate a function with respect to one variable or another. That will come in time. But we want to set you up with a notation that won’t narrow your options. In this book, we will mainly use the one-line notation, \\(\\partial_x f\\), but it means exactly the same as the Leibnitz and Partial notations, which are much more widely used in textbooks. 2080 Both the Leibnitz and Partial notations are explicit in identifying the function and the with-respect-to-variable. For example, using the Partial differentiation notation, the three ways of differentiating our example function \\(g(x, y, z)\\) are labeled : 2085 \\[\\frac{\\partial f}{\\partial x},\\ \\ \\ \\frac{\\partial f}{\\partial y},\\ \\ \\text{and}\\ \\ \\frac{\\partial f}{\\partial z}\\] Our R/mosaic computer differentiation is longer but explicit: g &lt;- makeFun(__formula__ ~ x &amp; y &amp; z) # define a function dx_g &lt;- D(g(x, y, z) ~ x) dy_g &lt;- D(g(x, y, z) ~ y) dz_g &lt;- D(g(x, y, z) ~ z) The names assigned to the result of the D() operator can be any names you like. What’s nice about dx_g and the others is that it mimics the math notation \\(\\partial_x g()\\). Notice that the R/mosaic operator for differentiation is named D() and that it is a function. It follows the same pattern as makeFun() or slice_plot() or contour_plot(): the first argument is a tilde expression, for instance g(x, y, z) ~ x, which identifies the mathematical function to work with (g()) and the name of the with-respect-to input to that function. The R/mosaic notation makes it clear that differentiation is an operation on a function. The D() operator takes a function as input and produces as output another function. We’ve seen similar behavior with, say, slice_plot(), which takes a function as input and produces graphics as output. Both D() and slice_plot() need to know the identity of the with-respect-to variable as well as the function to work with. That’s why both pieces of input are packaged into a tilde expression. 2090 We’re calling D() an operator rather than a function. The reason is purely for communication with other people. There are so many “functions” in a calculus course that we thought it would be helpful to distinguish between the kinds of functions that take quantities as input and produce a quantity as output and the functions that take a function as input and produce a function as output.30 Both sorts are called “functions” in R terminology. But a sentence like, “Differentiation is a function that takes a function as input and produces a function as output,” true though it be, is dizzying. 2095 17.7 Visualizing the slope function Look back at Figures 17.1 and 17.2 (which we reproduce here). We know the two functions are closely related—one is the position of the car and the other the speed. But it’s hard to see the relationship at a glance. You have to go patiently back and forth between the two graphs, comparing a slope in one graph to an output value in the other graph. We can make things easier by taking an unconventional approach to graphing the slope function. Rather than showing the slope as the vertical position on a graph, let’s show the slope with an actual slope! Perhaps this non-standard visualization will give you a better way to understand slope functions. If so, good. The ultimate benefit of a way to show \\(\\diff{x} f(x)\\) and \\(f(x)\\) in the same frame will come when we introduce the operation of anti-differentiation. 2130 Recall that the basic model of change in Calculus is the straight-line function \\(\\line(x) \\equiv a x + b\\). The slope \\(a\\) of \\(\\line(x)\\) tells how the output changes for a unit change in input. In differentiation, we 2135 approximate the parent function \\(f(x)\\) as a series of local line segments. extract the slope of each line segment as the value of the slope function at each input \\(x\\). Figure 17.3 shows the segment by segment approximation around each of several input values (marked in green). The slope function visualization is constructed by throwing away the vertical offset of each of the line segments and plotting them horizontally adjacent to one another. 2140 Figure 17.3: A function \\(f(x)\\) shown along with the tangent line segment touching \\(f()\\) at each of the green points. For the slope function visualization, the tangent line segments are moved down to the horizontal axis. You can see that the slopes are a function of \\(x\\), that is, the slope changes with \\(x\\). Because the function and it’s slope function are shown on the same graph in the same way, it’s easy to verify that the slope as a function of \\(x\\) corresponds to the behavior of the function itself. Figure 17.4 shows several examples of the slope function visualization. Figure 17.4: Slope-function visualizations (left) of several pattern-book functions (right). Calculus and the Wealth of Nations 1776 can be reckoned as the birth year of two revolutions: the American Declaration of Independence and Adam Smith’s publication of the Wealth of Nations. Smith, considered the intellectual father of free-market economics, explored the origins of the supply and demand of commodities, labor, and money. A key figure of the Scottish Enlightenment, Smith would have been well aware of Newton, his work, and the many advances enabled by the creation of calculus. Wealth of Nations lays out dozens of relationships between different quantities — wages, labor, stock, interest, prices, profits, and coinage among others. Yet Wealth of Nations does not use the concepts or language of calculus. Lacking this, Smith’s arguments, sophisticated though they be, are based on the Aristotelian notions of tendency toward a “natural” resting place.31 Consider this characteristic statement in Wealth of Nations: The market price of every particular commodity is regulated by the proportion between the quantity which is actually brought to market, and the demand of those who are willing to pay the natural price of the commodity… Such people may be called the effectual demanders, and their demand the effectual demand. Smith’s “natural price” and “effectual demand” are fixed quantities. But Smith lived near the end of a centuries-long period of static economies. Transportation, agriculture, manufacture, population were all much as they had been for the past 500 years or longer.32 Calculus was invented to deal with dynamics: how things change. It took the industrial revolution and nearly a century of intellectual development before economics was seen dynamically. In this dynamical view, supply and demand are not seen as mere quantities, but as functions of which price is the major input. The tradition in economics is to use the word “curve” instead of “function,” giving us the phrases “supply curve” and “demand curve.” Many students starting out in economics can easily see supply and demand as quantities. Making the transition from quantity to function, that is, between a single amount and a relationship between amounts is a core challenge to those learning economics. Once this transition is accomplished, economics students are taught essential concepts of calculus—particularly first and second derivatives, the subjects of this Block—although the names used are peculiar to economics, for instance, “elasticity,” “marginal returns” and “diminishing marginal returns.” Figure 17.5: Demand as a function of price, as first published by Antoine-Augustin Cournot in 1836. 17.8 Dimension of derivatives The function named \\(\\partial_t f(t)\\) which is the derivative of \\(f(t)\\) takes the same input as \\(f(t)\\); the notation makes that pretty clear. Let’s suppose that \\(t\\) is time and so the dimension of the input is \\([t] = \\text{T}\\). The outputs of the two functions, \\(\\partial_t f(t)\\) and \\(f(t)\\) will not, in general, have the same dimension. Why not? Recall that a derivative is a special case of a slope function, the instantaneous slope function. It’s easy to calculate a slope function: \\[{\\cal D}_t f(t) \\equiv \\frac{f(t+h) - f(t)}{h}\\] The dimension of the quantity \\(f(t+h) - f(t)\\) must be the same as the dimension of \\(f(t)\\); the subtraction wouldn’t be possible otherwise. The dimension of \\(h\\), similarly, must be the same as the dimension of \\(t\\); the addition wouldn’t make sense otherwise. Whereas the dimension of the output \\(f(t)\\) is simply \\(\\left[f(t)\\right]\\), the dimension of the quotient \\(\\frac{f(t+h) - f(t)}{h}\\) will be different. The output of the derivative function \\(\\partial_t f(t)\\) will be \\[\\left[\\partial_t f(t)\\right] = \\left[f(t)\\right] / \\left[t\\right] .\\] Suppose \\(x(t)\\) is the position of a car as a function of time \\(t\\). Position has dimension L. Time has dimension T. The function \\(\\partial_t x(t)\\) will have dimension L/T; that’s what velocity is, for instance miles-per-hour. Another example: Suppose the function pressure() takes as input altitude input (in km) and returns as output a pressure (in kPa, “kiloPascal”33). The derivative function, let’s call it \\(\\partial_\\text{altitude} \\text{pressure}()\\), also takes an input in km, but produces an output in kPA per km: a rate. 17.9 Exercises Exercise 17.02: slwdkw Each question involves a pair of quantities that are a function of time and that might or might not be a quantity/rate-of-change pair. If they are, say which quantity is which. Feel free to look up a dictionary definition of words you are uncertain about. Question A Deficit and debt Deficit is the rate of change of debt with respect to time.Nice!  Debt is the rate of change of deficit with respect to time.︎✘ They are not a rate of change pair.︎✘ Question B water contained and flow Flow is the rate of change of water contained with respect to time.Right!  Water contained is the rate of change of flow with respect to time.︎✘ They are not a rate of change pair.︎✘ Question C Interest rate and debt owed on credit card Interest rate is the rate of change of credit card debt with respect to time.Correct.  Credit card debt is the rate of change of interest rate with respect to time.︎✘ They are not a rate of change pair.︎✘ Question D Rain intensity and total rainfall Rain intensity is the rate of change of total rainfall with respect to time.Good.  Total rainfall is the rate of change of rain intensity with respect to time.︎✘ They are not a rate of change pair.︎✘ Question E Force and acceleration Force is the rate of change of acceleration with respect to time.︎✘ Acceleration is the rate of change of force with respect to time.︎✘ They are not a rate of change pair.Nice! The dimension of force is \\(ML/T^2\\). The dimension of acceleration is \\(L/T^2\\). A rate of change with respect to time should have an extra T in the denominator of the dimensions. Question F Position and acceleration Position is the rate of change of acceleration with repect to time.︎✘ Acceleration is the rate of change of position with respect to time.︎✘ They are not a rate of change pair.Right! The dimension of position is \\(L\\). The dimension of acceleration is \\(L/T^2\\). The rate of change of position would have dimension \\(L/T\\). That’s called ‘velocity.’ Question G Velocity and air resistence Velocity is the rate of change of air resistence with repect to time.︎✘ Air resistence is the rate of change of velocity with respect to time.︎✘ They are not a rate of change pair.Excellent! Air resistence is a force, with dimension \\(M L/T^2\\). Velocity has dimension \\(L/T\\). The rate of change of velocity with respect to time is acceleration, which has dimension \\(L/T^2\\). Exercise 17.04: eodlt Recall from Section 4.3.3 that a function is monotonically increasing on a given domain when the function’s slope is positive everywhere in that domain. A monotonically decreasing function, similarly, has a negative slope everywhere in the domain. When the slope is zero, or positive in some places and negative in others, the function is neither monotonically increasing or decreasing. Each of the following graphs shows the derivative of some function \\(f(x)\\). (Note: the graph doesn’t show \\(f(x)\\) but rather the function \\(\\partial_x f(x)\\)) For each graph, say whether the function \\(f()\\) is monotonically increasing, monotonically decreasing, or neither. (Note that the horizontal scale is the same in every graph, but the vertical scale can be different from one scale to another.) Question A Function A is … monotonically increasingNice! A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonic︎✘ A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info provided︎✘ This is the case if you cannot tell if the derivative is positive or negative. Question B Function B is … monotonically increasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasingExcellent! A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonic︎✘ A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info provided︎✘ This is the case if you cannot tell if the derivative is positive or negative. Question C Function C is … monotonically increasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonicCorrect. A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info provided︎✘ This is the case if you cannot tell if the derivative is positive or negative. Question D Function D is … monotonically increasingCorrect. A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonic︎✘ A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info provided︎✘ This is the case if you cannot tell if the derivative is positive or negative. Question E Function E is … monotonically increasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonic︎✘ A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info providedRight! This is the case if you cannot tell if the derivative is positive or negative. Question F Function F is … monotonically increasingGood. A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) monotonically decreasing︎✘ A monotonically increasing function has a function that is everywhere \\(&gt; 0\\) constant︎✘ A constant function has a derivative that is everywhere 0. non-monotonic︎✘ A non-monotonic function goes up and down, hence the derivative is positive in some places and negative in others. Can’t tell from the info provided︎✘ This is the case if you cannot tell if the derivative is positive or negative. Exercise 17.06: iclcws Here are graphs of various functions. The right column shows functions named \\(f_1()\\), \\(f_2()\\), and so on. The left column shows functions \\(A()\\), \\(B()\\), \\(C()\\), and so on. Most of the functions on the right are the derivative of some function on the left, and most of the functions on the left have their corresponding derivative on the right. Your task: Match the function on the left to it’s derivative on the right. Question A The derivative of Function A() is which of the following:     f1()︎✘                   f2()\\(\\heartsuit\\ \\)       f3()︎✘                 f4()︎✘                 not shown︎✘ Question B The derivative of Function B() is which of the following:     f1()\\(\\heartsuit\\ \\)       f2()︎✘                f3()︎✘                f4()︎✘                not shown︎✘ Question C The derivative of Function C() is which of the following:     f1()︎✘                f2()︎✘                f3()︎✘                f4()\\(\\heartsuit\\ \\)       not shown︎✘ Question D The derivative of Function D() is which of the following:     f1()︎✘                 f2()︎✘                  f3()︎✘                 f4()︎✘                 not shown\\(\\heartsuit\\ \\) Exercise 17.08: helxs The left column of graphs shows functions A(), B(), C(), and D(). The right column shows functions dd1(), dd2(), and so on. Find which function (if any) in the right column corresponds to the 2nd derivative of a function in the left column. Remember the concepts of “concave up” (a smile!) and “concave down” (a frown). At those values of \\(x\\) for which the 2nd derivative of a given function is positive, the given function will be concave up. When the 2nd derivative is negative, the given function will be concave down. Question A The second derivative of Function A() is which of the following:     dd1()︎✘        dd2()︎✘        dd3()︎✘        dd4()\\(\\heartsuit\\ \\) Question B The second derivative of Function B() is which of the following:     dd1()︎✘        dd2()︎✘        dd3()\\(\\heartsuit\\ \\)       dd4()︎✘ Question C The second derivative of Function C() is which of the following:     dd1()︎✘        dd2()\\(\\heartsuit\\ \\)       dd3()︎✘        dd4()︎✘ Question D The second derivative of Function D() is which of the following:     dd1()\\(\\heartsuit\\ \\)       dd2()︎✘        dd3()︎✘        dd4()︎✘ Exercise 17.10: 1kZXxT The plots each show a function graphed in the usual way, and a slope function graphed using the slope function visualization. Your task is to determine whether the slope function being displayed in each graph is a match to the function in that graph. Question A In plot (A), does the slope function displayed correspond to the function that’s graphed?     Yes\\(\\heartsuit\\ \\)       No︎✘ Question B In plot (B), does the slope function displayed correspond to the function that’s graphed?     Yes︎✘        No\\(\\heartsuit\\ \\) Question C In plot (C), does the slope function displayed correspond to the function that’s graphed?     Yes\\(\\heartsuit\\ \\)       No︎✘ Question D In plot (D), does the slope function displayed correspond to the function that’s graphed?     Yes︎✘        No\\(\\heartsuit\\ \\) Exercise 17.12: eyded In the following, three different functions are described. Your task is to write down the dimension of the input and of the output. Do this both for the function itself, and for the derivative of the function. For example, the dimension of the output of \\(N(y)\\) given below is P, for population. The input has dimension T, for time. A. The given function is \\(N(y)\\), the population of the Netherlands in year \\(y\\). Dimension of input to \\(N(y)\\)? Dimension of output from \\(N(y)\\)? Dimension of input to \\(\\partial_y N(y)\\)? Dimension of output from \\(\\partial_y N(y)\\)? B. The given function is \\(p(u)\\), the net profit from a manufactured good as a function of the number of units manufactured. Dimension of input to \\(p(u)\\)? Dimension of output from \\(p(u)\\)? Dimension of input to \\(\\partial_u p(u)\\)? Dimension of output from \\(\\partial_u p(u)\\)? C. The given function is \\(w(t)\\), the amount of water in a leaky bucket at any time after the bucket was filled. Dimension of input to \\(w(t)\\)? Dimension of output from \\(w(t)\\)? Dimension of input to \\(\\partial_t w(t)\\)? Dimension of output from \\(\\partial_t w(t)\\)? Exercise 17.14: elclvd Question A Tanks for bulk storage of natural gas are typically large cylinders with a cap that can move up and down. The volume of the tank is a function of the position of the cap. What is the dimension of the derivative of cylinder volume with respect to cap position?     \\(L^2\\)\\(\\heartsuit\\ \\)       \\(L\\)︎✘        \\(L^3\\)︎✘        \\(L^3/T\\)︎✘        \\(T/L^3\\)︎✘ Exercise 17.16: nsmx8w3 The standard model of epidemics used in public health planning is called the SIR model. (SIR stands for “Susceptible (S), Infective (I), Recovered (R),” the sequence that a person starts in, moves to, and ends up in (hopefully!) in an epidemic.) One of the equations in the SIR model is \\[\\frac{dS}{dt} = -a S I\\] The notation \\(dS/dt\\) means “the rate of change of number of susceptibles, S, with respect to time.” This has dimension “people/T.” The dimensions \\([S]\\) and \\([I]\\) are each simply “people.” Question A What is \\([a]\\)? T︎✘ T\\(^{-1}\\)︎✘ people/T︎✘ Then \\([a S I]\\) would be people\\(^3\\)/T, but that’s not the same as \\([dS/dt]\\). people\\(^{-1}\\) T\\(^{-1}\\)Correct. This correctly gives \\([a S I]\\) as people/T, which is the same as \\([dS/dt]\\). people \\(\\times\\) T︎✘ None of the above.︎✘ Another equation in the SIR model describes how the number of infective people changes over time: \\[\\frac{dI}{dt} = - a S I - b I\\] where \\([\\frac{dI}{dt}] =\\) people/T. Question B What is \\([b]\\)? T︎✘ T\\(^{-1}\\)Right!  people/T︎✘ Then \\([a S I]\\) would be people\\(^3\\)/T, but that’s not the same as \\([dS/dt]\\). people\\(^{-1}\\) T\\(^{-1}\\)︎✘ If this were true, \\([bI]\\) would be T\\(^{-1}\\). But \\([bI]\\) has to be the same as \\([dI/dt]\\), which is people \\(T^{-1}\\). people \\(\\times\\) T︎✘ None of the above.︎✘ Galileo was not aware of Kepler’s elliptical theory, even though they lived at the same time.↩︎ Yes, “minification” is a word!↩︎ It’s pretty easy to see in an expression like \\(f(x,y)\\) why we call \\(f()\\) a function. But an expression like \\(3+2\\) also involves a function of two inputs. It’s just that we write the name of the function (+) in between the two inputs. This is called infix notation.↩︎ For more discussion, see Tony Aspromourgos (2007) “Adam Smith’s treatment of market prices and their relationship to &lt;&gt; and &lt;&gt;” History of Economic Ideas , 2007, Vol. 15, No. 3 (2007), pp. 27-57 Link↩︎ Smith commented on the difference between “demand” and “effectual demand:” “A very poor man may be said, in some sense, to have a demand for a coach and six [a carriage pulled by six horses]; he might like to have it; but his demand is not an effectual demand, as the commodity can never be brought to market in order to satisfy it.” In today’s economy, of course, transportation superior to a coach and six is readily demanded and supplied.↩︎ Air pressure at sea level is about 100 kiloPascal.↩︎ "],["evanescent-h.html", "Chapter 18 Evanescent h", " Chapter 18 Evanescent h Recall that the local rate of change of a function can be written as a ratio of rise-over-run: \\[\\partial_t f(t) \\equiv \\frac{f(t+h) - f(t)}{h}\\] where \\(h\\) is the length of the “run.” The idea of the instantaneous rate of change is to make \\(h\\) as small as possible. In the very early days of calculus, the vanishing \\(h\\) was described as “evanescent.” (Dictionary definition: “tending to vanish like vapor.”34) Another good image of \\(h\\) becoming as small as possible comes from the same University of Oxford mathematician whose poem The Jabberwocky we introduced in Chapter 5. In Alice in Wonderland, Dodgson introduced the character of the Cheshire Cat. 2370 Figure 18.1: Vanishing \\(h\\) in the form of the Chesire Cat from Alice in Wonderland. Start our story with two of the basic modeling functions that, like the characters from Alice in Wonderland, have considerable “personality”: the sinusoid (sin()) and the sigmoid (pnorm()). Figure 18.2: The pattern-book sinusoid and sigmoidal functions. A vertical blue line has been added to mark the input \\(t=0\\) The computer can easily construct the slope functions for the sinusoid and sigmoid, which we’ll call Dsin() and Dsigma() respectively. Dsin &lt;- makeFun(( sin(t+h) - sin(t))/h ~ t, h=0.1) Dsigma &lt;- makeFun((pnorm(t+h) - pnorm(t))/h ~ t, h=0.1) In the tilde expression handed to makeFun(), we’ve identified t as the name of the input and given a “small” default value to the h parameter. But R recognizes that both Dsin() and Dsigma() are functions with two inputs, t and h, as you can see in the parenthesized argument list for the functions. Dsin ## function (t, h = 0.1) ## (sin(t + h) - sin(t))/h Dsigma ## function (t, h = 0.1) ## (pnorm(t + h) - pnorm(t))/h This is a nuisance, since when using the slope functions we will always need to think about h, a number that we’d like to describe simply as “small,” but for which we always need to provide a numerical value. A surprisingly important question in the development of calculus is, “What can we do to avoid this nuisance?” To find out, let’s look at Dsin() and Dsigma() for a range of values of h, as in Figure 18.3. 2372 Figure 18.3: The slope functions of the sinusoid and sigmoid. Each curve shows the slope function for a particular numerical choice of h. Both panels show \\(h=2, 1, 0.5, 0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001\\). Some observations from this numerical experiment: As \\(h\\) gets very small, the slope function doesn’t depend on the exact value of \\(h\\). As you can see in Figure 18.3, the graphs of the functions with the smallest \\(h\\) (blue), with labels near the top of the graph) lie on top of one another. This will provide a way for us, eventually, to discard \\(h\\) so that the slope function will not need an \\(h\\) argument. For small \\(h\\), we have \\(\\partial_t \\sin(t) = \\sin(t + \\pi/2) = \\cos(t)\\). That is, taking the slope function of a sinusoid gives another sinusoid, shifted left by \\(\\pi/2\\) from the original. Or, in plain words, for small \\(h\\) the cosine is the slope function of the sine. For small \\(h\\), we have \\(\\partial_t \\pnorm(t) = \\dnorm(t)\\). That is, for small \\(h\\) the gaussian function is the slope function of the sigmoid \\(\\dnorm()\\) function. You can confirm these last two statements by comparison with the original functions, especially the alignment of the peaks of the slope functions with respect to the peak of the sinusoid and the half-way point of the sigmoid. 2374 Here you use \\(t\\) as the name of the input and \\(\\partial_t\\) as the notation for differentiation. Previously in this block you used \\(x\\) as the input name and \\(\\partial_x\\) for differentiation. Are they the same? 2376 Mathematically, the name of the input makes no difference whatsoever. We could call it \\(x\\) or \\(t\\) or \\(y\\) or Josephina. What’s important is that the name be used consistently on the left and right sides of \\(\\equiv\\), and that the derivative symbol \\(\\partial\\) has a subscript that identifies the with-respect-to input. All these are the same statement mathematically: 2378 \\[\\partial_x\\, x = 1\\ \\ \\ \\ \\partial_t\\, t = 1\\ \\ \\ \\ \\partial_y\\, y = 1\\ \\ \\ \\ \\partial_\\text{Josephina} \\text{Josephina} = 1\\] Admittedly, the last one is hard to read. When we look at derivatives of functions of multiple variables we will need to be thoughtful about our choice of the with-respect-to input. But we want you to get used to seeing different input names used for differentiation. 2380 Now consider the slope functions of the logarithm and exponential functions. Figure 18.4: The slope functions of the logarithm and exponential. These numerical experiments with the logarithm and exponential functions are more evidence that, as \\(h\\) gets small, the slope function doesn’t depend strongly on \\(h\\). And, we find that: For small \\(h\\), the slope function of the logarithm is a power-law function: \\(\\partial_t \\ln(t) = \\frac{1}{t}\\). For small \\(h\\), the slope function of the exponential is the exponential itself: \\(\\partial_t e^x = e^x\\). You can confirm these by evaluating the slope function of the exponential at \\(t=0\\) and \\(t=1\\), and the slope function of the logarithm at \\(t= 2, 1, 1/2, 1/4, 1/8.\\) “Small” and “zero,” although related, are different. In constructing a derivative, we use smaller and smaller \\(h\\), but never zero. Let’s see what happens if instead of evanescent h, we use zero h. For example, we can use the slope function Dsin() and Dsigma() that we created earlier. Setting \\(h\\) to zero does not give a result that is the instantaneous rate of change of anything: 2384 Dsin(t=1, h=0) ## [1] NaN Dsigma(t=0, h=0) ## [1] NaN In NaN, you can hear the echo of your fourth-grade teacher reminding you that it is illegal to divide by zero. Think of evanescent \\(h\\) as the vapor in the definition of “evanescent”: “tending to vanish like vapor.” This vapor is like the solvent in paint. You don’t want the solvent once the paint is on the wall; wet paint is a nuisance. But getting the paint from the container to the wall absolutely needs the solvent. 2386 We used the solvent \\(h\\) earlier in the chapter in the numerical experiments that led us to the derivatives of the pattern-book functions, for instance \\(\\partial_x e^x = e^x\\) or \\(\\partial_x \\sin(x) = \\cos(x)\\). Eventually, we’ll construct an \\(h\\)-free theory of differentiation, reducing the process to a set of algebraic rules in which \\(h\\) never appears. With this as our goal, let’s continue using \\(h\\) for a while to find some additional useful facts about derivatives. 2388 Source↩︎ "],["computing-derivs.html", "Chapter 19 Computing derivatives 19.1 A function from a function 19.2 Finite differencing 19.3 The slope-function operator 19.4 Symbolic differentiation 19.5 Exercises", " Chapter 19 Computing derivatives To differentiate a function \\(g(x)\\) means simply to produce the corresponding function \\(\\partial_t g(x)\\). This is often called “finding the derivative,” language that resonates with the high-school algebra task of “finding \\(x\\).” Rather than conjuring an image of searching high and low for a missing function, it’s more accurate to say, “compute the derivative.” 2150 In this chapter we’ll introduce two ways of computing a derivative. For simplicity we will write \\(x\\) for the with-respect-to-variable, although in practice you might be using \\(t\\) or \\(z\\) or something else. 2155 Symbolic differentiation, which uses a set of re-writing rules Finite-differencing, which is based directly on the \\({\\cal D_x}\\) operator In the days when functions were always presented using formulas, symbolic differentiation was usually the only method taught. Nowadays, when functions are just as likely to be described using data and an algorithm, finite-differencing provides the practical approach. 2160 19.1 A function from a function Recall that the goal of differentiation is to make a function out of an already known function. We’ll call the already known function \\(g(x)\\). In Chapter 17 we’ve outlined the properties that the new function should have and gave a nice naming convention, \\(\\partial_x g(x)\\) that shows where the new function comes from. In this section we’ll put that aside and focus on the question of what it means to “make a function.” 2165 When mathematics is done with paper and pencil, “making a function” is a matter of writing a formula, such as \\(x^2 \\sin(x) + 3\\) and sometimes giving a name to the formula, e.g. \\(h(x) \\equiv x^2 \\sin(x) + 3\\). We are essentially writing something down that will make sense when viewed by another person trained in the conventions of mathematical notation. 2170 For a computer, on the other hand, a function is a definite kind of thing. We “make a function” by creating that kind of thing and, usually, giving it a name. We evaluate a function—that is, apply the function to inputs to produce an output—by using specific punctuation, which in R involves the use of parentheses, for instance name(input). 2175 The computer language itself provides specific means to define a new function. In R/mosaic, you first construct a tilde expression naming the function inputs (right side of the tilde) and specifying the algorithm of that function (left side of the tilde), as with this formula: f_description &lt;- x^2 * sin(x) + 3 ~ x # a tilde expression On its own, f_description cannot be used like a function because it was constructed as something else: a tilde expression. Trying to use f_description in the way one uses a function produces an error. f_description(2) Error in f_description(2): could not find function &quot;f_description&quot; In between the tilde expression and the final result—a function—is software that translates from tilde-expressions into functions: f &lt;- makeFun(f_description) The new creation, f() can now be used like any other function, e.g. f(2) ## [1] 6.63719 Down deep inside, makeFun() uses a more basic function-creation syntax which looks like this function(x) {x^2 * sin(x) + 3} ## function(x) {x^2 * sin(x) + 3} You can see all the same information that was in the tilde description, just arranged differently. Almost every computer language provides something like function. The internal workings of function are elaborate and detailed … only advanced programmers need to be aware of them. This, in much the same way as it’s unnecessary to understand the workings of a transistor in order to use a computer, or comprehend the biochemistry of a COVID vaccine in order to benefit from it. 2180 In the same spirit as makeFun(), which translates a tilde-expression into the corresponding function, in R/mosaic you have D() which takes a tilde expression and translates it into the derivative of the function described.35 For example: D(f_description) ## function (x) ## 0 19.2 Finite differencing You can use the definition of the slope function \\[{\\cal D}_x f(x) = \\frac{f(x+0.1) - f(x)}{0.1}\\] to create an approximation to the derivative of any function. Like this: g &lt;- makeFun(sin(2*x)*(pnorm(x/3)-0.5) ~ x) dg &lt;- makeFun((g(x+0.1) - g(x))/0.1 ~ x) Whenever you calculate a derivative function, you should check against mistakes or other sources of error. For instance, whenever the derivative is zero, the original function should have an instantaneous slope of zero. Figure 19.1 shows a suitable plot for supporting this sort of check. zeros_of_dg &lt;- findZeros(dg(x) ~ x, xlim=c(-5,5)) slice_plot(g(x) ~ x, domain(x=c(-5,5)), npts=500) %&gt;% slice_plot(dg(x) ~ x, color=&quot;magenta&quot;, npts=500) %&gt;% gf_hline(yintercept = ~ 0, color = &quot;orange&quot;, size=2, alpha=0.2) %&gt;% gf_vline(xintercept = ~ x, data=zeros_of_dg, color=&quot;blue&quot;) Figure 19.1: The x-position of zero crossings of the derivative function (magenta) are marked with blue lines. The zero crossings correspond to local maxima or minima in the original function (black). This is because the original function has slope zero at maxima and minima. Look very closely at Figure 19.1, particularly at the places where the blue vertical markers cross the function \\(g(x)\\) (black). They should cross exactly at the flat zone, but they are a little shifted to the left. (You might have to zoom in on the plot to see the offset between the vertical blue marker and the local maximum of the function.) That’s the sense in which the finite-difference approach gives an approximation. The small left-shift stems from the use of 0.1 in the definition of the zero function. Use a smaller value, say 0.01 or 0.001, and you won’t be able to see the shift at all. 2185 In modeling work, there’s nothing wrong with an approximation so long as it is good enough for your purposes. We picked the value 0.1 for our definition of the slope function because it works very well with the pattern-book functions. Here, “very well” means you can’t easily see in the graph any deviation compared to the exact derivative. 2190 When a calculation can be done exactly (without outrageous effort) it certainly makes sense to use the exact method. However: It’s useful to have an easy, approximate method always at hand. This lets you check the results of other methods for the possibility of some blunder or mis-conception. The slope function approach to differentiation is certainly easy, and if you think the approximation isn’t good enough, then instead of 0.1 use something smaller. (Chapter 18 discusses how small is too small.) The computer makes it practical to employ the slope function as a useful approximation to the derivative. There are many other mathematical methods that the computer has made feasible, for instance the methods of machine learning. These methods create functions that sometimes cannot be handled by the traditional (“exact”) methods of differentiation. 2195 19.3 The slope-function operator Take a look at the statement we used to construct the slope function of g(): dg &lt;- makeFun((g(x+0.1) - g(x))/0.1 ~ x) There is almost nothing about this statement that has anything to do with the specifics of how we defined g(); we could have used any \\(g()\\). The “almost” in the previous sentence is about the choice of 0.1, which isn’t guaranteed to be small enough. 2200 In today’s world, considerable mathematical content is conveyed to users not directly with formulas but with software that implements the formulas. And in software, it’s a good idea to have a name for each operation so that the readers and authors of software have a completely explicit indication that a particular operation is being used. When you have many slope functions to compute in some application, it can be error prone to write many statements that are versions of dg &lt;- makeFun((g(x+0.1) - g(x))/0.1 ~ x) It’s too easy to make a mistake in copying this over, producing a wrong computation that can be hard to detect in the code. For instance, each of these statements looks a lot like the above, but all of them are different and none is constructing a slope function: df &lt;- makeFun((f(x-0.1) - f(x))/0.1) dh &lt;- makeFun((h(x+0.1) - f(x))/0.1) du &lt;- makeFun((u(x+0.1) - u(x))/1.0) dg &lt;- makeFun(g(x+0.1) - g(x)/0.1) Much easier to read and more reliable would be something like this: df &lt;- slopeFun(f(x) ~ x) dh &lt;- slopeFun(h(x) ~ x) du &lt;- slopeFun(u(x) ~ x) Creating such an R operator is a programming task and in that sense beyond the scope of this course. Still, it’s a good idea to get in the habit of reading programming code. So here goes … Creating a slopeFun() operator: 2205 Instead of makeFun() which is really just maknig for mathematical functions, R programmers use a construction named function(). The name of the arguments goes inside the parentheses. The function algorithm goes between curly braces: { } We’re going to use a tilde expression as the input to slopeFun(). This is how the other R/mosaic operators work. That will be easier for the user and will also give us access to those other operators if we need them in writing slopeFun(). The object returned by the slopeFun() operator will be, of course, a function. We’ve been using makeFun() to make our mathematical functions, so expect to see that in the code for slopeFun(). There’s the matter of whether 0.1 is small enough. So let’s use an h argument in place of 0.1 that we can change when needed. Putting this together, here is a slopeFun() operator that takes a tilde expression (as do makeFun() and slice_plot()) and produces a new mathematical function that is the slope function for the mathematical function described in the tilde expression. (There are a couple of R programming elements in slopeFun() that you aren’t expected to understand completely. But do try reading the code to see what sense you can make of it.) # two arguments, a tilde expression and a choice for h # with a default value slopeFun &lt;- function(tilde, h=0.1) { # Turn the tilde expression into a function g &lt;- makeFun(tilde) # just like before, with h instead of 0.1 makeFun((g(x + h) - g(x))/h ~ x, h=h) } Another important advantage of centralizing computations in a single operator is that the operator can be made more sophisticated without being harder to use. For instance, R/mosaic provides the D() operator for computing derivatives. This knows the rules for symbolic differentiation that will be introduced in Chapter 22 and switches to a finite-difference method (like slopeFun(), but more sophisticated) when symbolic differentiation isn’t applicable. In practice, instead of home-brewed functions like slopeFun(), you can use the R/mosaic D() instead, which takes a more careful approach to the computer numerics and uses symbolic differentiation whenever possible to give results without numerical error. 19.4 Symbolic differentiation Symbolic differentiation is the process of taking a formula and translating it to a new formula according to certain patterns or rules. Each rule is ultimately derived from the definition of the slope function and the differencing operator. 2215 As you recall, the differencing operator \\(\\diff{x}\\) turns a function into its slope function \\[\\diff{x} f(x) \\equiv \\frac{f(x+h) - f(x)}{h}\\] 19.4.1 The line rule Let’s look at one where we already know the result: The straight line function \\(\\line(x) \\equiv a x + b\\) has a slope function that is constant: \\(\\diff{x}\\line(x) = a\\) \\[\\diff{x}\\line(x) = \\frac{\\line(x+h) - \\line(x)}{h} = \\frac{\\left[\\strut a (x+h) + b\\right] - \\left[\\strut a x + b\\right]}{h} = \\frac{ah}{h} = a\\] The derivative is the slope function with \\(h\\) made as small as possible. It’s tempting to think of this as \\(h = 0\\), but that would imply dividing by zero in the differencing operator. Being wary about the possibility of dividing by zero, mathematicians adopt a convention which indicates clearly that \\(h\\) is to be small, but not zero. This convention is marked with the notation \\(\\lim_{h \\rightarrow 0}\\), which means “as close as you can get to zero, but not zero exactly.” 2220 \\[\\partial_x \\line(x) \\equiv \\lim_{h\\rightarrow 0} \\frac{\\line(x+h) - \\line(x)}{h} =\\\\ \\ \\\\ = \\lim_{h\\rightarrow 0} \\frac{a h}{h} = a\\] This derivation is unarguably correct for any non-zero \\(h\\). This short derivation gives us a basic differentiation rule which we can divide into 3 special cases. Line rule: \\(\\partial_x ax + b = a\\) \\(\\partial_x ax = a\\). The function \\(ax\\) is \\(\\line(x)\\) with \\(b=0\\). \\(\\partial_x b = 0\\). The function \\(b\\) is \\(\\line(x)\\) with \\(a=0\\) and thus is the constant function. \\(\\partial_x x = 1\\). The function \\(x\\) is \\(\\line(x)\\) with \\(a=1\\) and \\(b=0\\). Remember that \\(\\partial_x f(x)\\) is always a function no matter what kind of function \\(f(x)\\) is. The functions associated with the line rule are all constant functions, meaning the output doesn’t depend on the input. 19.4.2 The square rule Only for the \\(\\line()\\) function and its three special cases is the derivative a constant function. And \\(\\line()\\) is the only function for which the \\(h\\) in the differencing operator disappears on its own. For instance, consider the square function: \\(g(x) \\equiv x^2\\). 2225 \\[\\partial_x [x^2] = \\lim_{h\\rightarrow 0}\\frac{(x+h)^2 - x^2}{h} =\\\\ \\ \\\\ =\\lim_{h\\rightarrow 0}\\frac{(x^2 + 2 x h + h^2) - x^2}{h} =\\\\ \\ \\\\ = \\lim_{h\\rightarrow 0}\\frac{2 x h + h^2}{h} =\\\\ \\ \\\\ =\\lim_{h\\rightarrow 0} [2x + h]\\\\ \\] It’s accepted that the limit of a sum is the sum of the limits, so … \\[\\lim_{h\\rightarrow 0} \\left[\\strut 2 x + h\\right]= \\lim_{h\\rightarrow 0} 2x + \\lim_{h\\rightarrow 0}h\\] The limit of something not involving \\(h\\) is just that thing, giving \\[\\lim_{h\\rightarrow 0}2x = 2x\\ .\\] Finally, when an expression including \\(h\\) doesn’t involve division by \\(h\\), we can remove the \\(\\lim_{h\\rightarrow 0}\\) and just use \\(h=0\\) instead, so \\[\\lim_{h\\rightarrow 0} h = 0\\ .\\] Putting these together gives \\[\\partial_x [x^2] = 2x + \\lim_{h\\rightarrow 0}h = 2x\\] We’ll write this as another differentiation rule. Quadratic rule: \\(\\partial_x [x^2] = 2x\\) 19.4.3 The exponential rule Let’s take on the exponential function \\(h(x) \\equiv e^x\\): \\[\\partial_x e^x = \\lim_{h\\rightarrow 0}\\frac{e^{x+h} - e^x}{h} = e^x \\lim_{h\\rightarrow 0}\\left[\\frac{e^h - 1}{h}\\right]\\] At a glance, it can be hard to know what to make of \\(\\lim_{h\\rightarrow 0} (e^h-1)/h\\). Setting \\(h=0\\) in the denominator is perfectly legitimate and gives \\(e^0 - 1 = 0\\). But that still leaves the \\(h\\) in the numerator. Still, for any non-zero \\(h\\), the division is legitimate, so let’s see what happens as \\(h \\rightarrow 0\\): f &lt;- makeFun((exp(h) - 1)/h ~ h) f(0.1) ## [1] 1.051709 f(0.01) ## [1] 1.005017 f(0.001) ## [1] 1.0005 f(0.0001) ## [1] 1.00005 f(0.0000001) ## [1] 1 f(0.0000000001) ## [1] 1 Setting \\(h\\) exactly to zero, however, won’t work: it produces NaN. f(0) ## [1] NaN Since \\(\\lim_{h\\rightarrow 0} (e^h-1)/h = 1\\), we have Exponentiation rule: \\(\\partial_x e^x = e^x\\) 19.4.4 The reciprocal rule Still another example: the reciprocal function, written equivalently as \\(1/x\\) or \\(x^{-1}\\) \\[\\partial x^{-1} = \\lim_{h\\rightarrow 0}\\frac{\\frac{1}{x+h} - \\frac{1}{x}}{h} \\\\ \\ \\\\ = \\lim_{h\\rightarrow 0} \\frac{\\frac{x - (x+h)}{x(x+h)}}{h}\\\\ \\ \\\\ = \\lim_{h\\rightarrow 0}\\frac{x - x+h}{x(x+h)h} = -\\lim_{h\\rightarrow 0}\\frac{h}{x(x+h)h} \\\\ \\ \\\\ = -\\lim_{h\\rightarrow 0}\\frac{1}{x^2 + hx}\\] So long as \\(x \\neq 0\\), there is no divide-by-zero problem even when \\(h=0\\), but let’s see what the computer thinks: g &lt;- makeFun(-1/(x^2 + h*x) ~ h, x=10) g(0.1) ## [1] -0.00990099 g(0.01) ## [1] -0.00999001 g(0.001) ## [1] -0.009999 g(0.0001) ## [1] -0.0099999 g(0.0000001) ## [1] -0.01 g(0.0000000001) ## [1] -0.01 g(0) ## [1] -0.01 Setting \\(h\\) to zero in the last expression gives another differentiation rule: Reciprocal rule: \\(\\partial_x \\frac{1}{x} = -\\frac{1}{x^2}\\) 19.4.5 Power-law rule We don’t yet have the tools needed to prove a formula for the derivative of power-law functions, but we already have some instances where we know the derivative: \\(\\partial_x x^2 = 2 x\\) \\(\\partial_x x^1 = 1\\) \\(\\partial_x x^0 = 0\\) A rule that fits all these examples is \\[\\partial_x x^p = p\\, x^{p-1}\\ .\\] For instance, when \\(p=2\\) the rule gives \\[\\partial_x x^2 = 2\\, x^1 = 2 x\\] since \\(p-1\\) will be 1$. It’s not too hard to do the algebra to find the derivative of \\(x^3\\). According to the proposed rule, the derivative should be \\[\\partial_x x^3 = 3 x^2\\ .\\] Let’s check this via the definition of the derivative: \\[\\partial_x x^3 = \\lim_{h \\rightarrow 0}\\frac{(x+h)^3 - x^3}{h}\\] Direct multiplication \\((x+h)(x+h)(x+h)\\) gives \\[(x+h)^3 = x^3 + 3\\, x^2 h + 3\\, x h^2 + h^3\\] Consequently, the limit definition amounts to: \\[\\partial_x x^3 = \\lim_{h\\rightarrow 0}\\frac{3\\, x^2 h + 3\\, x h^2 + h^3}{h} = \\lim_{h\\rightarrow 0} \\left[\\strut 3\\, x^2 + 3\\,x h + h^2\\right]\\] But there is no divide-by-\\(h\\) in sight, so we can resolve \\(\\lim_{h\\rightarrow 0}\\) to \\(h=0\\), giving \\[\\partial_x x^3 = 3 x^2\\ ,\\] consistent with the proposed rule. Those familiar with the use of Pascal’s Triangle for finding the terms of binomial expansions such as \\((x + h)^p\\) will gain insight into the \\(p x^{p-1}\\) rule. 19.4.6 List of pattern-book rules We’ll save for later the derivation of the derivatives of the other pattern-book functions, but note that the gaussian function is defined to be the derivative of the sigmoidal function. Name \\(f(x)\\) \\(\\partial_x f(x)\\) exponential \\(e^x\\) \\(e^x\\) logarithm (natural) \\(\\ln(x)\\) \\(1/x\\) sinusoid \\(\\sin(x)\\) \\(\\cos(x)\\) square \\(x^2\\) \\(2x\\) proportional \\(x\\) \\(1\\) constant 1 0 reciprocal \\(1/x\\) or \\(x^{-1}\\) \\(-1/x^2\\) gaussian (hump) \\(\\dnorm(x)\\) \\(-x\\, \\dnorm(x)\\) sigmoid \\(\\pnorm(x)\\) \\(\\dnorm(x)\\) Figure 19.2: A diagram showing how differentiation connects the pattern-book functions to one another. 19.5 Exercises Exercise 19.1: kelwx The most common programming pattern in the R/mosaic calculus commands is: Operator(tilde_expression, [optional details]) Some operators: slice_plot(), contour_plot, make_Fun(), D(), antiD(), findZeros() For each of the R/mosaic expressions, determine which kind of thing is being created. Feel free to run the expressions in a SANDBOX. Question A makeFun(a*x - b ~ x) a function of x︎✘ Fair enough. But the function also has arguments a and b a function of x, a, and bRight!  a tilde expression︎✘ The tilde expression is the input to the operator. The operator translates the tilde expression into something else. a plot︎✘ a data frame︎✘ an error︎✘ Question B D(a*x - b ~ x) a function of a︎✘ a function of x, a, and bGood.  a tilde expression︎✘ a plot︎✘ a data frame︎✘ an error︎✘ Question C antiD(a*x - b ~ x) a function of a︎✘ a function of x, a, and bRight!  a tilde expression︎✘ a plot︎✘ a data frame︎✘ an error︎✘ Question D slice_plot(a*x - b ~ x, domain(x=c(0,5))) a function of x︎✘ a function of x, a, and b︎✘ a tilde expression︎✘ a plot︎✘ The expression is intended to make a plot, but it doesn’t work. Specific numerical values would need to be provided for a and b. You could have provided numerical values to a and b by assigning them in previous statements. If that’s what you had in mind, you deserve full credit. a data frame︎✘ an errorGood.  Question E f &lt;- makeFun(a*x + b ~ x, a=2, b=-4) slice_plot(f(x) ~ x, domain(x=c(0,5))) a function of x︎✘ a function of x, a, and b︎✘ a tilde expression︎✘ a plotExcellent! This works because there are specific values provided for the a and b parameters. a data frame︎✘ an error︎✘ Question F findZeros(a*x - b ~ x, domain(x=c(0,5))) a function of x︎✘ a function of x, a, and b︎✘ a tilde expression︎✘ a plot︎✘ The expression is intended to make a data frame, but it doesn’t work. Specific numerical values would need to be provided for a and b. a data frame︎✘ an errorCorrect.  Question G a*x - b ~ x a function of x︎✘ a function of x, a, and b︎✘ a tilde expressionRight!  a plot︎✘ The expression is intended to make a plot, but it doesn’t work. Specific numerical values would need to be provided for a and b. a data frame︎✘ an error︎✘ Question H f &lt;- makeFun(a*x + b ~ x, a=2, b=-4) findZeros(f(x) ~ x) a function of x︎✘ a function of x, a, and b︎✘ a tilde expression︎✘ a plot︎✘ a data frameGood.  an error︎✘ Question I Suppose you create a function in the usual way, e.g. f &lt;- makeFun(a*x + b ~ x, a=2, b=-4). Which of the following will plot a straight-line function with a slope of 5. slice_plot(f(x) ~ x, domain(x=c(-5, 5)))︎✘ The default value of a is 2, so the line would have a slope of 2. slice_plot(f(x, b=2), domain(x=c(-5, 5))︎✘ It’s a that is the slope parameter. slice_plot(f(x, a=5), domain(x=c(-5, 5))Right!  Exercise 19.2: K05LrF As you know, given a function \\(g(x)\\) it’s easy to construct a new function \\({\\cal D}_x g(x)\\) that will be an approximation to the derivative \\(\\partial_x g(x)\\). The approximation function, which we call the slope function, can be \\[{\\cal D}_x g(x) \\equiv \\frac{g(x + 0.1) - g(x)}{0.1}\\] Open a SANDBOX and use makeFun() to create a function \\(g(x) \\equiv \\sin(x)\\) and another that will be the slope function, called it slope_of_g(). g &lt;- makeFun(sin(x) ~ x) slope_of_g &lt;- makeFun( _your_tilde_expression_here ) Question A What’s the value of slope_of_g(1)?     0.3749︎✘        0.4973\\(\\heartsuit\\ \\)       1.3749︎✘        1.4973︎✘ Using your sandbox, plot both g() and slope_of_g() (in blue) on a domain \\(-5 \\leq x \\leq 5\\). This can be done with slicePlot() in the following way: slice_plot(g(x) ~ x, domain(x=c(-5,5))) %&gt;% slice_plot(slope_of_g(x) ~ x, color=&quot;blue&quot;) Question B Which of these statements best describes the graph of \\(g()\\) compared to slope_of_g()? slope_of_g() is shifted left by about \\(\\pi/2\\) compared to g(x).Nice!  slope_of_g() is shifted left by about \\(\\pi\\) compared to g(x).︎✘ slope_of_g() has a larger amplitude than g()︎✘ The output of slope_of_g() is always positive︎✘ slope_of_g() is practically the same function as g(). That is, for any input the output of the two functions is practically the same.︎✘ Exercise 19.5: qCfet3 Recall the differentiation rules for three of the pattern-book functions as presented in Section 19.4: Function name Formula Formula for derivative power-law exponent \\(p\\) Identity \\(x\\) \\(1\\) 1 Square \\(x^2\\) \\(2\\, x\\) 2 Reciprocal \\(1/x\\) \\(-1/x^2\\) -1 All three of these pattern-book functions are members of the power-law family: \\(x^p\\). They differ only in the value of \\(p\\). There is a differentiation rule for the power-law family generally. The next question offers several formulas for this rule, only one of which is correct. You can figure out which one by trying the pattern-book functions in the table above and seeing which formula gives the correct answer for the derivative. Question A Which of these formulas gives the correct differentiation rule for the power-law family \\(x^p\\)? \\(p x^{p-1}\\)Correct.  \\((p-1) x^{p+1}\\)︎✘ If this were true, the derivative of \\(x^2\\) would be \\(x^3\\). \\(x^{p-1}\\)︎✘ \\((p-1) x^{p-1}\\)︎✘ If this were true, the derivative of the identity function (\\(p=1\\)) would be 0. Exercise 19.6: ykels Although we created an R function named slopeFun() for the purposes of demonstration, it’s better to use the R/mosaic operator D() which calculates the derivative, sometimes using symbolic methods and sometimes using a finite-difference method. As an example of the use of D(), here is some more R code that defines a function f() and finds \\(\\partial_x f()\\), calling it d_f(). Then a slice plot is made of both f() and d_f(). f &lt;- makeFun(sqrt(exp(x)) - x^2 ~ x) d_f &lt;- D(f(x) ~ x) slice_plot(f(x) ~ x, domain(x=c(0, 5))) %&gt;% slice_plot(d_f(x) ~ x, color = &quot;orange3&quot;) ::: For each of the following functions, write a brief comparison of the function to it’s differenced version. You can combine phrases such as “same shape,” “different shape. larger in amplitude,” “smaller in amplitude,” “same period,” “shorter period,” “longer period,” or whatever seems appropriate. For instance, for the original example in the sandbox, a reasonable comparison might be, “f() is concave down but Diff(f) is concave up.” Essay question tmp-5: A. For the function \\(f(x) \\equiv 3 x\\), compare \\(f()\\) to \\(\\partial_x f\\). Essay question tmp-6: B. For the function \\(f(x) \\equiv x^2\\), compare \\(f()\\) to \\(\\partial_x f\\). Essay question tmp-7: C. For the function \\(f(x) \\equiv e^x\\), compare \\(f()\\) to \\(\\partial_x f\\). Essay question tmp-8: D. For the function \\(f(x) \\equiv e^{-0.3 x}\\), compare \\(f()\\) to \\(\\partial_x f\\). Essay question tmp-9: E. For the function \\(f(x) \\equiv \\sin(x)\\), compare \\(f()\\) to \\(\\partial_x f\\). Essay question tmp-10: F. For the function \\(f(x) \\equiv \\sin(2 \\pi x)\\), compare \\(f()\\) to \\(\\partial_x f\\)). Essay question tmp-11: G. For the function \\(f(x) \\equiv \\sin(\\frac{2 \\pi}{20} x)\\), compare \\(f()\\) to \\(\\partial_x f\\)). Mathematically, one differentiates a function, not a tilde expression. But differentiation requires specification of the with-respect-to-input, so R/mosaic implements differentiation by using tilde-expression syntax.↩︎ "],["concavity-curvature.html", "Chapter 20 Concavity and curvature 20.1 Quantifing concavity and curvature 20.2 Concavity 20.3 Curvature 20.4 Exercises", " Chapter 20 Concavity and curvature Looking at the graph of a function, our eyes immediately register the slope at any point we focus on. A glance shows whether the slope at that point is positive or negative. Comparing the slopes at two locales is also an automatic visual task: most people have little difficulty saying which slope is steeper. One consequence of this visual ability is that it’s easy to recognize whether a line that touches the graph at a point is tangent to the graph. 2230 There are other aspects of functions, introduced in Section 4.3, that are also readily discerned from a glance at the function graph. 2235 Concavity: We can tell within each locale whether the function is concave down, concave up, or not concave. Curvature: Generalizing the tangent line capability a bit, we can do a pretty good job of eyeballing the tangent circle recognizing whether a circle has much too large or much too small a radius.. Smoothness: We can distinguish smooth functions from non-smooth ones. Or, as you will see, there are some kinds of smoothness that we can discern and others that are not apparent to the eye. The following exercises are simply meant to test your visual acuity in spotting concavity, tangency, and smoothness. Then we’ll move on to the calculations involved. 20.1 Quantifing concavity and curvature It often happens in building models that the modeler (you!) knows something about the concavity and/or curvature of a function. For example, concavity is important in classical economics; the curve for supply is concave down while the curve for demand is concave up. For a train, car, or plane, there are forces that depend on the curvature of the track, road, or trajectory. If you are designing a road, you’ll need to calculate the curvature in order to know if the road is safe at the indicated speed. It turns out that quantifying these properties of functions or shapes is naturally done by calculating derivatives. 2240 Imagine designing a highway. Due to the terrain, part of the road is oriented east-west and another part north-south. For vehicles to use the road, those two parts need to be connected together! (In math-speak, we might say that the road has to be continuous, but this is just common sense.) From your experience with highways, you know the connection will be a smooth curve. If the curve is part of a circle, then the design needs to specify the radius of curvature of the circle. Too tight a radius and the traffic won’t be able to handle the centrifugal force and will drift or skid off the road. A big radius is needed for safety, but making the radius bigger than required adds additional cost to road construction. It’s not as simple as finding the radius of the curve. The radius needs to change at the entry and exit of the curve. Why? Here’s an explanation from the American Association of State Highway and Transportation Officials *Policy on Geometric Design of Highways and Streets (1994): Any motor vehicle follows a transition path as it enters or leaves a circular horizontal curve. The steering change and the consequent gain or loss of centrifugal force cannot be effected instantly. For most curves the average driver can effect a suitable transition path within the limits of normal lane width. However, with combinations of high speed and sharp curvature the resultant longer transition can result in crowding and sometimes actual occupation of adjoining lanes. In such instances transition curves would be appropriate because they make it easier for a driver to confine the vehicle to his or her own lane. The employment of transition curves between tangents and sharp circular curves and between circular curves of substantially different radii warrants consideration. Later in this chapter, you’ll see the calculus concepts that relate to designing a road with a gently changing curvature. (Hint, but don’t get scared: It’s the third derivative, not the first or the second.) Let’s frame the calculations in terms of a function \\(f(x)\\). Depending on the setting, \\(x\\) might be the price of a product and \\(f(x)\\) the demand for that product. Or the graph of \\(f(x)\\) might be the path of a road drawn in \\((x,y)\\) coordinates or the reach of a robot arm as a function of time. Remember that \\(f()\\) is just a pronoun that I’m using instead of a proper descriptive name. I use such pronouns (also, \\(g()\\), \\(h()\\), the “she” and “he” of mathematical language) when writing about the general properties of functions. 20.2 Concavity Recall that to find the slope of a function \\(f(x)\\) at any input \\(x\\), you compute the derivative of that function, which we’ve been writing \\(\\partial_x\\,f(x)\\). Plug in some value for the input \\(x\\) and the output of \\(\\partial_x\\, f(x)\\) will be the slope of \\(f(x)\\) at that input. (Chapter 19 introduced some techniques for computing the derivative of any given function.) Now we want to show how differentiation can be used to quantify the concavity of a function. It will help if we augment our nomenclature a bit. When we speak of the “derivative” of a function, we mean something that might be more completely expressed as the first derivative of the function. Just that name naturally suggests that there will be a second derivative, a third derivative, and so on. Figure 20.1 shows a simple function that is concave down. Figure 20.1: A function that is concave down. Notice that the concavity is not about the slope. The curve in Figure 20.1 is concave down everywhere in the domain \\(0 \\leq x \\leq 4\\), but the slope is positive for \\(0 \\leq x \\leq 1\\) and negative for larger \\(x\\). Slope and concavity are two different aspects of a function. As introduced in Chapter 4, the concavity of a function depends not on the slope, but on the change in the slope. Figure 20.2 adds some annotations on top of the graph in Fig. 20.1. In the subdomain marked A, the function slope is positive while in the subdomain B, the function slope is negative. It is this transition from the slope in A to the slope in B that corresponds to the concavity of the function between A and B. ## Warning in validate_domain(domain, free_args): Missing domain names: x Figure 20.2: Convexity is about how the slope changes from one place in the domain to another. Similarly, the concavity of the function between B and C, reflects the transition in the slope from B to C. Even though the slope is negative in both B and C, the change in slope tells us about the concavity. Let’s look at this using symbolic notation. Keep in mind that the function graphed is \\(f(x)\\) while the slope is the function \\(\\partial_x\\,f(x)\\). We’ve seen that the concavity is indicated by the change in slope of \\(f()\\), that is, the change in \\(\\partial_x\\, f(x)\\). We’ll go back to our standard way of describing the rate of change near an input \\(x\\): \\[\\text{concavity.of.f}(x) \\equiv\\ \\text{rate of change in}\\ \\partial_x\\, f(x) = \\partial_x [\\partial_x f(x)] \\\\ \\\\ = \\lim_{h\\rightarrow 0}\\frac{\\partial_x f(x+h) - \\partial_x f(x)}{h}\\] We’re defining the concavity of a function \\(f()\\) at any input \\(x\\) to be \\(\\partial_x [\\partial_x f(x)]\\). We create the concavity_of_f(x) function by applying differentiation twice to the function \\(f()\\). Such a double differentiation of a function \\(f(x)\\) is called the second derivative of \\(f(x)\\). The second derivative is so important in applications that it has it’s own compact notation: \\[\\text{second derivative of}\\ f()\\ \\text{is written}\\ \\partial_{xx} f(x)\\] Look carefully to see the difference between the first derivative \\(\\partial_x f(x)\\) and the second derivative \\(\\partial_{xx} f(x)\\): it’s all in the double subscript \\(_{xx}\\). Computing the second derivative is merely a matter of computing the first derivative \\(\\partial_x f(x)\\) and then computing the (first) derivative of \\(\\partial_x f(x)\\). In R this process looks like: dx_f &lt;- D( f(x) ~ x) # First deriv. of f() dxx_f &lt;- D(dx_f(x) ~ x) # Second deriv. of f() As a shortcut for the two-step process above, for the second derivative you can use a notation which doubles up on the x on the right-hand side of the tilde: dxx_f &lt;- D(f(x) ~ x &amp; x) 20.3 Curvature As you see from Section 20.2, it’s easy to quantify the concavity of a function \\(f(x)\\): just evaluate the second derivative \\(\\partial_{xx} f(x)\\). But it turns out that people are very poor at estimating the quantitative value of concavity by eye. To illustrate, consider the square function, \\(f(x) \\equiv x^2\\). (See Figure 20.3.) Figure 20.3: Does the concavity of the square function vary with \\(x\\)? Clearly, the square function is concave up. Now a test: Looking at the graph of the square function, where is the concavity the largest? Don’t read on until you’ve pointed where you think the concavity is largest. With your answer to the test question in mind, let’s calculate the concavity of the square function using derivatives. \\[f(x) \\equiv x^2\\ \\text{ so }\\ \\partial_x f(x) = 2 x\\ \\text{ and therefore }\\ \\partial_{xx} f(x) = 2\\] The second derivative of \\(f(x)\\) is positive, as you would expect for a function that is concave up. What you might not expect, however, is that the second derivative is constant. The concavity-related property that the human eye reads from the graph of a function is not the concavity itself, but the curvature of the function. The curvature of \\(f(x)\\) at a point \\(x_0\\) is defined to be the radius of the circle that is tangent to the function at \\(x_0\\). Figure 20.4 illustrates the changing curvature of \\(f(x) \\equiv x^2\\) by inscribing tangent circles at several points on the function graph, marked with dots. You can see the tangency of the circle to the function graph; the function’s thin black line goes right down the middle of the broader lines used to draw the circles. Figure 20.4: At any point on the graph of a smooth function, a circle tangent to the graph can be drawn. The radius of this circle is \\(1/{\\cal K}\\). Black dots have been put along the graph at the points where the graph of the function is tangent to the inscribed circle. The visual sign of tangency is that the graph of the function goes right down the center of the circle. The inscribed circle at \\(x=0\\) is tightest. The circle at \\(x=1\\) has a somewhat larger radius. The radius of the circle at \\(x=-1.5\\) is the largest of all. Whereas the concavity is the same at all points on the graph, the visual impression that the function is most highly curved near \\(x=0\\) is better captured by the radius of the inscribed circle. The radius of the inscribed circle at any point is the reciprocal of a quantity \\({\\cal K}\\) called the curvature. The curvature \\({\\cal K}\\) of a function \\(f(x)\\) depends on both the first and second derivative. The formula for curvature \\(K\\) is somewhat off-putting; you are not expected to memorize it. But you can see where \\(\\partial x f()\\) and \\(\\partial_{xx}f()\\) come into play. \\[{\\cal K}_f \\equiv \\frac{\\left|\\partial_{xx} f(x)\\right|}{\\ \\ \\ \\ \\left|1 + \\left[\\strut\\partial_x f(x)\\right]^2\\right|^{3/2}}\\] Mathematically, the curvature \\(\\cal K\\) corresponds to the reciprocal of the radius of the tangent circle. When the tangent circle is tight, \\(\\cal K\\) is large. When the tangent circle has a very large radius, that is, the function is very close to approximating a straight line, \\(\\cal K\\) is very small. 2245 Returning to the highway design example earlier in the chapter … The Policy on geometric design of highways and streets called for the curvature of a road to change gently, giving the driver time to adjust the steering and accomodate the centrifugal force of the car going around the curve. Changing curvature implies that \\(\\partial_x {\\cal K}\\) is non-zero. Since \\({\\cal K}\\) depends on the first and second derivatives of \\(f(x)\\), the Policy on gradual change means that the third derivative of \\(f(x)\\) is non-zero. 20.4 Exercises Exercise 20.1: ykIBCb ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A Glance at the graph. In which boxes is the slope negative?     A, B, C︎✘        B, C, D︎✘        A, C, D\\(\\heartsuit\\ \\) Exercise 20.2: QnpuMN ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A Consider the slope of the function in the domains marked by the boxes. What is the order of boxes from least steep to steepest?     A, B, C︎✘        C, A, B︎✘        A, C, B\\(\\heartsuit\\ \\)       none of these︎✘ Exercise 20.3: kq3t86 ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A Which of the line segments is tangent to the curve at the point marked with a dot?     A︎✘        B︎✘        C︎✘        all of them\\(\\heartsuit\\ \\)       none of them︎✘ Exercise 20.4: BVRjhF ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A Which of the line segments is tangent to the curve at the point marked with a dot?     A\\(\\heartsuit\\ \\)       B︎✘ too shallow       C︎✘ too steep       all of them︎✘        none of them︎✘ Exercise 20.5: 5ddB5r ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A In which of the boxes is the function concave up?     A and E\\(\\heartsuit\\ \\)       B and D︎✘        C and D︎✘ Exercise 20.6: 4nsU0z ## Warning in validate_domain(domain, free_args): Missing domain names: x Question A In which boxes is the function smooth?     A and B︎✘        B and C︎✘        A and C\\(\\heartsuit\\ \\)       none of them︎✘        all of them︎✘ ## Warning in validate_domain(domain, free_args): Missing domain names: x Question B In which boxes is the function smooth?     A and B︎✘        B and C︎✘        A and C︎✘        none of them︎✘        all of them\\(\\heartsuit\\ \\) ## Warning in validate_domain(domain, free_args): Missing domain names: x Question C In which boxes is the function smooth?     A︎✘        B\\(\\heartsuit\\ \\)       neither of them︎✘        both of them︎✘ Exercise 20.7: iIXOYZ We introduced concavity graphically and used the terms “concave up” and “concave down.” Now we can compute the concavity quantitatively using the second derivative. In a sandbox, create this function and plot it. (Note: rfun() generates random functions in the same way you might by moving a pencil smoothly on a piece of paper. The seed = 8427 effectively chooses which one of infinitely many functions is being generated. Different seeds give different functions. ) f &lt;- rfun( ~ z, seed = 8427) slice_plot(f(x) ~ x, domain(x=c(-5,5))) You can see that in the region near \\(x = -1\\) the function is concave down. While near \\(x=2.5\\) the function is concave up. In your sandbox, compute the second derivative of \\(f(x)\\) and evaluate it at \\(x=-1\\) and \\(x=2.5\\). dxx_f &lt;- D(f(x) ~ x &amp; x) dxx_f(-1) dxx_f(2.5) Using these results, and perhaps experimenting a little with different values of \\(x\\), you should be able to answer this question: Question A Which of these is a correct statement of “concave up” in terms of the value of \\(\\partial_{xx} f(x)\\)? A function is concave-up at input \\(x_0\\) when \\(\\partial_{xx} f(x_0) &gt; 0\\)Nice!  A function is concave-up at input \\(x_0\\) when \\(\\partial_{xx} f(x_0) &lt; 0\\)︎✘ A function is concave-up at input \\(x_0\\) when \\(\\partial_{xx} f(x_0) &lt; 0\\) and \\(\\partial_x f(x_0) &lt; 0\\)︎✘ The first derivative has nothing to do with it. A function is concave-up at input \\(x_0\\) when \\(\\partial_{xx} f(x_0) &gt; 0\\) and \\(\\partial_x f(x_0) &gt; 0\\)︎✘ The first derivative has nothing to do with it. Recall that an inflection point is a value for the input \\(x\\) at which \\(f(x)\\) changes from concave up to concave down, or vice versa. Add a statement to your sandbox to graph \\(\\partial_{xx} f(x)\\). Question B From reading the graph of \\(\\partial_{xx} f(x)\\), say which of these is nearest to an inflection point for \\(f(x)\\). \\(x = 0.0\\)︎✘ \\(x = -4.0\\)Nice! The inflection point nearest \\(x=-4\\) occurs at \\(x = -4.156\\). \\(x = 2.5\\)︎✘ \\(x = -3\\)︎✘ Question C How many inflection points are there for \\(f(x)\\) in the domain \\(-5 \\leq x \\leq 5\\)? 1︎✘ 2︎✘ 3Excellent! You can see this by graphing \\(\\partial_{xx} f(x)\\) and counting the zero crossings. 4︎✘ 5︎✘ Exercise 20.8: bHacc6 The graph of the function \\(g(x) \\equiv \\sqrt{\\strut R^2 - x^2}\\) has the shape of a semi-circle of radius \\(R\\), e.g. g &lt;- makeFun(sqrt(R^2 - x^2) ~ x, R=2) slice_plot(g(x) ~ x, domain(x=c(-2, 2)), npts=300) Intuition suggests that the radius of an enscribed circle for \\(g()\\) should match the radius of the graph of the function. In a SANDBOX, create a function to calculate the curvature of \\(g()\\) at any input \\(x\\). Then plot that curvature function over the domain \\(-2 &lt; x &lt; 2\\). Is the curvature of \\(g()\\) indeed constant? To help you get started, here is a bit of scaffolding for your sandbox. g &lt;- makeFun(sqrt(R^2 - x^2) ~ x, R = 2) # define g() dg &lt;- D(g(x) ~ x) # first derivative of g() ddg &lt;- D(g(x) ~ x &amp; x) # second derivative of g() curvature &lt;- makeFun(abs(ddg(x)) / abs(__fill_in_the_formula__)^(3/2) ~ x) slice_plot(curvature(x) ~ x, domain(x=c(-2, 2))) We set the default value of the parameter \\(R\\) to be 2. Question A What is the curvature of \\(g(x)\\)?     0︎✘                0.5\\(\\heartsuit\\ \\)       1︎✘                1.5︎✘               2︎✘ Exercise 20.9: jyXhPM Here is a graph of \\(\\sin(x)\\) with points marked at \\(x=-\\pi/2\\), \\(x=0.923\\), and \\(x = \\pi/2\\). At each of those points, an inscribed circle has been drawn, tangent to the function at that point. You’re task is to calculate the curvature \\(\\cal K\\) at each of those three input points. This is a matter of calculating the first and second derivatives of the sine function, evaluating those derivatives at the input values, and plugging them in to the formula in Section 20.3. Question A What is the curvature \\(\\cal K\\) of \\(\\sin(x=-\\pi/2)\\)?     -1︎✘ \\(\\cal K\\) can be negative!       0︎✘                     0.5︎✘                       1\\(\\heartsuit\\ \\)            2︎✘ Question B What is the curvature \\(\\cal K\\) of \\(\\sin(x=-0.923)\\)?     -1︎✘ \\(\\cal K\\) can be negative!       0︎✘                     0.5\\(\\heartsuit\\ \\)           1︎✘             2︎✘ Question C What is the curvature \\(\\cal K\\) of \\(\\sin(x=\\pi/2)\\)?     -1︎✘ \\(\\cal K\\) can be negative!       0︎✘                     0.5︎✘            1\\(\\heartsuit\\ \\)            2︎✘ Question D What is the curvature \\(\\cal K\\) of \\(\\sin(x=0)\\)? (Hint: You can tell straight from the graph, even though no enscribed circle has been drawn. 0Excellent! The graph is straight at \\(x=0\\), so no curvature 0.5︎✘                     1︎✘                                2︎✘ Exercise 20.10: rou0yO The function road(x) has been constructed to correspond to a curved road of gradually tighter radius from left to right R &lt;- makeFun(3 - x/2 ~ x) road &lt;- makeFun(sqrt(R(x)^2 - x^2) ~ x) slice_plot(road(x) ~ x, domain(x=c(-2, 2)), npts=500) Using a SANDBOX, calculate the curvature of this road for each value of \\(x\\). Question A What is the curvature of the road at \\(x=-1\\)?     0.22\\(\\heartsuit\\ \\)       0.24︎✘                     0.27︎✘                     0.31︎✘                     0.35︎✘ Question B What is the curvature of the road at \\(x=1\\)?     0.22︎✘                     0.24︎✘                     0.27\\(\\heartsuit\\ \\)       0.31︎✘                     0.35︎✘ Question C What is the curvature of the road at \\(x=0\\)?     0.22︎✘                     0.24\\(\\heartsuit\\ \\)       0.27︎✘                     0.31︎✘                     0.35︎✘ "],["cont-and-smooth.html", "Chapter 21 Continuity and smoothness 21.1 Continuity 21.2 Discontinuity 21.3 Smoothness 21.4 Exercises", " Chapter 21 Continuity and smoothness You’ve seen how various properties of a function—whether it is monotonic, how it slopes, whether it is concave up or down (or not at all), curvature, etc.—can be related to the first and second derivatives of the function. 2300 In this chapter, we’ll elaborate on continuity, one of the ideas introduced in Section 4.3, and use the concept of continuity to characterize functions in a new way: their smoothness. 2305 21.1 Continuity The intuition behind continuity is simple: If you can draw the graph of a function without lifting the pencil from the paper, the function is continuous. Continuity can be an important attribute of a modeling function. Often, we are modeling phenomena where a small change in input is expected to produce a small change in output. For instance, if your income changes by one penny, you would expect your lifestyle not to change by much. If the temperature of an oven changes by 1 degree, you don’t expect the quality of the cake you are baking to change in any noticeable way. 2310 All of our basic modeling functions are continuous over their entire input domain.36 To illustrate discontinuity we’ll consider piecewise functions, as introduced in Chapter 13. The Heaviside function, graphed in Figure 21.1 is discontinuous. 2315 Figure 21.1: The Heaviside function is piecewise constant with a discontiuity at \\(x=0\\). Drawing the graph of the Heaviside function \\(H(x)\\) involves lifting the pencil at \\(x=0\\). In contrast, the piecewise ramp function (Figure 21.2) is continuous; you don’t need to lift the pencil from the paper in order to draw the ramp function. Figure 21.2: The ramp function is a continuous piecewise function. Imagine that you were constructing a model of plant growth as a function of the amount of water (in cc) provided each day. The plant needs about 20 cc of water to thrive. Let’s say that you use the Heaviside function for the model, say \\(H(W-20)\\), where an output of 1 means the plant thrives and a output 0 means the plant does not. The model implies that if you provide 20.001 cc of water, the plant will thrive. But if you are stingy, and provide only 19.999 cc of water, the plant will die. In other words, a very small change in the input can lead to a large change in the output. 2320 Common sense suggests that a change of 0.002 cc in the amount of water—that’s a small fraction of a drop, 2 cubic millimeters of volume, is not going to lead to a qualitative change in output. So you might prefer to use a sigmoidal function as your model rather than a Heaviside function. 2325 On the other hand, sometimes a very small change in input does lead to a large change in output. For instance, a sensible model of the hardness of water as a function of temperature would include a discontinuity at \\(32^\\circ\\)F, the temperature at which water turns to ice. 2330 One of author Charles Dickens’s famous characters described the relationship between income, expenditure, and happiness this way: \"Annual income 20 pounds, annual expenditure 19 [pounds] 19 [shillings] and six [pence], result happiness. Annual income 20 pounds, annual expenditure 20 pounds ought and six, result misery.\" — the character Wilkins Micawber in David Copperfield Macawber was referring to the common situation in pre-20th century England of putting debtors in prison, regardless of the size of their debt. Macawber’s statement suggests he would model happiness as a Heaviside function \\(H(\\text{income}- \\text{expenditure})\\). 2335 Whenever the output of a function is a binary (yes-or-no) value, you can anticipate that a model will involve a discontinuous function. 21.2 Discontinuity Recall the logical path that led us to the idea of the derivative of a function. We started with the differencing operator, which takes as input a function and a “small” value of \\(h\\): \\[{\\cal D}_x f(x) \\equiv \\frac{f(x+h) - f(x)}{h}\\] Then, through algebraic manipulation and numerical experiments we found that, once \\(h\\) is small enough, the graph of the slope function \\({\\cal D}_x f(x)\\) does not depend on \\(h\\). And so we defined a function \\(\\partial_x f(x)\\) where \\(h\\) doesn’t play a role, writing \\(\\lim_{h\\rightarrow 0}\\) to remember our care to never actually divide by zero. \\[\\partial_x f(x) \\equiv \\lim_{h\\rightarrow 0} \\frac{f(x+h) - f(x)}{h}\\ .\\] Conveniently, we found that the derivatives of the pattern-book functions can be written in terms of the pattern-book functions without making any reference to \\(h\\). For instance: \\(\\partial_x \\ln(x) = 1/x\\) No \\(h\\) appears. \\(\\partial_x e^x = e^x\\) No \\(h\\) appears \\(\\partial_x x^p = p\\, x^{p-1}\\) No \\(h\\) appears. and so on. With discontinuous functions, we have no such luck. Figure 21.3 shows what happens if we compute \\({\\cal D}_x H(x)\\), the derivative of the Heaviside function, for smaller and smaller \\(h\\). H &lt;- makeFun(ifelse(x &gt;=0, 1, 0) ~ x) DH01 &lt;- makeFun((H(x + 0.1) - H(x))/0.1 ~ x) DH001 &lt;- makeFun((H(x + 0.01) - H(x))/0.01 ~ x) DH0001 &lt;- makeFun((H(x + 0.001) - H(x))/0.001 ~ x) slice_plot(DH01(x) ~ x, domain(x=c(-0.02, 0.02)), npts=500, color=&quot;red&quot;, size=2) %&gt;% slice_plot(DH001(x) ~ x, color=&quot;darkgreen&quot;, npts=500, size=3, alpha=0.5) %&gt;% slice_plot(DH0001(x) ~ x, color=&quot;blue&quot;, npts=500, alpha=0.5, size=2) Figure 21.3: \\({\\cal D}_x H(x)\\), the slope function of the discontinuous Heaviside, function, depends on the value of \\(h\\) used for the slope function. (Red: \\(h=0.1\\); Green: \\(h=0.01\\); Blue \\(h=0.001\\)) Differencing the Heaviside function produces very different functions depending on the value of \\(h\\). The bump near \\(x=0\\) gets taller and taller as \\(h\\) gets smaller. Mathematicians would describe this situation as \\[\\lim_{h\\rightarrow0}{\\cal D}_x H(x=0) \\equiv \\lim_{h\\rightarrow 0} \\frac{H(0+h) - H(0)}{h}\\ \\ \\ \\text{does not exist}.\\] Of course, for any given value of \\(h\\), e.g. \\(h=0.000001\\), the function \\({\\cal D}_x H(x)\\) has a definite shape. But that shape keeps changing as \\(h \\rightarrow 0\\), so we can’t point to any specific shape as the “limit as \\(h \\rightarrow 0\\).” Since there is no convergence in the shape of \\({\\cal D}_x H(0)\\) as \\(h\\) gets smaller, it’s fair to say that the Heaviside function does not have a derivative at \\(x=0\\). But away from \\(x=0\\), the Heaviside function has a perfectly sensible derivative: \\(\\partial_x H(x) = 0\\) for \\(x\\neq 0\\). But there is no derivative at \\(x=0\\). 2365 21.3 Smoothness Smoothness is a different concept than continuity, although the two are related. Most simply, any discontinuous function is not smooth at any input where a discontinuity occurs. But even the continuous ramp function is not smooth at the start of the ramp. Intuitively, imagine you were sliding your hand along the ramp function. You would feel the crease at \\(x=0\\). 2340 A function is not smooth if the derivative of that function is discontinuous. For instance, the derivative of the ramp function is the Heaviside function, so the ramp is not smooth at \\(x=0\\). All of our basic modeling functions are smooth everywhere in their domain. In particular, the derivatives of the basic modeling functions are continuous, as are the second derivative, third derivative, and so on down the line. Such functions are called C-infinity, written \\(C^\\infty\\). The superscript \\(\\infty\\) means that every order of derivative is continuous. 2345 Figure 21.4: A function whose derivative is the ramp function (hence continous) and whose second derivative is the Heaviside function (discontinous). Since the first derivative is continuous, this function has \\(C^1\\) smoothness. You cannot tell from the plot that the second derivative is discontinuous. But if you were in a plane flying along that trajectory, you would feel a jerk as you crossed \\(x=0\\). Mathematicians quantify the “smoothness” of a function by looking at the continuity of the function and its derivatives. The mathematical definition of smoothness is straightforward and phrased in terms of derivatives. Suppose you are examining the smoothness of a function \\(f(x)\\). The smoothness is assessed on a scale \\(C^0, C^1, C^2, \\ldots, C^\\infty\\). \\(C^0\\): the function \\(f()\\) is continuous. Intuitively, this means that a graph of the function can be drawn without lifting the pencil from the paper. \\(C^1\\): the function \\(f()\\) has a derivative over its entire domain and that derivative \\(\\partial_x f(x)\\) is continuous. (See Figure 21.4 for an example.) \\(C^2\\): the function \\(\\partial_x f(x)\\) has a derivative over its entire domain and that derivative is continuous. In other words, \\(\\partial_{xx} f(x)\\) exists and is continuous. \\(C^n\\): Like \\(C^2\\), but we’re talking about the \\(n\\)th-derivative of \\(f(x)\\) existing and being continuous. \\(C^\\infty\\): Usually when we denote a sequence with an infinite number of terms, we write down something like \\(C^0, C^1, C^2, \\ldots\\). It would be entirely valid to do this in talking about the \\(C^n\\) sequence. But many of the mathematical functions we work with are infinitely differentiable, that is \\(C^\\infty\\). Examples of \\(C^\\infty\\) functions: \\(\\sin(x)\\): the derivatives are \\(\\partial_x \\sin(x) = \\cos(x)\\), \\(\\partial_{xx} \\sin(x) = -\\sin(x)\\), \\(\\partial_{xxx} \\sin(x) =-\\cos(x)\\), \\(\\partial_{xxxx} \\sin(x) =\\sin(x)\\), … You can keep going infinitely. \\(e^x\\): the derivatives are \\(\\partial_x e^x = e^x\\), \\(\\partial_{xx} e^x = e^x\\), and so on. \\(x^2\\): the derivatives are \\(\\partial_x x^2 = 2 x\\), \\(\\partial_{xx} x^2 = 2\\), \\(\\partial_{xxx} x^2 = 0\\), … Higher order derivatives are all simply 0. Boring, but still existing. Example of non-\\(C^2\\) functions: We see these often when we take two or more different \\(C^\\infty\\) functions and split their domain, using one function for one subdomain and the other(s) for other subdomain(s). \\(|x|\\), the absolute value function. \\(|x|\\) is a pasting together of two \\(C^\\infty\\) functions: \\[|x| \\equiv \\left\\{\\begin{array}{rcl}+x &amp; \\text{for} &amp; 0 \\leq x\\\\-x&amp;\\text{for}&amp; \\text{otherwise}\\end{array} \\right.\\ .\\] The domain is split at \\(x=0\\). For engineering and design problems, smoothness means something substantially different than described by the mathematical concepts above. Later in the course we’ll introduce cubic splines which are continuous functions defined by a finite set of coordinate pairs, as in a data frame. Each line of the data frame corresponds to a dot in a scatter plot, but in a cubic spline it is called a “knot point.” The spline consists of cubic polynomials drawn between consecutive knot points. The domain is split at each of the knot points. Between any two adjacent knot points, the function is an ordinary cubic polynomial. At a knot point, the cubics on either side have been arranged to have their first and second derivatives match. Thus, the first two derivatives are continuous. The function is at least \\(C^2\\). The second derivative of a cubic is a straight-line function, so the second derivative of a cubic spline is a series of straight-line functions connected at the knot points. The second derivative does not itself have a derivative at the knot points. So, a cubic spline cannot satisfy the requirements for being \\(C^3\\); it is \\(C^2\\). 21.4 Exercises Exercise 21.1: yJKLEb Draw the graph of a function from your imagination over the domain \\(-5 \\leq x \\leq 5\\). The function should be continuous everywhere except at \\(x = -2, 1, 3\\). Draw the graph of a second function from your imagination over the same domain as in (1). The second function should be continuous everywhere in domain: no discontinuities. It should also have a derivative everywhere except at \\(x = -2, 1, 3\\). Exercise 21.2: 4Iv7t For the sketched functions below, decide what level of smoothness—\\(C^0, C^1, C^2, ...\\)— best describes the function. (We make no tricks in the drawings. Where a function looks like it’s broken–that is, the function locally has a V-shape or a \\(\\Lambda\\)-shape–it is meant to be broken.) Question A What’s the smoothness level of function A(x)? (Hint: A quadratic function has a first derivative that changes with x but a second derivative that is constant for all x.)     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)\\(\\heartsuit\\ \\)       \\(C^2\\) or higher︎✘ Question B What’s the smoothness level of function B(x)?     discontinuous\\(\\heartsuit\\ \\)       \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\) or higher︎✘ Question C What’s the smoothness level of function C(x)?     discontinuous︎✘        \\(C^0\\)\\(\\heartsuit\\ \\)       \\(C^1\\)︎✘        \\(C^2\\) or higher︎✘ Question D What’s the smoothness level of function D(x)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\) or higher\\(\\heartsuit\\ \\) Exercise 21.3: UNeewh The ramp function is defined algebraically as \\[\\text{ramp}(x) \\equiv \\left\\{\\begin{array}{ll}0 &amp; \\text{for}\\ x &lt; 0\\\\ x &amp; \\text{otherwise} \\end{array}\\right. \\] or in R as ramp &lt;- makeFun(ifelse(x&lt;0, 0, x) ~ x) Evaluate these three different forms for the definition of the instantaneous rate of change at \\(x=0\\) using \\(h=0.1\\). version 1: \\[{\\cal D}_x f(x) \\equiv \\frac{f(x+h) - f(x)}{h}\\] version 2: \\[{\\cal D}_x f(x) \\equiv \\frac{f(x) - f(x-h)}{h}\\] version 3: \\[{\\cal D}_x f(x) \\equiv \\frac{f(x+h) - f(x-h)}{2 h}\\] Question A Do the three versions give different numerical results at \\(x=0\\) for \\(h=0.01\\)? They all give the same result.︎✘ Versions 1 and 3 give the same result, but 2 is different.︎✘ Versions 1 and 2 give the same result, but 3 is different.︎✘ All three are differentCorrect.  Question B For much smaller \\(h\\) (say, \\(h=0.0001\\)), do the three versions give different numerical results at \\(x=0\\)?     Yes\\(\\heartsuit\\ \\)       No︎✘ Exercise 21.4: jG4rie Consider this function, defined piecewise: Write the R command to create this function. (Hint: Remember ifelse from Chapter 13.) Using a SANDBOX, plot \\(h(x)\\) over the domain \\(-1 \\leq x \\leq 1\\), then sketch a copy of the graph on your paper. Create the function \\(\\partial_x h(x)\\) by differentiating separately each piece of the piecewise function \\(h()\\). Write down \\(\\partial_x h(x)\\) using mathematical notation similar to the definition of \\(h(x)\\) given above. Sketch a graph of \\(\\partial_x h(x)\\) over the domain \\(-1 \\leq x \\leq 1\\). You’re welcome to use a SANDBOX, but you may be able to figure out the shape of the graph yourself. The shape of the function you sketched in (4) has a name, given in the text in Section 21.1. What is that name? Now you are going to do much the same as in items (3), (4), and (5), but instead of the first derivative \\(\\partial_x h(x)\\), create, sketch, and name the second derivative \\(\\partial_{xx} h(x)\\). Create and write down \\(\\partial_{xx} h(x)\\) in mathematical notation. Sketch \\(\\partial_{xx} h(x)\\) Classify the smoothness of \\(h(x)\\) using the following table: Smoothness Criterion \\(C^0\\) \\(\\partial_x h(x)\\) is discontinuous \\(C^1\\) \\(\\partial_x h(x)\\) is continuous \\(C^2\\) \\(\\partial_{xx} h(x)\\) is continuous \\(C^3\\) \\(\\partial_{xxx} h(x)\\) is continuous \\(\\vdots\\) and so on. \\(C^\\infty\\) All orders of derivative of \\(h(x)\\) are continous. Exercise 21.5: 2beqIv Consider the following functions \\(f_A(x)\\), \\(f_B(x)\\), … all of which involve a domain split at \\(x=0\\) and the pasting together of two individually \\(C^\\infty\\) functions: Question A How smooth is \\(f_A(x)\\)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)\\(\\heartsuit\\ \\)       \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ Question B How smooth is \\(f_B(x)\\)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\)\\(\\heartsuit\\ \\)       \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ \\[f_C(x) \\equiv \\left\\{\\begin{array}{cl}{x^3} &amp; \\text{for}\\ 0 \\leq x\\\\x^3&amp; \\text{otherwise}\\end{array} \\right.\\] Question C How smooth is \\(f_C(x)\\)?)     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)\\(\\heartsuit\\ \\) Question D How smooth is \\(f_D(x)\\)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)\\(\\heartsuit\\ \\)       \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ Question E How smooth is \\(f_E(x)\\)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)\\(\\heartsuit\\ \\)       \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ Question F How smooth is \\(f_F(x)\\)?     discontinuous\\(\\heartsuit\\ \\)       \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ Question G How smooth is \\(f_G(x)\\)?     discontinuous︎✘        \\(C^0\\)\\(\\heartsuit\\ \\)       \\(C^1\\)︎✘        \\(C^2\\)︎✘        \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ Question H How smooth is \\(f_H(x)\\)?     discontinuous︎✘        \\(C^0\\)︎✘        \\(C^1\\)︎✘        \\(C^2\\)\\(\\heartsuit\\ \\)       \\(C^3\\)︎✘        \\(C^\\infty\\)︎✘ The domain of the function \\(1/x\\) is the whole number line, except 0, where the positive and negative branches fail to meet up.↩︎ "],["prod-comp-rules.html", "Chapter 22 Derivatives of assembled functions 22.1 Using the rules 22.2 Differentiating linear combinations 22.3 Product rule for multiplied functions 22.4 Chain rule for function composition 22.5 Derivatives of the basic modeling functions 22.6 Exponentials and logarithms (optional) 22.7 Exercises", " Chapter 22 Derivatives of assembled functions In Section 19.4 we used the rules associated with \\(\\lim_{h\\rightarrow 0}\\) to confirm our claims about the derivatives of many of the pattern-book functions. We’ll call these rules h-theory for short. In this chapter, we’re going to use h-theory to find algebraic rules to calculate the derivatives of linear combinations of functions, products of functions, and composition of functions. Remarkably, we can figure out these rules without having to say specifically which functions are being combined. So the rules can be written in terms of abstractions: \\(f()\\), \\(g()\\), and \\(h()\\). Later, we’ll apply those rules to specific functions, to show how the rules are used in practical work. 22.1 Using the rules When you encounter a function that you want to differentiate, you first have to examine the function to decide which rule you want to apply. In the following, we’ll to use the names \\(f()\\) and \\(g()\\), but in practice the functions will often be basic modeling functions, for instance \\(e^{kx}\\) or \\(\\sin\\left(\\frac{2\\pi}{P}t\\right)\\), etc. Step 1: Identify f() and g() We will write the rules in terms of two function names, \\(f()\\) and \\(g()\\), which can stand for any functions whatsoever. It’s rare to see the product or the composition written explicitly as \\(f(x)g(x)\\) of \\(f(g(x))\\). Instead, you are given something like \\(e^x \\ln(x)\\). The first step in differentiating the product or composition is to identify what are \\(f()\\) and \\(g()\\) individually. 2400 In general, \\(f()\\) and \\(g()\\) might be complicated functions, themselves involving linear combinations, products, and composition. But to get started, we’ll practice with cases where they are simple, pattern-book functions. 2405 Step 2: Find f’() and g’() For differentiating either products or compositions, you will need to identify both \\(f()\\) and \\(g()\\) (the first step) and then compute the derivatives \\(\\partial_x f()\\) and \\(\\partial_x g()\\). That is, you’ll write down four functions. 2410 Step 3: Apply the relevant rule Recall from Chapter 11 that will will be working with three important forms for creating new functions out of existing functions: Linear combinations, e.g. \\(a f(x) + bg(x)\\) Products of functions, e.g. \\(f(x) g(x)\\) Compositions of functions, e.g. \\(f\\left(g(x)\\right)\\) 22.2 Differentiating linear combinations Linear combination is one of the ways in which we make new functions from existing functions. As you recall, linear combination involves scaling functions and then adding the scaled functions as in \\(a f(x) + b g(x)\\), alinear combination of \\(f(x)\\) and \\(g(x)\\). We can easily use \\(h\\) to show what is the result of differentiating a linear combination of functions. First, let’s figure out what is \\(\\partial_x\\, a f(x)\\), Going back to writing \\(\\partial_x\\) in terms of a slope function: \\[\\partial_x\\, a\\,f(x) = \\frac{a\\, f(x + h) - a\\,f(x)}{h}\\\\ \\ \\\\ = a \\frac{f(x+h) - f(x)}{h} = a\\, \\partial_x f(x)\\] In other words, if we know the derivative \\(\\partial_x\\, f(x)\\), we can easily find the derivative of \\(a\\, f()\\). Notice that even though \\(h\\) was used in the derivation, it appears nowhere in the result \\(\\partial_x\\, b\\,f(x) = b\\, \\partial_x\\, f(x)\\). The \\(h\\) is solvent to get the paint on the wall and evaporates once its job is done. Now consider the derivative of the sum of two functions, \\(f(x)\\) and \\(g(x)\\): \\[\\partial_x\\, \\left[f(x) + g(x)\\right] =\\\\ \\ \\\\ =\\frac{\\left[f(x + h) + g(x + h)\\right] - \\left[f(x) + g(x)\\right]}{h} \\\\ \\ \\\\ = \\frac{\\left[f(x+h) -f(x)\\right] + \\left[g(x+h) - g(x)\\right]}{h}\\\\ \\ \\\\ = \\frac{\\left[f(x+h) -f(x)\\right]}{h} + \\frac{\\left[g(x+h) - g(x)\\right]}{h}\\\\ \\ \\\\ = \\partial_x\\, f(x) + \\partial_x\\, g(x)\\] Because of the way that \\(\\partial_x\\) can be “passed through” a linear combination, mathematicians say that differentiation is a linear operator. Consider this new fact about differentiation as a down payment on what will eventually become a complete theory telling us how to differentiate a product of two functions or the composition of two functions. We’ll lay out the \\(h\\)-theory based algebra of this in the next two sections. 2390 We can summarize the h-theory result for linear combinations this way: The derivative of a linear combination is the linear combination of the derivatives. That is: \\[\\partial_x \\left[\\strut \\color{magenta}{a} \\color{brown}{f(x)} + \\color{magenta}{b} \\color{brown}{g(x)}\\right] = \\color{magenta}{a} {\\large\\color{brown}{f&#39;(x)}} + \\color{magenta}{b} {\\large\\color{brown}{g&#39;(x)}}\\] as well as \\[\\partial_x \\left[\\strut \\color{magenta}{a}\\, \\color{brown}{f(x)} + \\color{magenta}{b}\\, \\color{brown}{g(x)} + \\color{magenta}{c}\\, \\color{brown}{h(x)} + \\cdots\\right] = \\color{magenta}{a}\\, {\\large\\color{brown}{f&#39;(x)}} + \\color{magenta}{b}\\, {\\large\\color{brown}{g&#39;(x)}} + \\color{magenta}{c}\\, {\\large\\color{brown}{h&#39;(x)}} + \\cdots\\] Example 22.1 The derivative of a polynomial is a polynomial of a lower order. Consider the polynomial \\[h(x) = \\color{magenta}{a}\\color{brown}{x^0} + \\color{magenta}{b} \\color{brown}{x^1} + \\color{magenta}{c} \\color{brown}{x^2}\\] The derivative is \\[\\partial_x h(x) = \\color{brown}{0}\\, \\color{magenta}{a} + \\color{brown}{1}\\, \\color{magenta}{b} + \\color{magenta}{c}\\, \\color{brown}{2 x} = \\color{magenta}{b} + \\color{magenta}{2 c}\\ x\\] 22.3 Product rule for multiplied functions The question at hand is how to compute the derivative \\(\\partial_x f(x) g(x)\\). Of course, you can always use numerical differentiation. But let’s look at the problem from the point of view of symbolic differentiation. And since \\(f(x)\\) and \\(g(x)\\) are just pronoun functions, we’ll assume you are starting out already knowing the derivatives $_x f(x) \\(\\partial_x f(x)\\) and \\(\\partial_x g(x)\\). This situation arises particularly when \\(f(x)\\) and \\(g(x)\\) are pattern-book functions for which you already have memorized \\(\\partial_x f(x)\\) and \\(\\partial_x g(x)\\) or are basic modeling functions whose derivatives you will memorize in Section 22.5. The purpose of this section is to derive the formula for \\(\\partial_x f(x) g(x)\\) in terms of \\(f(x)\\), \\(g(x)\\), \\(\\partial_x f(x)\\) and \\(\\partial_x g(x)\\). This formula is called the product rule. The point of showing a derivation of the product rule is to let you see how the logic of evanescent \\(h\\) plays a role. In practice, everyone simply memorizes the rule, which has a beautiful, symmetric form: \\[\\text{Product rule:}\\ \\ \\ \\ \\partial_x \\left[\\strut f(x)g(x)\\right] = \\left[\\strut \\partial_x f(x)\\right]\\, g(x) + f(x)\\, \\left[\\strut\\partial_x g(x)\\right]\\] and is even prettier in Lagrange notation (where \\(\\partial_x f(x)\\) is written \\(f&#39;\\)): \\[ \\left[\\strut f g\\right]&#39; = f&#39; g + g&#39; f\\] As with all derivatives, the product rule is based on the instantaneous rate of change \\[F&#39;(x) \\equiv \\lim_{h\\rightarrow 0} \\frac{F(x+h) - F(x)}{h}\\] introduced in Section 9.6. We also need two other statements about \\(h\\) and functions: The derivative \\(F&#39;(x)\\) is the slope of of \\(F()\\) at input \\(x\\). Taking a step of size \\(h\\) from \\(x\\) will induce a change of output of \\(h F&#39;(x)\\), so \\[F(x+h) = f(x) + h F&#39;(x)\\ .\\] Any result of the form \\(h F(x)\\), where \\(F(x)\\) is finite, gives 0. More precisely, \\(\\lim_{h\\rightarrow 0} h F(x) = 0\\) As before, we’ll put the standard \\(\\lim_{h\\rightarrow 0}\\) disclaimer against dividing by \\(h\\) until there are no such divisions at all, at which point we can safely use the equality \\(h = 0\\). Suppose the function \\(F(x) \\equiv f(x) g(x)\\), a product of the two functions \\(f(x)\\) and \\(g(x)\\). \\[\\require{cancel} F&#39;(x) = \\partial_x \\left[\\strut f(x) g(x) \\right] \\equiv \\lim_{h\\rightarrow 0}\\frac{f(x+h) g(x+h) - f(x) g(x)}{h}\\] We’ll replace \\(g(x_h)\\) with its equivalent \\(g(x) + h g&#39;(x)\\) giving \\[= \\lim_{h\\rightarrow 0} \\frac{f(x+h) \\left[\\strut g(x) + h g&#39;(x) \\right] - f(x) g(x)}{h} \\] \\(g(x)\\) appears in both terms in the numerator, once multiplied by \\(f(x+h)\\) and once by \\(f(x)\\). Collecting those terms give: \\[=\\lim_{h\\rightarrow 0}\\frac{\\left[\\strut f(x+ h) - f(x)\\right] g(x) + \\left[\\strut f(x+h) h\\, g&#39;(x)\\right]}{h}\\] This has two bracketed terms added together over a common denominator. Let’s split them into separate terms: \\[=\\lim_{h\\rightarrow 0}\\underbrace{\\left[\\strut \\frac{f(x+h) - f(x)}{h}\\right]}_{f&#39;(x)} g(x) + \\lim_{h\\rightarrow 0}\\frac{\\left[\\strut f(x) + h f&#39;(x)\\right]h\\,g&#39;(x)}{h}\\] The first term is \\(g(x)\\) multiplied by the familiar form for the derivative of \\(f(x)\\) \\[= f&#39;(x) g(x) + \\lim_{h\\rightarrow 0}\\frac{f(x) h g&#39;(x)}{h} + \\lim_{h\\rightarrow 0}\\frac{h f&#39;(x) h g&#39;(x)}{h}\\] In each of the last two terms there is an \\(h/h\\) involved. This is safely set to 1, since the \\(\\lim_{h\\rightarrow 0}\\) implies that \\(h\\) will not be exactly zero. There remain no divisions by \\(h\\) so we can drop the \\(\\lim_{h\\rightarrow 0}\\) in favor of \\(h=0\\): \\[= f&#39;(x) g(x) + f(x) g&#39;(x) + \\cancel{h f&#39;(x) g&#39;(x)}\\] \\[=f&#39;(x) g(x) + g&#39;(x) f(x)\\] The last step relies on statement (2) above. Some people find it easier to read the rule in Lagrange shorthand, where \\(f\\) and \\(g\\) stand for \\(f(x)\\) and \\(g(x)\\) respectivly, and \\(f&#39;\\) (“f-prime”) and \\(g&#39;\\) (“g-prime”) stand for \\(\\partial f()\\) and \\(\\partial g()\\). 2415 \\[\\large\\text{Lagrange shorthand:}\\ \\ \\partial[\\color{magenta}f \\times \\color{brown}g] = [\\color{magenta}f \\times \\color{brown}g]&#39; = \\color{magenta}{f&#39;}\\color{brown}g + \\color{brown}{g&#39;}\\color{magenta}f\\] Example 22.2 The expression \\(\\partial_x x^3\\) is exactly the same as \\(\\partial_x \\left[\\strut x\\ x^2\\right]\\). Since we already know \\(\\partial_x x\\) (it’s 1) and \\(\\partial_x x^2\\) (it’s \\(2x\\)) let’s apply the product rule to find \\(\\partial_x x^3\\): \\[\\large\\partial [\\color{magenta}x \\times \\color{brown}{x^2}] = \\color{magenta}{[\\partial x]} \\times \\color{brown}{x^2} \\ +\\ \\color{brown}{[\\partial x^2]} \\times \\color{magenta}x =\\color{magenta}1\\times \\color{brown}{x^2} + \\color{brown}{2x} \\times \\color{magenta}x = 3 x^2\\] Occasionally, mathematics gives us a situation where being more general produces simplicity. In the case of function products, the generalization is from products of two functions \\(f(x)\\cdot g(x)\\) to products of more than two functions, e.g. \\(u(x) \\cdot v(x) \\cdot w(x)\\). The chain rule here takes a form that makes the overall structure much clearer: \\[\\partial_x \\left[\\strut u(x) \\cdot v(x) \\cdot w(x)\\right] = \\\\ \\color{blue}{\\partial_x u(x)} \\cdot v(x) \\cdot w(x)\\ +\\ u(x) \\cdot \\color{blue}{\\partial_x v(x)} \\cdot w(x)\\ +\\ u(x) \\cdot v(x) \\cdot \\color{blue}{\\partial_x w(x)}\\] In the Lagrange shorthand, the pattern is even more evident: \\[\\left[ u\\cdot v\\cdot w\\right]&#39; = \\color{blue}{u&#39;}\\cdot v\\cdot w\\ +\\ u\\cdot \\color{blue}{v&#39;}\\cdot w\\ +\\ u\\cdot v\\cdot \\color{blue}{w}&#39;\\] 22.4 Chain rule for function composition A function composition, as described in Section 11.2, involves inserting the output of one function (the “interior function”) as the input of the other function (the “exterior function”). As we so often do, we’ll be using pronouns a lot. A list might help keep things straight: There are two functions involved in a composition. We’ll call them \\(f(y)\\) and \\(g(x)\\). In the composition \\(f(g(x))\\), the exterior function is \\(f()\\) and the interior function is \\(g()\\). Each of the two functions \\(f()\\) and \\(g()\\) has an input. In our examples, we’ll use \\(y\\) to stand for the input to the exterior function and \\(x\\) as the pronoun for the input to the interior function. As with all rules for differentiation, we’ll need to compute the derivatives of the functions involved, each with respect to its own input. So these will be \\(\\partial_y f(y)\\) and \\(\\partial_x g(x)\\). A reason to use different pronouns for the inputs to \\(f()\\) and \\(g()\\) is to remind us that the output \\(g(x)\\) is in general not the same kind of quantity as the input \\(x\\). In a function composition, the \\(f()\\) function will take the output \\(g(x)\\) as input. But since \\(g(x)\\) is not necessarily the same kind of thing as \\(x\\), why would we want to use the same name for the input to \\(f()\\) as we use for the input to \\(g()\\). With this distinction between the names of the inputs, we can be even more explicit about the composition, writing \\(f(y=g(x))\\) instead of \\(f(g(x))\\). Had we used the pronound \\(x\\) for the input to \\(f()\\) but our explicit statement, although technically correct, would be confusing: \\(f(x = g(x))\\)! With all these pronouns in mind, here is the chain rule for the derivative \\(\\partial_x f(g(x))\\): \\[\\large\\partial_x \\left[\\strut \\color{magenta}{f\\left(\\strut\\right.}\\strut \\color{brown}{g(x)}\\color{magenta}{\\left.\\right)}\\right] = [\\color{magenta}{\\partial_y f}](\\color{brown}{g(x)}) \\times [\\color{brown}{\\partial_xg(x)}]\\] Or, using the Lagrange prime notation, where \\(&#39;\\) stands for the derivative of a function with respect to its input, we have \\[\\large\\text{Lagrange shorthand:}\\ \\ [\\color{magenta}f(\\color{brown}g)]&#39; = \\color{magenta}{f&#39;} (\\color{brown}g) \\times \\color{brown}{g}&#39;\\] In news and policy discussions, you will often hear about “inflation rate” or “birth rate” or “interest rate” or “investment rate of return.” In each case, there is a function of time combined with a derivative of that function: with the general form \\[\\frac{\\partial_t f(t)}{ f(t)}\\ .\\] Inflation rate: The function is cost_of_living(\\(t\\)). The derivative is the rate of change with respect to time in the cost of living: \\(\\partial_t\\,\\)cost_of_living(\\(t\\)). Birth rate: The function is population(\\(t\\)). The derivative is \\(\\partial_t\\,\\)population(\\(t\\)), or at least that component of the overall \\(\\partial_t\\,\\)population(\\(t\\)) that is related to births. (Other components are deaths and the balance of in-migration and out-migration.) Interest rate: The function is account_balance(\\(t\\)) and the derivative is \\(\\partial_t\\,\\)account_balance(\\(t\\)). Investment returns: The function is net_worth(\\(t\\)) and the derivative is \\(\\partial_t\\,\\)net_worth(\\(t\\)). In all these cases, The “rate” is not merely “per time” as would be the case for \\(\\partial_t f(t)\\). Instead the rate is “per unit of the whole per time.” Thus the birth rate is “births per capita per year.”37 Interest and return rates are “percent per year” where the “percent” understood to be the “change-in-value divided by the current value.” Thanks to the chain rule, there is a shortcut way of writing these sorts of “rates per time.” Exactly equivalent to the ratio \\(\\frac{\\partial_t f(t)}{ f(t)}\\) is \\[\\partial_t \\ln(f(t))\\ .\\] Such changes in logarithms are encountered in fields such as economics or finance, where it’s common to consider the logarithm of the economic quantity in order to render changes as percent of the whole. It’s also something to keep in mind when interpreting graphs of an amount versus time, as in Figure @ref{fig:italy-us-covid}. Source Figure 22.1: Growth in the number of Coronavirus cases in Italy and the US early in the pandemic. Look closely at the two graphs in Figure 22.1. They show exactly the same data about growing numbers of coronavirus cases, the left graph on linear axes, the right on the now-familiar semi-log axes. Most people are excellent at comparing slopes, even if they find it difficult or tedious to quantify a slope with a number and units. For instance, a glance suffices to show that in the left graph, well through mid-March the red curve (Italy) is steeper on any given date than the blue curve (US). This means that the number of people with coronavirus was growing faster (per day) in Italy. The right graph tells a different story: up until about March 1, the Italian cases were increasing faster than the US cases. Afterwards, the US sees a larger growth rate than Italy until, around March 19, the US growth rate is substantially larger than the Italy growth rate. The previous two paragraphs and their corresponding graphs may seem to contradict one another. But they are both accurate, truthful depictions of the same events. What’s different between the two graphs is that the left shows one kind of rate and the right shows another kind of rate. In the left, the slope is new-cases-per-day, the output of the derivative function \\[{\\mathbf{\\text{left graph:}}} \\ \\ \\ \\ \\partial_t \\text{daily_new_cases}(t)\\ .\\] On the right, the slope is the proportional increase in cases per day, that is, \\[{\\mathbf{\\text{right graph:}}}\\ \\ \\ \\ \\frac{\\partial_t \\text{daily_new_cases}(t)}{\\text{daily_new_cases}(t)}\\] From the chain rule, we know that \\[\\partial_t \\left[\\strut\\ln(f(t))\\right] = \\frac{\\partial_t f(t)}{f(t)}\\] Since the right graph is on semi-log axes, the slope we perceive visually is \\(\\partial_t \\left[\\strut\\ln(f(t))\\right]\\). That’s an obscure-looking bunch of notation until the chain rule reveals it to be the rate of change at time \\(t\\) divided by the value at time \\(t\\). The derivation of the chain rule relies on two closely related statements which are expressions of the idea that near any value \\(x\\) a function can be expressed as a linear approximation with the slope equal to the derivative of the function : \\(g(x + h) = g(x) + h g&#39;(x)\\) \\(f(y + \\epsilon) = f(y) + \\epsilon f&#39;(y)\\), which is the same thing as (1) but uses \\(y\\) as the argument name and \\(\\epsilon\\) to stand for the small quantity we usually write with an \\(h\\). We’ll now look at \\(\\partial_x f\\left({\\large\\strut} g(x)\\right)\\) by writing down the fundamental definition of the derivative. This, of course, involves the disclaimer \\(\\lim_{h\\rightarrow 0}\\) until we’re sure that there is no division by \\(h\\) involved. \\[\\partial_x \\left[{\\large\\strut} f\\left(\\strut g(x)\\right)\\right] \\equiv \\lim_{h\\rightarrow 0}\\frac{\\color{magenta}{f(g(x+h))} - f(g(x))}{h}\\] Let’s examine closely the expression \\(\\color{magenta}{f\\left(\\strut g(x+h)\\right)}\\). Applying rule (1) above turns it into \\[\\lim_{h\\rightarrow 0} f\\left(\\strut g(x) + \\color{blue}{h g&#39;(x)}\\right)\\] Now apply rule (2) but substituting in \\(g(x)\\) for \\(y\\) and \\(\\color{blue}{h g&#39;(x)}\\) for \\(\\epsilon\\), giving \\[\\lim_{h\\rightarrow 0} \\color{magenta}{f\\left(\\strut g(x+h)\\right)} = \\lim_{h\\rightarrow 0} \\color{brown}{\\left[{\\large\\strut} f\\left(g(x)\\right) + \\color{blue}{h g&#39;(x)}f&#39;\\left(g(x)\\right)\\right]}\\] We’ll substitute the \\(\\color{blue}{blue}\\) and \\(\\color{brown}{brown}\\) expression for the \\(\\color{magenta}{magenta}\\) expression in \\[\\partial_x f\\left(\\strut g(x)\\right) \\equiv \\lim_{h\\rightarrow 0}\\frac{\\color{magenta}{f(g(x+h))} - f(g(x))}{h}\\] giving \\[\\partial_x f\\left(\\strut g(x)\\right) \\equiv \\lim_{h\\rightarrow 0}\\frac{\\color{brown}{f\\left(g(x)\\right) + \\color{blue}{h g&#39;(x)}f&#39;\\left(g(x)\\right)} - f\\left(g(x)\\right)}{h}\\] In the denominator, \\(f\\left(g(x)\\right)\\) appears twice and cancels itself out. That leaves a single term with an \\(h\\) in the numerator and an \\(h\\) in the denominator. Those \\(h\\)’s cancel out, at the same time obviating the need for \\(\\lim_{h\\rightarrow 0}\\) and leaving us with the chain rule: \\[\\partial_x f\\left(\\strut g(x)\\right) \\equiv \\lim_{h\\rightarrow 0}\\frac{\\color{brown}{ \\color{blue}{h g&#39;(x)} f&#39;\\left(g(x)\\right)}}{h} = f&#39;\\left(g(x)\\right)\\ g&#39;(x)\\] Example 22.3 Use the chain rule to find the derivative \\(\\partial_x e^{2x}\\). Recognize that \\(g(x) \\equiv 2x\\) is the interior function in \\(e^{2x}\\) and \\(f(x) \\equiv \\exp(x)\\) is the exterior function. Thus \\[\\partial_x e^{2x} = f&#39;(g(x)) g&#39;(x) = \\exp(g(x)) 2 = 2 e^{2x}\\ .\\] Happily, this is exactly the same result as we got from using the product rule to find \\(\\partial_x e^{2x}\\). Recognizing \\(e^{2x}\\) as \\(e^x \\times e^x\\), we can apply the product rule. Example 22.4 The chain rule can be used in a clever way to find a formula for \\(\\partial_x \\ln(x)\\). We’ve already seen that the logarithm is the inverse function to the exponential, and vice versa. That is: \\[e^{\\ln(y)} = y \\ \\ \\ \\text{and}\\ \\ \\ \\ln(e^y) = x\\] Since \\(\\ln(e^y)\\) is the same function as \\(y\\), the derivative \\(\\partial_y \\ln(e^y) = \\partial_y y = 1\\). Let’s differentiate the second form using the chain rule: \\[\\partial_y \\ln(e^y) = \\left[\\partial_y \\ln\\right](e^y)\\, e^x = 1\\] giving \\[\\left[\\partial_y \\ln\\right](e^y) = \\frac{1}{e^y} = \\recip(e^y)\\] Whatever the function \\(\\partial_x \\ln()\\) might be, it takes its input and produces as output the reciprocal of that input. In other words: \\[\\partial_x \\ln(x) = \\frac{1}{x}\\ .\\] Example 22.5 Knowing that \\(\\partial_x \\ln(x) = 1/x\\) and the chain rule, we’re in a position to demonstrate the power-law rule \\(\\partial_x x^p = p\\, x^{p-1}\\). The key is to use the identity \\(e^{\\ln(x)} = x\\). \\[\\partial_x x^p = \\partial_x \\left[e^{\\ln(x)}\\right]^p\\] The rules of exponents allow us to recognize \\[\\left[e^{\\ln(x)}\\right]^p = e^{p \\ln(x)}\\] Thus, \\(x^p\\) can be seen as a composition of the exponential function onto the logarithm function. Applying the chain rule to this composition gives \\[\\partial_x e^{p \\ln(x)} = e^{p\\ln(x)}\\partial_x [p \\ln(x)] = e^{p\\ln(x)} \\frac{p}{x}\\ .\\] Of course, we already know that \\(e^{p \\ln(x)} = x^p\\), so we have \\[\\partial_x x^p = x^p \\frac{p}{x} = p x^{p-1}\\ .\\] \\(\\large\\partial_x [\\color{brown}\\sin(\\color{magenta}{a x + b})] = [\\partial_x \\color{brown}{\\sin}](\\color{magenta}{a x + b}) \\times \\partial_x [\\color{magenta}{ax + b}] = \\color{brown}{\\cos}(\\color{magenta}{ax + b}) \\times \\color{magenta}a\\). In 1734, famous philosopher George Berkeley (1685-1753) published a long-titled book: The Analyst: A Discourse Addressed to an Infidel Mathematician: Wherein It Is Examined Whether the Object, Principles, and Inferences of the Modern Analysis Are More Distinctly Conceived, or More Evidently Deduced, Than Religious Mysteries and Points of Faith. In The Analyst, Berkeley took issue with the arguments of that time that it is legitimate to divide by \\(h\\) when, ultimately, \\(h\\) will be replaced by zero. Calling \\(h\\) an “evanescent increment,” he asked, 2392 “And what are these same evanescent Increments? They are neither finite Quantities nor Quantities infinitely small, nor yet nothing. May we not call them the ghosts of departed quantities?” Interesting, Berkeley believed that the ghost of \\(h\\) yielded correct results. His objection was that the framers of calculus had made two, canceling errors. “[B]y virtue of a two fold mistake you arrive, though not at science, yet truth.” Berkeley was saying that calculus had not yet been put on a solid logical foundation. It wasn’t until more than a century after Berkeley’s death that this work was accomplished. Once accomplished, the results that had been claimed true all along were confirmed. 2394 22.5 Derivatives of the basic modeling functions The basic modeling functions are the same as the pattern-book functions, but with bare \\(x\\) replaced by \\(\\line(x)\\). In other words, each of the basic modeling functions is a composition of the corresponding pattern-book function with \\(\\line(x)\\). As such, the derivatives of the basic modeling functions can be found using the chain rule. Suppose \\(f()\\) is one of our pattern-book functions. Then \\[\\large\\partial_x f(\\color{magenta}{ax + b}) = \\color{brown}{a} f&#39;(\\color{magenta}{ax + b})\\] where \\(\\color{brown}{a}\\) is the derivative with respect to \\(x\\) of \\(\\color{magenta}{ax + b}\\). Here are the steps for differentiating a basic modeling function \\(\\color{brown}{f}(\\color{magenta}{a x + b})\\) where \\(f()\\) is one of the pattern-book functions: Step 1: Identify the particular pattern-book function \\(\\color{brown}{f}()\\) and write down its derivative \\(\\color{brown}{f&#39;}\\). For example, if \\(f()\\) is \\(\\sin()\\), then \\(f&#39;()\\) is \\(\\cos()\\). Step 2: Find the derivative of the linear interior function. If the function is \\(\\color{magenta}{ax + b}\\), then the derivative is \\(\\color{magenta}{a}\\). If the interior function is \\(\\frac{2\\pi}{P}(t-t_0)\\), the derivative is \\(\\frac{2 \\pi}{P}\\). Step 3: Write down the original function \\(\\large\\color{brown}{f}(\\color{magenta}{a x + b})\\) but replace \\(\\large\\color{brown}{f}\\) with \\(\\large \\color{brown}{f&#39;}\\) and pre-multiply by the derivative of the interior function. For instance, \\[\\partial_x f(\\color{magenta}{ax + b}) = {\\large \\color{magenta}{a}}{\\large f&#39;}(\\color{magenta}{ax + b})\\] Another example: \\[\\partial_t \\color{brown}{\\sin}\\left(\\color{magenta}{\\frac{2 \\pi}{P}(t-t_0)} \\right) = {\\large \\color{magenta}{\\frac{2 \\pi}{P}}}\\color{brown}{\\large\\cos}\\left(\\color{magenta}{\\frac{2 \\pi}{P}(t-t_0) }\\right) \\] By convention, there are different ways of writing \\(\\line(x)\\) for the different pattern-book functions, for instance: 2396 \\[\\text{Pattern-book function} \\ \\ \\ \\longrightarrow\\ \\ \\ \\text{Basic modeling function}\\\\ \\ \\\\ \\sin(x)\\ \\ \\ \\longrightarrow\\ \\ \\ \\sin\\left(\\strut2 \\pi \\left[x-x_0\\right]/P\\right)\\\\ \\exp(x)\\ \\ \\ \\longrightarrow\\ \\ \\ \\exp(k x)\\\\ x^2 \\ \\ \\ \\longrightarrow\\ \\ \\ \\left[mx + b\\right]^2\\\\ 1/x \\ \\ \\ \\longrightarrow\\ \\ \\ 1/\\left[mx + b\\right]\\\\ \\ln(x) \\ \\ \\ \\longrightarrow\\ \\ \\ \\ln(a x + b)\\\\\\] The rule for the derivative of any basic modeling function \\(f(\\line(x))\\) is \\[\\partial_x f(\\line(x)) = \\partial_x \\line(x) \\times \\partial_x f\\left(\\strut\\line(x)\\right)\\] To illustrate: \\(\\partial_x e^{\\color{magenta}{kx}} = {\\large\\color{magenta}{k}}\\, e^{\\color{magenta}{kx}}\\) where \\(\\line(x) = kx\\). \\(\\partial_x \\sin(2\\pi (x-x_0)/P) = \\frac{2\\pi}{P} \\sin(2\\pi (x-x_0)/P)\\) where \\(\\line(x) = 2\\pi (x-x_0)/P)\\). \\(\\partial_x (mx + b)^2 = m\\, 2 (m x + b) = 2 m^2 x + m^2 b\\) where \\(\\line(x) = mx + b\\). \\(\\partial_x \\text{reciprocal}(mx + b) = \\partial_x \\frac{1}{mx + b} = - \\frac{m}{(mx + b)^2}\\) where \\(\\line(x) = mx + b\\) and we use the fact that \\(\\partial_x \\text{reciprocal}(x) = - 1/x^2\\) \\(\\partial_x \\ln(a x + b) = a/(ax+b)\\) \\(\\partial_x \\pnorm(x, \\text{mean}, \\text{sd}) = dnorm(x, \\text{mean}, \\text{sd})\\). \\(\\partial_x \\dnorm(x, \\text{mean}, \\text{sd}) = - \\frac{x-m}{\\text{sd}^2} \\dnorm(x, \\text{mean}, \\text{sd})\\) You will be using the derivatives of the basic modeling functions so often, that you should practice and practice until you can write the derivative at a glance. There are many possible implementations of the general concept of hump functions and sigmoidal functions. The one we use in this book is \\(\\dnorm()\\) for the hump and \\(\\pnorm()\\) for the sigmoid. The names \\(\\dnorm\\) and \\(\\pnorm\\) are worth remarking on. As we’ve said before, \\(\\dnorm()\\) is called the gaussian function in many fields of science and engineering. It is also a centrally important function in statistics, where it is usually called the normal function. (That’s how important it is: it’s just “normal.”) You may also have heard the normal function described as a “bell-shaped curve.” In statistical nomenclature, \\(\\dnorm()\\) is called the “normal probability density function (PDF)” and \\(\\pnorm()\\) is called the “normal cumulative density function (CDF).” That’s way too wordy for our purposes. So, for brevity, we have adopted the R name for those functions: dnorm() and pnorm(). Owing to the origin of the names \\(\\dnorm\\) and \\(\\pnorm\\), we are writing the parameters of the functions—mean and sd—using the computer language notation. The pattern-book functions are just \\(\\dnorm(x)\\) and \\(\\pnorm(x)\\), without listing the parameters. But the basic modeling functions, with parameters, are written \\(\\dnorm(x, \\text{mean}, \\text{sd})\\) and \\(\\dnorm(x, \\text{mean}, \\text{sd})\\). This violates the convention that the basic modeling functions are the composition of the pattern-book functions with \\(\\line(x)\\). But \\(\\dnorm()\\) doesn’t actually work this way because, by convention, the amplitude of the peak of \\(\\dnorm()\\) changes with the input parameter sd. That’s not true for any other basic modeling function. Composition or product? There is one family of functions for which function composition is the same thing as multiplying functions: the power-law family. Consider, for instance, the function \\(h(x) \\equiv \\left[3x\\right]^4\\). Let’s let \\(g(x) \\equiv 3x\\) and \\(f(y) \\equiv y^4\\). With these definitions, \\(h(x) = f(g(x))\\). Recognizing that \\(\\partial_y f(y) = 4 y^3\\) and \\(\\partial_x g(x) = 3\\), the chain rule gives \\[\\partial_x h(x) = \\underbrace{4 g(x)^3}_{f&#39;(g(x))} \\times \\underbrace{3}_{g&#39;(x)} = \\underbrace{4 (3 x)^3}_{f&#39;(g(x))} \\times 3 = 4\\cdot 3^4 \\times x^3 = 324\\ x^3\\] Another way to look at the same function is \\(g(x)\\) multiplied by itself 3 times: \\[h(x) = g(x)\\cdot g(x) \\cdot g(x) \\cdot g(x)\\] This is a product of 4 terms. Applying the product rule gives \\[\\partial_x h(x) = \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\color{blue}{g&#39;(x)}\\cdot g(x)\\cdot g(x) \\cdot g(x) +\\\\ g(x)\\cdot \\color{blue}{g(x)}&#39;\\cdot g(x) \\cdot g(x) +\\\\ g(x)\\cdot g(x)\\cdot \\color{blue}{g(x)&#39;} \\cdot g(x) +\\\\ g(x)\\cdot g(x)\\cdot g(x) \\cdot \\color{blue}{g&#39;(x)}\\ \\ \\ \\ \\] Since multiplication is commutative, all of these four terms are the same, each being \\(3^4 x^3\\). The sum of all four is therefore \\(4 \\times 3^4 x^3 = 324 x^3\\). These are two long-winded ways of getting to the result. For most people, differentiating power-law functions algebraically is simplified by using the rules of exponentiation rather than the product or chain rule. Here, \\[h(x) \\equiv \\left[3x\\right]^4 = 3^4 x^4\\]so \\(\\partial_x h(x)\\) is easily handled as a scalar (\\(3^4\\)) times a function \\(x^4\\). Consequently, applying the rule for differentiating power laws, \\[\\partial_x h(x) = 3^4 \\times \\partial_x x^4 = 3^4 \\times 4 x^3 = 324 x^3\\] As another example, take \\(h(x) \\equiv \\sqrt[4]{\\strut x^3}\\). This is, of course, the composition \\(f(g(x))\\) where \\(f(y) \\equiv y^{1/4}\\) and \\(g(x) \\equiv x^3\\). Applying the chain rule to find \\(\\partial_x h(x)\\) will work (of course!), but is more work than applying the rules of exponentiation followed by a simple power-law differentiation. \\[h(x) = \\sqrt[4]{\\strut x^3} = x^{3/4}\\ \\ \\text{so}\\ \\ \\partial_x h(x) = \\frac{3}{4} x^{(3/4 - 1)} = \\frac{3}{4} x^{-1/4}\\] 22.6 Exponentials and logarithms (optional) The natural logarithm function, \\(\\ln(x)\\), is one of our basic modeling functions. As you know, there are other logarithmic functions. The one most often used is the logarithm-base-10, written \\(\\log_{10}(x)\\) or log10(x). Ten is an integer, and a nice number to use in arithmetic. So in practice, it’s sensible to use \\(\\log_{10}()\\). (Indeed, \\(\\log_{10}()\\) is the digit() function, introduced in Chapter 15. The “natural” in the “natural logarithm” means something different. 2430 The base of the natural logarithm is the number called Euler’s constant and written \\(e\\). As a celebrity number, \\(e\\) is right up there with \\(\\pi\\) and \\(i\\). Just as \\(\\pi\\) has a decimal expansion that is infinitely long, the familiar \\(\\pi = 3.14159265358979...\\), Euler’s constant has an infinitely long decimal representation: \\(e = 2.71828182845905...\\) 2435 It’s not obvious at first glance why \\(e = 2.71828182845905...\\) should be called “natural” by mathematicians. The reason is not the number itself, but \\(\\ln(x)\\) is the inverse of \\(e^x\\), which is special for being invariant under differentiation: \\(\\partial_x e^x = e^x\\). The derivative \\(\\partial_x \\ln(x)\\) which has a particularly simple form, namely, \\(1/x\\). Let’s look at the log-base-10 and it’s computer-savvy cousin log-base-2. The very definition of logarithms means that both 10 and 2 can be written \\[10 = e^{\\ln(10)}\\ \\ \\ \\text{and}\\ \\ \\ 2 = e^{\\ln(2)}\\] This implies that the base-10 and base-2 exponential functions can be written \\[10^x = \\left[\\strut e^{\\strut\\ln(10)}\\right]^x = e^{\\ln(10)x} \\ \\ \\ \\text{and}\\ \\ \\ 2^x = \\left[\\strut e^{\\strut\\ln(2)}\\right]^x = e^{\\ln(2) x}\\] Calculating \\(\\partial_x 10^x\\) or \\(\\partial_x 2^x\\) is a matter of applying the chain rule: \\[\\partial_x [10^x] = \\partial_x [e^{\\ln(10)x}] = e^{\\ln(10)x} \\times \\ln(10) \\ =\\ 10^x \\times 2.3026\\] and \\[\\partial_x [2^x] = \\partial_x [e^{\\ln(2)x}] = e^{\\ln(2)x} \\times \\ln(2) \\ = \\ 2^x \\times 0.6931\\] Like \\(e^x\\), the derivatives of \\(10^x\\) and \\(2^x\\) are proportional to themselves. For \\(e^x\\) the constant of proportionality is 1, a very natural number indeed. 22.7 Exercises Exercise 22.01: jYXYTF Section 22.1 explains that in differentiating a linear combination of two functions, or a product of two functions, or one function composed with another, your first task is to identify the two functions \\(f()\\) and \\(g()\\) involved. Second, compute the derivative of each of those functions on its own: \\(\\partial_x f(x)\\) and \\(\\partial_x g(x)\\). Carry out these two tasks for each of the combined functions shown in the table. (The first row has been done for you as an example.) Combination \\(f()\\) \\(g()\\) \\(\\partial_x f()\\) \\(\\partial_x g()\\) \\(e^x \\ln(x)\\) \\(\\ln(x)\\) \\(e^x\\) \\(\\recip\\) (that is \\(1/x\\)) \\(e^x\\) \\(sin(e^x)\\) \\(x + x^2\\) \\(1/\\sin(x)\\) \\(\\pnorm(x)^2\\) \\(\\sqrt{\\pnorm(x)}\\) \\(\\pnorm(x^2)\\) \\(pnorm(sin(x))\\) Exercise 22.02: 3ICCCz For each of the following, say whether the function is a composition \\(f(g(x))\\) or a product \\(f(x) g(x)\\), or neither. Question A What sort of combination is \\(h_1(x)\\equiv \\ln(x) e^x\\)?     product\\(\\heartsuit\\ \\)       composition︎✘        neither︎✘ Question B What sort of combination is \\(h_2(x)\\equiv \\sin(x) \\cos(x)\\)?     product\\(\\heartsuit\\ \\)       composition︎✘        neither︎✘ Question C What sort of combination is \\(h_3(x) \\equiv \\sin(\\ln(x))\\)?     product︎✘        composition\\(\\heartsuit\\ \\)       neither︎✘ Question D What sort of combination is \\(h_4(x) \\equiv e^{\\ln(x)}\\)?     product︎✘        composition\\(\\heartsuit\\ \\)       neither︎✘ Question E What sort of combination is \\(h_5(x) \\equiv \\sin(x) - \\dnorm(x)\\)?     product︎✘        composition︎✘        neither\\(\\heartsuit\\ \\) Question F What sort of combination is is \\(h_6(x) \\equiv e^{x^2}\\)?     product︎✘        composition\\(\\heartsuit\\ \\)       neither︎✘ Question G What sort of combination is \\(h_7(x) \\equiv \\pnorm(x^2)\\)?     product︎✘        composition\\(\\heartsuit\\ \\)       neither︎✘ Question H What sort of combination is \\(h_8(x) \\equiv \\pnorm(x) \\dnorm(x)\\)?     product\\(\\heartsuit\\ \\)       composition︎✘        neither︎✘ Question I What sort of combination is \\(h_9(x) \\equiv 1/\\sin(x)\\)? product︎✘ compositionNice! Remember, \\(1/\\sin(x)\\) is the same as \\(\\recip(\\sin(x))\\). neither︎✘ Exercise 22.03: JvtMuz Consider this function, \\(F(t)\\), which is a linear combination of three time-shifted sigmoids. As you know, the derivative of a sigmoid \\(\\text{pnorm}(t)\\) is a gaussian with the same center and standard deviation. Question A How many gaussians will be in \\(\\partial_t F(t)\\).     2︎✘        3\\(\\heartsuit\\ \\)       6︎✘        none︎✘ The following figure shows several functions. One of them is \\(\\partial_t F(t)\\). Question B Which function is the actual derivative of \\(F(t)\\)? (Hints: The vertical axis is important as is the value of \\(\\text{dnorm}(0)\\).)     A︎✘        B︎✘        C︎✘        D\\(\\heartsuit\\ \\) Question C Which function is the actual second derivative of \\(F(t)\\)? (Hints: The vertical axis is important as is the value of \\(\\text{dnorm}(0)\\).) A︎✘ The problem is with the first event. B︎✘ The first and second events go in the same direction. The third event is not as big as the second. CGood.  D︎✘ The first event isn’t the second derivative of a sigmoid. Exercise 22.04: QFzIOl In function compositions of the form \\(f\\left(\\strut g(x)\\right)\\), the function \\(f()\\) is called the exterior function and \\(g()\\) is called the interior function. Question A In \\(\\cos(\\ln(x))\\) which is the interior function? \\(\\ln()\\)Nice!  \\(\\cos()\\)︎✘ This is the exterior function. \\(\\sin()\\)︎✘ Sine has nothing to do with it! None of the above︎✘ It’s not a function composition︎✘ Question B In \\(1/\\sin(x)\\) which is the exterior function? \\(\\recip()\\)Excellent!  \\(\\cos()\\)︎✘ \\(\\sin()\\)︎✘ This is the interior function. None of the above︎✘ It’s not a function composition︎✘ Question C In \\(\\sin\\left(\\frac{2 \\pi}{P} (t-t_0)\\right)\\) which is the exterior function? \\(t-t_0\\)︎✘ \\(\\frac{2\\pi}{P}\\)︎✘ \\(\\frac{2\\pi}{P} t\\)︎✘ \\(\\frac{2\\pi}{P} (t-t_0)\\)︎✘ \\(\\sin()\\)Nice!  None of the above︎✘ It’s not a function composition︎✘ Question D In \\(\\sin\\left(2 \\pi (t-t_0)/P\\right)\\) which is the interior function? \\(t-t_0\\)︎✘ That’s part of it. \\(2\\pi /P\\)︎✘ That’s part of it. \\(2\\pi t /P t\\)︎✘ That’s part of it. \\(2\\pi (t-t_0)/P\\)Correct.  \\(\\sin()\\)︎✘ This is the interior function. None of the above︎✘ It’s not a function composition.︎✘ Question E In \\(\\sin(x)\\dnorm(x^2)\\), which is the interior function?     \\(x^2\\)︎✘        \\(x\\)︎✘        \\(\\dnorm(x^2)\\)︎✘        None of the above︎✘        It’s not a function composition.\\(\\heartsuit\\ \\) Exercise 22.06: QIELS Compare the functions \\(f_1 \\equiv \\dnorm(x, mn, sd)\\) and \\(f_2 \\equiv \\dnorm\\left(\\left[x-mn\\right]/sd\\right)\\) by plotting them out in a SANDBOX. In order to construct the plot, you’ll have to pick specific values for \\(mn\\) and \\(sd\\). Make sure that you use the same \\(sd\\) and \\(mn\\) when constructing \\(f_1()\\) and \\(f_2()\\). For instance: f1 &lt;- makeFun(dnorm(x, mn, sd) ~ x, mn=2, sd=3) f2 &lt;- makeFun(dnorm( (x-mn) / sd) ~ x, mn=2, sd=3) Question A When \\(\\text{sd} = 1\\), are the two functions the same?     Yes\\(\\heartsuit\\ \\)       Yes, but only if \\(\\text{mn}=1\\)︎✘        Yes, but only if \\(\\text{mn}=0\\)︎✘        No︎✘ Question B When \\(\\text{sd} \\neq 1\\), for any given mean, the two functions are not the same. What’s the relationship between \\(f_1(x)\\) and \\(f_2(x)\\)? \\(f_2(x) = sd\\, f_1(x)\\)Good.  \\(f_1(x) = sd\\, f_2(x)\\)︎✘ \\(f_1(x) = sd^2 f_2(x)\\)︎✘ \\(f_2(x) = sd^2 f_1(x)\\)︎✘ Exercise 22.08: HCILW Pilots of commercial passenger aircraft consider the comfort of their passengers into account when flying. In transitioning from level flight onto the descent path for landing, for example, pilots take care that the vertical component of acceleration isn’t so great that passengers feel the plane “falling out from under them.” A simple model of the descent path is a sigmoid function. Suppose that the descent starts from an altitude of \\(A = 20,000\\) feet at a distance of 30,000 feet from the end of the runway. A reasonable model for the vertical component of the flight path is \\[\\text{altitude}(x) \\equiv A\\,\\pnorm(x,\\ \\ mn=30000/2,\\ \\ sd=30000/6)\\] Notice that the parameter “mean” is set to be half the distance to the runway, and the parameter “sd” is set to be a third of that. This ensures that the start and end of the descent will involve flight that is close to level. The vertical acceleration is the second derivative of alt() with respect to time: \\(\\partial_{tt} \\text{altitude}(t)\\). But notice that alt() is a function of distance from the runway, not time. In order to treat alt() as a function of time, we need to write “distance from the runway” as a function of time. Let’s set \\(t=0\\) to be the time when the plane begins its descent, when it’s 30,000 feet from the end of the runway. Distance from the runway will be \\[x(t) = 30000 - v\\, t\\] where \\(v\\) is the plane’s velocity. Composing altitude() onto \\(x(t)\\) gives a new function \\[\\text{alt}(t) \\equiv \\text{altitude}(x(t)) = \\text{altitude}(30000-v\\, t)\\] Suppose that the aircraft is flying at \\(v = 200\\) miles-per-hour, which is \\[200 \\frac{\\bcancel{\\text{miles}}}{\\cancel{\\text{hour}}} \\frac{\\cancel{1\\, \\text{hour}}}{3600\\, \\text{s}} \\frac{5280 \\text{ft}}{\\bcancel{1\\, \\text{mile}}} = 293.3 \\frac{\\text{ft}}{\\text{s}}\\]. At that speed, it will take a little more than 100 seconds for the aircraft to reach the runway. Using a sandbox, plot out the function alt(\\(t\\)) function, choosing a domain for \\(t\\) that lets you see the whole descent path. alt &lt;- makeFun(20000 * pnorm(30000 - v * t, 30000/2, 30000/6) ~ t, v = 293.3) slice_plot(alt(t) ~ t, domain(t=c(0, 110))) Compute the second derivative \\(\\partial_{tt} \\text{alt}(t)\\) to find the vertical component of acceleration of the aircraft. (Important note: Due to a bug in R, use numD() rather than D() to compute the second derivative.) Graph the second derivative over the appropriate domain and look for the most extreme values of acceleration. dd_alt &lt;- numD(alt(t) ~ t + t) slice_plot(dd_alt(t) ~ t, domain(t=c(0,110))) From the graph, read off the maximum vertical acceleration during the descent. Question A What are the units of vertical acceleration shown in the graph? feet-per-second︎✘ That’s a unit of velocity, not acceleration. feet-per-second-squaredGood.  miles-per-hour-squared︎✘ This is a unit of acceleration, but since we used feet and seconds in defining the alt() function, the second derivative will also be in feet and seconds. A rule of thumb is that a vertical acceleration up to \\(5\\, \\text{ft}\\, \\text{s}^{-2}\\) is acceptable in terms of passenger comfort. Regrettably, the descent path we described doesn’t meet the standard! So we have to re-design the descent path. Since both the altitude and velocity are set, the only parameter you can change is the distance from the foot of the runway where descent commences. Of course, for the parameters “mean” and “sd” need to be set accordingly. Question B How far from the foot of the runway should descent begin in order to stay within the \\(5\\, \\text{ft}\\, \\text{s}^{-2}\\) acceleration constraint? Pick the shortest distance that satisfies the constraint.     40,000 ft︎✘        50,000 ft︎✘        60,000 ft\\(\\heartsuit\\ \\)       70,000 ft︎✘        80,000 ft︎✘ For reflection: A new hire at the airline’s operations center proposes to model the descent as a straight-line function rather than a sigmoid. He points out that the second derivative of a straight-line function is always 0, so the passengers would feel no acceleration at all! Explain to this newbie what’s wrong with his idea. Exercise 22.09: Ao6v5n In Exercise none yet, E9e7c6 you constructed models \\(D(t)\\) of the availability of a drug in the bloodstream for three different pill-taking regimens: every six hours, every eight hours, and a double dose to start followed by a single dose every eight hours. The model for from a single, isolated pill is a zero before the pill is taken, then exponential decay from the level of the pill dose after the pill is taken. Like this: pill &lt;- makeFun(ifelse(t &lt; 0, 0, exp(-k * t)) ~ t, k = log(2)/3) The parameter \\(k\\) has been set to represent a drug with a half-life of three hours. The model for the entire regiment is a linear combination of time-shifted single pills, e.g.: regimen8 &lt;- makeFun(A*pill(t) + A*pill(t-8) + A*pill(t-16) + A*pill(t-24) + A*pill(t-32) ~ t, A=1) From graphs of the functions themselves it is easy to check whether the availability ever falls below the therapeutic threshold (which we stipulated is 0.25). For instance, the eight-hour regiment with a dose of A=1 does fall below the threshold during the first day. So a larger dose is needed than A=1. The derivative \\(\\partial_t \\text{regimen8}(t)\\) tells the instantaneous rate at which the drug is being administered to and eliminated from the patient’s body. For each of the three regimens, construct \\(\\partial_t \\text{regimen}(t)\\). Ignoring the glitches due to discontinuity at the times the pills are consumed, which of the three regimens has the lowest average rate of drug elimination? Exercise 22.10: ed6q4v Recall from Section 11.2 the Lorenz curve used to describe income inequality. The Lorenz curve shows the fraction of total income versus population fraction. Figure 22.2: A Lorenz curve (blue) fitted to income data from the US in 2009. (See Figure 11.1.) Since the population is arranged from poorest to richest along the horizontal axis, Lorenz curves must be both monotonically increasing and concave up. That is, any Lorenz function \\(L(P)\\), where \\(P\\) is the population fraction, must satisfy these criteria: \\(L(0) = 0\\) \\(L(1) = 1\\) that is, the aggregate fraction of income earned by the entire population is 100%. \\(\\partial_P L(P) \\ &gt; \\ 0\\) that is, monotonically increasing \\(\\partial_{PP} L(P) \\ &gt; \\ 0\\) that is, concave up. Consider a function \\(H(P) \\equiv L_1(L_2(P))\\) which is the composition of two Lorenz curves. A. Use the composition rule to show that \\(H(P)\\) is monotonically increasing. (Hint, calculate \\(\\partial_P H(P)\\) and show that it must be positive.) B. Using both the composition and product rules, calculate \\(\\partial_{PP} H(P)\\) and show that \\(H(P)\\) must be concave up. Exercise 22.12: 0yrIXe The formula for the function \\(\\dnorm(x)\\) is \\[\\dnorm(x) \\equiv \\frac{1}{\\sqrt{2 \\pi}} \\exp\\left(\\frac{x^2}{2}\\right)\\ .\\] Use the chain rule to find \\(\\partial_x \\dnorm(x)\\). Confirm from your answer to (1) that there is another formula for \\(\\partial_x \\dnorm(x)\\), namely \\[\\partial_x \\dnorm(x) = - x \\dnorm(x)\\ .\\] Use the product rule to find \\(\\partial_{xx} \\dnorm(x)\\). From your answer to (3), compute the 3rd derivative \\(\\partial_{xxx} \\dnorm(x)\\): Ans: \\[2 x \\dnorm(x) - x \\left[{\\large\\strut}x^2 - 1\\right] \\dnorm(x) = \\dnorm(x) \\left[{\\large\\strut} (3 x - x^3)\\right] \\ .\\] Let’s generalize the pattern. Each of the previous derivatives has been a polynomial—let’s call it \\(p_n(x)\\) for the \\(n\\)th derivative—times \\(\\dnorm(x)\\). Knowing \\(p_n(x)\\), we can easily find \\(p_{n+1}(x)\\): \\[p_{n+1}(x) = -x p_n(x) + \\partial_x p_n(x)\\] We know \\(p_1(x) = -x\\) so \\(p_2(x) = x^2 - 1\\). In turn, this tells us \\(p_3(x) = 3x - x^3\\). Find: \\(p_4(x)\\) \\(p_5(x)\\) \\(p_6(x)\\) Exercise 22.14: 2JJoS6 Confirm using algebraic manipulation the differentiation rule for a product of three functions: \\[\\left[ u\\cdot v\\cdot w\\right]&#39; = \\color{blue}{u&#39;}\\cdot v\\cdot w\\ +\\ u\\cdot \\color{blue}{v&#39;}\\cdot w\\ +\\ u\\cdot v\\cdot \\color{blue}{w}&#39;\\] Here, \\(u\\) is shorthand for \\(u(x)\\), and \\(u&#39;\\) is shorthand for \\(\\partial_x u(x)\\), and similarly for \\(v\\) and \\(w\\). Hint: \\(\\left[ u\\cdot v\\cdot w\\right] = u \\cdot \\left[ v \\cdot w\\right]\\). So a product of three functions can be seen as a product \\(u\\cdot h\\) where \\(h \\equiv v \\cdot w\\). “Per capita” is Latin. Literally, it translates to “by head.” but its modern sense is “per unit of population.” The “unit of population” is, of course, a person.↩︎ "],["optim-and-shape.html", "Chapter 23 Optimization 23.1 Structure of the problem 23.2 Interpreting the argmax 23.3 Derivatives and optimization 23.4 Be practical! 23.5 Exercises", " Chapter 23 Optimization To “optimize” means to make something as good as possible with the available resources. Optimization problems are common in science, logistics, industry, and any other area where one seeks the best solution to a problem. Some everyday examples: 2440 When to harvest trees being grown for lumber. Harvest too soon and you might be losing out on the prime growing years. Wait too long and trees will have settled in to slow growth, if any. Walking up too steep a slope is tiring and slows you down; that’s why hiking trails have switchbacks. When the switchbacks are too shallow, it takes a long time to cover the distance. What’s the most efficient angle to enable hikers to get up the hill in the shortest time. How much salt to add to a stew. Stews can be too salty, or they can be not salty enough. Somewhere in the middle is the optimum.2445 23.1 Structure of the problem In an optimization problem, there is one or more input quantities whose value you have to choose. The amount of salt; the years to wait from planting to harvesting a tree; the angle of the trail with respect to the slope. We’ll call this the decision quantity. 2450 Similarly, there is one or more output quantity that you value and want to make as good as possible. The taste of the stew; the amount of usable wood harvested; the time it takes to walk up the hill. The output quantities are called the objectives. 2455 In this chapter, we will deal with optimization problems that involve only a single objective. Problems with multiple objectives are among the most interesting and important in real-world decision making. Single-objective optimization techniques are a component of the more complex decision making, but they are a good place to get started. The model that relates inputs to the objective output is called the objective function. Solving an optimization problem—once the modeling phase is complete—amounts to finding a value for the decision quantity (the input to the objective function) that produces the best output from the objective function. 2460 Sometimes the objective is something that you want to minimize, make as small as possible. In the hiking trail problem, we seek to minimize the amount of time it takes to walk up the trail. Sometimes you want to maximize the objective, as in the wood-harvest problem where the objective is to harvest the most wood per year. 2465 Mathematically, maximization and minimization are the same thing. Every minimization problem can be turned into a maximization problem by putting a negative sign in front of the objective function. To simplify the discussion, in talking about finding the solution to an optimization problem we’ll imagine that the goal is to maximize. But keep in mind that many circumstances in the real world, “best” can mean minimization. 2470 Recall from Section 4.3.6 that there are two components to the task of maximization or minimization. The argmax is the input to the objective function which produces the largest output. The maximum is the value of that output.38 Argmin and minimum are the words used in a situation where you seek the smallest value of the objective function.2475 Once you have found the argmax you can plug that value into the objective function to find the value of the output. That value is the maximum. People often talk about “finding the maximum.” This is misleading. The setup for an optimization problem is: Construct (that is, model) the objective function. Now that you know the objective function, find the input to that function—that is, the argmax—that produces the maximum output. To illustrate the setup of an optimization problem, imagine yourself in the situation of a contest to see who can shoot a tennis ball the farthest into a field with a slingshot. During the contest, you will adjust the vertical angle of launch, place the ball into the slingshot’s cradle, pull back as far as possible, and let go. To win the contest, you need to optimize how you launch the ball. 2480 The objective is to maximize the distance traveled by the ball. The objective function models the distance travelled as a function of the quantities you can control, for instance the vertical angle of launch or the amount by which you pull back the slingshot. For simplicity, we’ll imagine that the slingshot is pulled back by a standard amount, producing a velocity of the ball at release of \\(v_0\\). Since \\(v_0\\) is fixed, you’ll win or lose based on the angle of launch you choose. 2485 Before you head out into the field to experiment, let’s do a bit of preparation for constructing the objective function. Using some principles of physics and mathematics (which you may not yet understand), we’ll model how far the ball will travel (horizontally) as a function of the angle of launch \\(\\theta\\) and the initial velocity \\(v_0\\). 2490 The mathematics of such problems involves an area called differential equations, an important part of calculus which we’ll come to later in the course. Since you don’t have the tools yet, we’ll just state a simple model of how long the ball stays in the air. \\[\\text{duration}(v_0, \\theta) = 2 v_0 \\sin(\\theta)/g\\] \\(g\\) is the acceleration due to gravity, which is about \\(9.8 \\text{m}\\text{s}^{-2}\\), assuming that the contest is being held on Earth. The horizontal distance travelled by the tennis ball will be \\[\\text{hdist}(v_0, \\theta) = \\cos(\\theta) v_0\\, \\text{duration}(v_0, \\theta) = 2 v_0^2 \\cos(\\theta)\\sin(\\theta) / g\\] Our objective function is hdist(), and we seek to find the argmax. The input \\(v_0\\) is (we have assumed) fixed, so the only decision quantity is the angle \\(\\theta\\). The best choice of \\(\\theta\\) will make the quantity \\(\\cos(\\theta)\\sin(\\theta)\\) as large as possible. So in finding the argmax, we don’t need to be concerned with \\(v_0\\) or \\(g\\). Finding the argmax can be accomplished simply by plotting the function \\(\\cos(\\theta)\\sin(\\theta)\\). We’ll implement the function so that the input is in units of degrees. Figure 23.1: In the simple model of a tennis ball launched at an angle \\(\\theta\\) from the horizontal, the distance travelled is \\(2 v_0^2 / g\\) times \\(\\cos(\\theta)\\sin(\\theta)\\). You can see that the maximum value is about 0.5 and that this occurs at an argmax \\(\\theta\\) that’s a little bit less than 50\\(^\\circ\\). Zooming in on the \\(\\theta\\) axis let’s you find the argmax with more precision: Figure 23.2: Zooming in on the argmax of the objective function. It’s important to look at the scale of the vertical axis. Any value of \\(\\theta\\) between about 40 and 50 gives a very close approximation to the maximum. From the graph, especially the zoomed-in version, you can read off the argmax as \\(\\theta = 45^\\circ\\). Finding the argmax solves the problem. You may also want to present your solution by saying what the value of the output of hdist() is when the argmax is given as input. You can read off the graph that the maximum of \\(\\cos(\\theta)\\sin(\\theta)\\) is 0.5 at \\(\\theta = 45^\\circ\\), so overall the distance will be \\(v_0^2 / g\\) 2495 23.2 Interpreting the argmax The graphical solution given to the slingshot problem is entirely satisfactory. Whether that solution will win the contest depends of course on whether the model we built for the objective function is correct. There are potentially important things we have left out, such as air resistence. 2500 Solving the optimization problem has prepared us to go out in the field and test the result. Perhaps we’ll find that the real-world optimum angle is somewhat steeper or shallower than \\(\\theta = 45^\\circ\\). 2505 Besides the argmax, another important quantity to read from the graph in Figure 23.1 is the precision of the argmax. In strict mathematical terms, the argmax for the tennis-ball problem is exactly 45 degrees at which point \\(\\cos(\\theta)\\sin(\\theta) = 0.5\\). Suppose, however, that the ball were launched at only 40 degrees. Five degrees difference is apparent to the eye, but the result will be essentially the same as for 45 degrees: \\(\\cos(\\theta)\\sin(\\theta) = 0.492\\). The same is true for a launch angle of 50 degrees. For both “sub-optimal” launch angles, the output is within 2 percent of the 45-degree result. It’s easy to imagine that a factor outside the scope of the simple model—the wind, for instance—could change the result by as much or more than 2 percent, so a practical report of the argmax should reasonable be “40 to 50 degrees” rather than “exactly 45 degrees.” 2510 Contests are won or lost by margins of less than 1%, so you should not casually deviate from the argmax. On the other hand, \\(45^\\circ\\) is the argmax of the model. Reality may deviate from the model. For instance, suppose that air resistance or wind might have an effect of about 1% on the distance. Since the real-world function might deviate by as much as 1% of the model value, we shouldn’t expect the real-world argmax to be any closer to 45\\(^\\circ\\) than \\(\\pm 5^\\circ\\), since anywhere in that input domain generates an output that is within 1% of the maximum output for the model. 2515 23.3 Derivatives and optimization We’re now going to reframe the search for the argmax and it’s interpretation in terms of derivatives of the objective function with respect to the decision quantity (\\(\\theta\\) in the slingshot problem). For a function of one variable, this will not be an improvement from the look-at-the-graph technique to find the argmax. A genuine reason to use derivatives is to set us up in the future to solve problems with more than one variable, where it is hard to draw or interpret a graph. Also, describing functions in the language of derivatives can help us think more clearly about aspects of the problem, such as the precision of the argmax. 2520 With a graph such as Figure 23.1, it’s easy to find the argmax; common sense carries the day. So it won’t be obvious at first why we are going to take the following approach: Let’s denote an argmax of the objective function \\(f(x)\\) by \\(x^\\star\\). Let’s look at the derivative \\(\\partial_x f(x)\\) in the neighborhood of \\(x^\\star\\). Referring to Figure 23.1, where \\(x^\\star = 45^\\circ\\), you may be able to see that \\(\\partial_x f(x^\\star)\\) is zero; the line tangent to the function’s graph at \\(x^\\star\\) is horizontal. 2525 Seen another way, the slope of \\(f(x)\\) to the left of \\(x^\\star\\) is positive. Move a tiny bit to the right (that is, increase \\(x\\) by a very small amount) leads to an increase in the output \\(f(x)\\). Just to the right of \\(x^\\star\\), the slope of \\(f(x)\\) is negative; as you reach the top of a hill and continue on, you will be going downhill. So the derivative function is positive on one side of \\(x^\\star\\) and negative on the other, suggesting that it crosses zero at the argmax. 2530 Common sense is correct: Walk uphill to get to the peak, walk downhill to move away from the peak. When you come to the top of a smooth hill, the terrain is level. (Since our modeling functions are smooth, so must be the hills that we visualize the functions with.) Inputs \\(x^\\star\\) such that \\(\\partial_x f(x^\\star) = 0\\) are called critical points. Why not call them simply argmaxes? Because a the slope will also be zero at an argmin. And it’s even possible to have the slope be zero at a point that’s neither an argmin or an argmax. 2535 At this point, we know that values \\(x^\\star\\) that give \\(\\partial_x f(x^\\star) = 0\\) are “critical points,” but we haven’t said how to figure out whether a given critical point is an argmax, an argmin, or neither. This is where the behavior of \\(\\partial_x f(x)\\) near \\(x=x^\\star\\) is important. If \\(x^\\star\\) is an argmax, then \\(\\partial_x f(x)\\) will be positive to the left of \\(x^\\star\\) and negative to the right of \\(x^\\star\\); walk up the hill to get to \\(x^\\star\\), at the top the hill is flat, and just past the top the hill has a negative slope. 2540 For an argmin, changing \\(x\\) from less than \\(x^\\star\\) to greater than \\(x^\\star\\); you will be walking down into the valley, then level at the very bottom \\(x=x^\\star\\), then back up the other side of the valley after you pass \\(x=x^\\star\\). Figure 23.3 shows the situation. 2545 Figure 23.3: Top row: An objective function near an argmax (left) and an argmin (right). Bottom row: The derivative of the objective function. A horizontal line (orange) has been added to mark zero on the vertical axis. The bottom row of graphs in Figure 23.3 shows the derivative of the objective function \\(f(x)\\), that is, \\(\\partial_x f(x)\\). You can see that for the argmax of \\(f(x)\\), the derivative \\(\\partial_x f(x)\\) is positive to the left and negative to the right. Similarly, near the argmin of \\(f(x)\\), the derivative \\(\\partial_x f(x)\\) is negative to the left and positive to the right. 2550 Stated another way, the derivative \\(\\partial_x f(x)\\) has a negative slope just to the left of an argmin and a positive slope to the left of an argmax. 2555 The second derivative of the objective function \\(f(x)\\) at a critical point \\(x^\\star\\) is what tells us whether the critical point is an argmax, an argmin, or neither. Critical point \\(x^\\star\\) \\(\\partial_x f(x^\\star)\\) \\(\\partial_{xx} f(x^\\star)\\) argmax 0 negative argmin 0 positive neither 0 0 Throughout Block 2, we have translated features of functions that are evident on a graph into the language of derivatives: The slope of a function \\(f(x)\\) at any input \\(x\\) is the value of the derivative function \\(\\partial_x f(x)\\) at that same \\(x\\). The concavity of a function \\(f(x)\\) at any input is the slope of the derivative function, that is, \\(\\partial_{xx} f(x)\\). Putting (i) and (ii) together, we get that the concavity of a function \\(f(x)\\) at any input \\(x\\) is the value of the second derivative function, that is, \\(\\partial_{xx} f(x)\\). At an argmax \\(x^\\star\\) of \\(f(x)\\), the value of the derivative function \\(\\partial_x f(x^\\star)\\) is zero and the value of the second derivative function \\(\\partial_{xx} f(x^\\star)\\) is negative. The situation at an argmin is along the same lines, the derivative of the objective function is zero and the second derivative is positive. 2575 What’s the critical point? You’re familiar with the quadratic polynomial: \\[g(x) = a_0 + a_1 x + a_2 x^2\\] The graph of a quadratic polynomial is a parabola, which might be concave up or concave down. As you know, a parabola has only one critical point, which might be an argmin or an argmax. 2580 Let’s find the critical point. We know that the critical point is \\(x^\\star\\) such that \\(\\partial_x g(x^\\star) = 0\\). Since we know how to differentiate a power law, we can see that \\[\\partial_x g(x) = a_1 + 2 a_2 x\\] and, more specifically, at the critical point \\(x^\\star\\) the derivative will be \\[a_1 + 2 a_2 x^\\star = 0\\] The above is an equation, not a definition. It says that whatever \\(x^\\star\\) happens to be, the quantity \\(a_1 + 2 a_2 x^\\star\\) must be zero. Using plain old algebra, we can find the location of the critical point \\[x^\\star = -\\frac{a_1}{2 a_2}\\] 2585 In economics, a monopoly or similar arrangement can set the price for a good or commodity. Monopolists can set the price at a level that generates the most income for themselves. Figure 23.4: Demand as a function of price, as first published by Antoine-Augustin Cournot in 1836. Source) In 1836, early economist Antoine-Augustin Cournot published a theory of revenue versus demand based on his conception that demand will be a monotonically decreasing function of price. (That is, higher price means lower demand.) We’ll write as \\(\\text{Demand}(p)\\) demand as a function of price. The revenue generated at price \\(p\\) is \\(R(p) \\equiv p \\text{Demand}(p)\\): price times demand. To find the revenue-maximizing demand, differentiate \\(R(p)\\) with respect to \\(p\\) and find the argmax \\(p^\\star\\) at with \\(\\partial_p R(p^\\star) = 0).\\) This can be done with the product rule. \\[\\partial_p R(p) = p \\ \\partial_p \\text{Demand}(p) + \\text{Demand}(p)\\] At the argmax \\(p^\\star\\) we have: \\[p^\\star \\partial_p \\text{Demand}(p^\\star) + \\text{Demand}(p^\\star) = 0 \\ \\ \\stackrel{\\text{solving for}\\ p^\\star}{\\Longrightarrow} \\ \\ p^\\star = - \\frac{\\text{Demand}(p^\\star)}{\\partial_p \\text{Demand}(p^\\star)}\\] If the monopolist knows the demand function \\(D(p)\\), finding the revenue maximizing price is a simple matter. But in general, the monopolist does not know the demand function in advance. Instead, an informed guess is made to set the initial price \\(p_0\\). Measuring sales \\(D(p_0)\\) gives one point on the demand curve. Then, try another price \\(p_1\\). This gives another point on the demand curve as well as an estimate \\[\\partial_p D(p_0) = \\frac{D(p_1) - D(p_0)}{p_1 - p_0}\\] Now the monopolist is set to model the demand curve as a straight-line function and easily to find \\(p^\\star\\) for the model. For instance, if the demand function is modeled as \\(D_1 (p) = a + b p\\), the optimal price will be \\(p^\\star_1 = - \\frac{a + b p^\\star}{b}\\) which can be solved as \\(p^\\star_1 = - a/2b\\). \\(p^\\star_1\\) is just an estimate of the optimum price. Still, the monopolist can try out that price, giving a third data point for the demand function from which a better model of the demand function can be constructed. With the better estimate, find a new a argmax \\(p^\\star_2\\). This sort of iterative process for finding an argmax of a real-world function is very common in practice. 23.4 Be practical! Decision making is about choosing among alternatives. In some engineering or policy contexts, this can mean finding a value for an input variable that will produce the “best” outcome. For those who have studied calculus, it’s natural to believe that calculus-based techniques for optimization are the route to making the decision. We emphasize that the optimization techniques covered in this chapter are only part of a broader set of techniques for real-world decision-making problems. In particular, most policy contexts involve multiple objectives. For example, in designing a car one goal is to make it cheap to manufacture, another to make it attractive, and still another to make it safe. These different objectives are often at odds with one another. In Block 4 of this text, we’ll discuss some calculus techniques that help policy-makers in multi-objective settings. For now, sticking with the idealized (and often unrealistic) setting of maximizing a single objective, with one or more inputs. Recall the setting for calculus-type maximization. You have a function with one or more inputs, say, \\(f(x)\\) or \\(g(x,y)\\) or, often, \\(h(x, y, z, \\ldots)\\) where \\(\\ldots\\) might be standing for tens or hundreds or thousands of variables or more. If you can graph the function (feasible for one- or two-input functions), you can often easily scan the graph by eye to find the peak. The calculus-based techniques were developed for situations where such graphing is not possible and, instead, you have a formula for the function. (Such occasions are of great theoretical interest but not all that common in practice.) The basis of the calculus techniques is the observation that, at the argmax of a smooth function, the derivative of the function is 0. As an example, consider a style problem that often appears in calculus textbooks. You have been tasked to design a container for a large volume V of liquid. It is desired to make the weight of the container as little as possible. (This is a minimization problem, then.) In classical textbook fashion, you are told that the container is to be a cylinder made out of a particular metal of a particular thickness. This is a lovely geometry/calculus problem. Whether it is relevant to any genuine, real-world problem is another question. Using the notation in the diagram, the volume and surface area of the cylinder is \\[V(r, h) \\equiv \\pi r^2 h \\ \\ \\ \\text{and}\\ \\ \\ A(r, h) \\equiv 2 \\pi r^2 + 2 \\pi r h\\] Minimizing the weight of the cylinder is our objective (according to the problem statement) and the weight is proportional to the surface area. Since the volume \\(V\\) is given (according to the problem statement), we want to re-write the area function to use volume: \\[h(r, V) \\equiv V / \\pi r^2 \\ \\ \\ \\implies\\ \\ \\ A(r, V) = 2 \\pi r^2 + 2 \\pi r V/\\pi r^2 = 2 \\pi r^2 + 2 V / r\\] Suppose \\(V\\) were specified as 1000 liters. A good first step is to choose appropriate units for \\(r\\) to make sure the formula for \\(A(r, V)\\) is dimensionally consistent. Suppose we choose \\(r\\) in cm. Then we want \\(V\\) in cubic centimeters (cc). 1000 liters is 1,000,000 cc. Now we can plot a slice of the area function: A &lt;- makeFun(2*pi*r^2 + 2*V/r ~ r, V=1000000) slice_plot(A(r) ~ r, domain(r=c(10, 100))) %&gt;% gf_labs(x = &quot;radius (cm)&quot;, y = &quot;Surface area of container (square cm)&quot;) As always, the function’s derivative is zero at the optimal \\(r\\). In the graph, the argmin is near \\(r=50\\) cm at which point the minimum is about 50,000 cm\\(^2\\). Since \\(h(r,V) = V/\\pi r^2\\), the required height of cylinder will be near \\(10^6 / \\pi 50^2 = 127\\)cm. In calculus courses, the goal is often to find a formula for the optimal radius as a function of \\(V\\). So we differentiate the objective function—that is, the area function for any \\(V\\) and \\(r\\) with respect to \\(r\\), \\[\\partial_r A(r, V) = 4 \\pi r - 2 V / r^2\\] Setting this to zero (which will be true at the optimal \\(r^\\star\\)) we can solve for \\(r^\\star\\) in terms of \\(V\\): \\[4 \\pi r^\\star - 2 \\frac{V}{\\left[r^\\star\\right]^2} = 0 \\ \\ \\ \\Longrightarrow\\ \\ \\ 4\\pi r^\\star = 2\\frac{V}{\\left[r^\\star\\right]^2} \\Longrightarrow\\ \\ \\ \\left[r^\\star\\right]^3 = \\frac{1}{2\\pi} V \\ \\ \\ \\Longrightarrow\\ \\ \\ r^\\star = \\sqrt[3]{V/2\\pi}\\] For \\(V = 1,000,000\\) cm\\(^3\\), this gives \\(r^\\star = 54.1926\\) cm which in turn implies that the corresponding height \\(h^\\star = V/\\pi (r^\\star)^2 = 108.3852\\) cm. We’ve presented the optimum \\(r^\\star\\) and \\(h^\\star\\) to the nearest micron. (Does that make sense to you? Think about it for a moment before reading on.) A good rule of thumb in modeling is this: “If you don’t know what a sensible precision is for reporting your result, you don’t have a complete grasp of the problem.” Here are two reasonable ways to sort out a suitable precision. Solve a closely related problem which for many practical purposes would have been equivalent. Look at how big a change in the output of the objective function is produced by a change from the argmax. Approach (2) is always at hand, since you already know the objective function. Let’s graph the objective function near \\(r = 54.1926\\) … Look carefully at the axes scales. Deviating from the mathematical optimum by about 5cm (that is, 50,000 microns) produces a change in the output of the objective function by about 400 units out of 55,000. In other words, about 0.7%. It’s true that \\(r^\\star = 54.1926\\) cm gives the “best” outcome. And sometimes such precision is warranted. For example, improving the speed of an elite marathon racer by even 0.1% would give her a 7 second advantage: often the difference between silver and gold! What’s different is that you know exactly what is the ultimate objective of a marathon: finish faster. But you may not know the ultimate objective of the system your “optimal” tank will be a part of. For instance, your tank may be part of an external fuel pod on an aircraft. Certainly the designers of the aircraft want the tank to be as light as possible. But they also want to reduce drag as much as possible. A 54 cm diameter tube has about 17% more drag than a 50 cm tube. To save that much drag, it’s probably well worth increasing weight by 0.7%. In reporting the results from an optimization problem, you ought to give the decision maker all relevant information. Here, that might be as simple as including the above graph in your report. We mentioned another technique for getting a handle on what precision is meaningful: (1) solve a closely related problem. This often requires some insight and creativity to frame the new problem. Here, we note that large capacity tanks often are shaped like a lozenge: a cylinder with hemi-spherical ends. Using \\(h\\) for the length of the cylindrical portion of the tank, and \\(r\\) for the radius, the volume and surface area are: \\[V(r, h) = \\pi r^2 h + \\frac{4}{3} \\pi r^3 \\ \\ \\ \\text{and}\\ \\ \\ A(r,h) = 2 \\pi r h + 4 \\pi r^2\\] Again, \\(V\\) was specified as 1000 liters. As detailed in Exercise 23.18, the surface area of this 1000-liter tank is about 48,400 cm\\(^2\\). This is more than 10% less than for the cylindrical tank. 23.5 Exercises Exercise 23.02: 0zyL02 The simple model of the distance travelled by a tennis ball after launch from a slingshot is \\[\\text{hdist}(v_0, \\theta) = 2 v_0^2 \\cos(\\theta)\\sin(\\theta) / g\\] where \\(\\theta\\) is the launch angle, measured from the horizontal, \\(v_0\\) is the initial velocity, and \\(g\\) is the acceleration due to gravity. Question A What is the dimension of \\(v_0\\)?     L T︎✘        L / T\\(\\heartsuit\\ \\)As in miles/hour or meters/second.       L / T\\(^2\\)︎✘        L\\(^2\\) / T\\(^2\\)︎✘ Question B What is the dimension of \\(g\\)?     M L︎✘        M L / T︎✘        L / T\\(^2\\)\\(\\heartsuit\\ \\)       M L / T\\(^2\\)︎✘ This is force, not acceleration. Question C What is the dimension of \\(\\theta\\)? L︎✘ L^2︎✘ T/L︎✘ It’s dimensionlessGood. An angle is measured by distance along the circumference of a circle divided by the radius of the circle, so L/L. The L dimensions cancel out. Question D What is the dimension of \\(\\sin(\\theta\\))? L︎✘ L^2︎✘ T/L︎✘ It’s dimensionlessExcellent! The output of a sinusoid is always dimensionless. You would have to multiply by a dimensionful amplitude (\\(A \\sin(\\theta)\\)) to attach a dimension to the output. Question E What is the dimension of \\(2 v_0^2 \\cos(\\theta)\\sin(\\theta) / g\\)?     L\\(\\heartsuit\\ \\)       L^2︎✘        L/T︎✘        L/T\\(^2\\)︎✘ Question F Suppose the initial velocity of the ball is \\(v_0 = 10\\) meters/second. Since we’re on the surface of Earth, \\(g=9.8\\) meters/second-squared. At the optimal launch angle \\(\\theta\\), how far does the model predict the ball will travel?     10 meters\\(\\heartsuit\\ \\)       25 meters︎✘        50 meters︎✘        75 meters︎✘ Exercise 23.04: FbJynV Question A Consider the function \\(f(x) \\equiv x^3\\). Confirm that the value of the derivative \\(\\partial_x f(x = 0)\\) and so \\(x^\\star = 0\\) is a critical point. Which sort of critical point is \\(x^\\star=0\\)? (Hint: Draw the graph of \\(f(x)\\) near \\(x=0\\) to see what’s going on.) An argmax︎✘ But \\(f(0) &lt; f(x &gt; 0)\\), so \\(x^\\star=0\\) can’t be an argmax. An argmin︎✘ But \\(f(x &lt; 0) &lt; f(0)\\), so \\(x^\\star=0\\) can’t be an argmin. NeitherRight!  Question B Still working with the function \\(f(x) \\equiv x^3\\), find the value of the second-derivative \\(\\partial_{xx} f(x^\\star)\\) evaluated at the critical point \\(x = x^\\star = 0\\). Which of these is \\(\\partial_{xx} f( x=0)\\)? Negative︎✘ But you established in the previous exercise that the critical point \\(x^\\star=0\\) is neither an argmin nor wan argmax. Positive︎✘ But you established in the previous exercise that the critical point \\(x^\\star=0\\) is neither an argmin nor wan argmax. ZeroExcellent!  Exercise 23.06: ykelx The graph shows three different functions labeled (A), (B), and (C). Question A Function (A) is     concave down\\(\\heartsuit\\ \\)       non-concave︎✘        concave up︎✘ Question B Function (B) is     concave down︎✘        non-concave︎✘        concave up\\(\\heartsuit\\ \\) Question C Function (C) is     concave down︎✘        non-concave\\(\\heartsuit\\ \\)       concave up︎✘ Question D The negative of function (A) is     concave down︎✘        non-concave︎✘        concave up\\(\\heartsuit\\ \\) The graph shows a function \\(\\text{wave}(t) \\equiv \\sin(2 \\pi t/4)\\) and labels four input values \\(t\\). Question E For what values of the input \\(t\\) is the function concave up?     \\(t = A\\) and \\(t=D\\)︎✘        \\(t = A\\) and \\(t=C\\)︎✘        \\(t = C\\) and \\(t = D\\)\\(\\heartsuit\\ \\)       none of the above︎✘ Question F For what values of the input \\(t\\) is the function non-concave?     \\(t = A\\)\\(\\heartsuit\\ \\)       \\(t=B\\)︎✘        \\(t=C\\)︎✘        none of the above︎✘ Question G Where is the function steepest?     \\(t = A\\)\\(\\heartsuit\\ \\)       \\(t=B\\)︎✘        \\(t=C\\)︎✘        \\(t=D\\)︎✘ Exercise 23.08: lexkd Here is a smooth function marked at a few points. Your task is, at each point, to estimate the value of the derivative, the sign of the second derivative, and the radius of the circle that would nicely match the function in a small region around each point. (Remember, we’re asking for the radius of the circle, which is half the diameter.) To simplify things, here is a table giving seven different combinations of the quantities you are to estimate. Some of them correctly match one of the labeled points, some do not. All you need to do is choose which is the correct set of quantities for each labeled point. row value of 1st deriv sign of 2nd deriv radius                                        i -0.3 pos 0.25 ii 2.1 near 0 2000 iii -1.4 neg 12 iv 0.3 neg 0.3 v 2.1 pos 0.1 vi 1.3 neg 3 vii 0.5 pos 1 Question A Which row from the table best matches the function at point A?     i︎✘        ii︎✘        iii︎✘        iv︎✘        v︎✘        vi︎✘        vii\\(\\heartsuit\\ \\) Question B Which row from the table best matches the function at point B?     i︎✘        ii\\(\\heartsuit\\ \\)       iii︎✘        iv︎✘        v︎✘        vi︎✘        vii︎✘ Question C Which row from the table best matches the function at point C?     i︎✘        ii︎✘        iii︎✘        iv\\(\\heartsuit\\ \\)       v︎✘        vi︎✘        vii︎✘ Question D Which row from the table best matches the function at point D?     i\\(\\heartsuit\\ \\)       ii︎✘        iii︎✘        iv︎✘        v︎✘        vi︎✘        vii︎✘ Question E Which row from the table best matches the function at point E?     i︎✘        ii︎✘        iii︎✘        iv︎✘        v︎✘        vi\\(\\heartsuit\\ \\)       vii︎✘ Exercise 23.10: dwes You and your pet dog Swimmer often go to the beach and walk along the water’s edge. You throw a ball down the beach, but at an angle so it lands in the water. Swimmer goes to work. She runs down the beach (fast) and then plunges into the water, heading toward the ball. She can run fast on the beach: 400 m/minute. But she swims rather slower: 50 m/min. Suppose you threw the ball to a point about 50 meters down the beach and 10 meters out in the water. The overall distance to the ball is therefore \\(\\sqrt{50^2 + 10^2} \\approx 51\\) meters. If Swimmer entered the water immediately, she would take about a minute to reach the ball (51 m / 50 m/min). Swimmer can get to the ball faster by running down the beach a bit and then turning into the water. If Swimmer ran all 50 meters down the beach and then turned to swim the 10 meters, it would take her (50/400 + 10/50) minutes, about one-third of a minute. Figure 23.5: Swimmer’s optimal path to the ball consists of running \\(x\\) meters along the shore, then swimming diagonally to the ball. Can Swimmer do better? You can set up the calculation like this. Imagine \\(x\\) to be the distance down the beach that Swimmer runs. The time to run this distance will be \\(x/400\\). The distance remaining to the ball can be found by the Pythagorean theorem. One leg of the triangle has length \\((50-x)\\), the other has length 10 m. So, the length of the third side is \\(\\sqrt{\\strut (50-x)^2 + 10^2}\\). For instance, if \\(x\\) were 45, the distance to swim in the water would be \\(\\sqrt{(50-45)^2 + 10^2} = 11.2\\) m. Divide this distance by 50 m/min to get the time spent in the water. distance_in_water &lt;- makeFun( __your_pythagorean_formula ~ x) time_to_ball &lt;- makeFun(x/400 + distance_in_water(x)/50 ~ x) Time_to_ball() takes one argument, the distance \\(x\\) Swimmer runs down the beach before turning into the water. Use a SANDBOX to find the distance that calculus-savvy Swimmer runs down the beach before turning into the water, if Swimmer’s goal is to get to the ball as fast as possible. Question A What’s the optimal running distance for Swimmer?     46.75︎✘        47.5︎✘        48.75\\(\\heartsuit\\ \\)       49.75︎✘ Here’s a news story about a mathematician’s dog on the shore of Lake Michigan. It’s not plausible that Swimmer has been trained in calculus. Perhaps the way Swimmer solves the running distance problem is simply to graph time_to_ball(x) ~ x over a suitable domain and find the argmax by eye! Exercise 23.12: whfrt If you’re skeptical that a dog might do a calculus problem before running to fetch a ball, consider the path taken by a photon. “Fermat’s Principle” is that light takes the path of least time. To illustrate, consider the problem of a photon travelling from a point A to a point B, as in the diagram. The shortest path between the two points is a straight line. Along this straight-line path, the time taken by the photon will be the distance divided by the speed of light. The diagram shows another path consisting of two segments, one of length \\(l_1\\) and the other \\(l_2\\). Obviously, the two-segment path is longer than the straight-line path. But according to Fermat’s principle, light “prefers” the longer path if the time taken to traverse it is shorter. This phenomenon is called refraction. The reason the indirect path might be shorter is that the speed of light differs in different physical media. Light traveling in a vacuum famously has a speed of about 300,000 km per second. In air, the speed is smaller by a factor of 1/1.003. In water, the speed is smaller still: the factor is 1/1.3. Imagine that the blue zone of the diagram is water and the clear zone air. The time for the photon to travel from point A to B is proportional to \\(1.003\\ l_1 + 1.3\\ l_2\\). To see the path actually taken by light, let’s imagine that point A is \\((x=0, y=10)\\) and point B is \\((x=20, y=-10)\\), and that the boundary between water and air is at \\(y=0\\). We’ll place the point P at \\((x, 0)\\). The total time taken for light to traverse this path is 1.003 dist(A to P) + 1.3 dist(P to B). Question A Which of these formulas gives the total time it takes for light to traverse the path from A to P at relative speed 1/1.003 and then the path from P to B at relative speed 1/1.3? A is located at \\((0, 10)\\), B is located at \\((20,-10)\\), and P is located at \\((x, 0)\\) \\(1.003 \\sqrt{(x-0)^2 +(0-10)^2}+ 1.3\\sqrt{(20-x)^2 + (-10 - 0)^2}\\)Nice!  \\(\\sqrt{(x-0)^2 +(0-10)^2}/1.003+ \\sqrt{(20-x)^2 + (-10 - 0)^2}/1.3\\)︎✘ It’s true that you divide distance by speed to get time, but here the relative speeds are \\(1/1.003\\) and \\(1/1.3\\). \\(1.003 \\sqrt{(x-10)^2 +(0-0)^2}+ 1.3\\sqrt{(-10 -x)^2 + (50 - 0)^2}\\)︎✘ This mixes up the x and y coordinates. The distance from A to P is \\(\\sqrt{(x_P - x_A)^2 + (y_P - y_A)^2}\\). In this problem, point P is at \\((50-x, 0)\\). Implement the calculation of total_time() in R, then use a graph to find the argmin. total_time &lt;- makeFun( your_formula ~ x) slice_plot(total_time(x) ~ x, domain(x=c(0, 20))) # For the next problem dx_time &lt;- D(total_time(x) ~ x) dxx_time &lt;- D(total_time(x) ~ x &amp; x) Question B What value of \\(x\\) (that is, the argmin) minimizes the travel time of light between points A and B? (Choose the best answer)     10.52︎✘        11.02︎✘        12.22︎✘        12.50\\(\\heartsuit\\ \\)       13.21︎✘        14.94︎✘ Question C Suppose that instead of being water, the blue area was glass. The speed of light in glass is roughly 1/1.5 times as big as in vacuum. What value of \\(x\\) minimizes the travel time of light between points A and B? (Choose the best answer)     13.60\\(\\heartsuit\\ \\)       14.58︎✘        14.85︎✘        15.54︎✘ Exercise 23.14: jgtrds Turn this into a problem about algebra. Later in accumulation, figure out the mile-markers on the road. There is a tradition in mathematics education of using geometrical, distance-related problems to illustrate optimization. As it happens, some such problems can provide some valuable insight into physical situations. Suppose you have a function \\(f(x)\\) whose graph represents the path of a road through the jungle. There is a lion at coordinates \\((3, 2)\\) in the jungle. At what point as you travel along the road will you be closest to the lion. The trick here is to see that your position on the road at any value of \\(x\\) is \\((x, f(x))\\). The distance to the lion as a function of \\(x\\) is \\[ \\text{lion.dist}(x) \\equiv \\sqrt{(x - 3)^2 + (f(x)-2)^2} .\\] The road and the lion are graphed in the sandbox for the road \\(f(x) \\equiv x^2 e^{-x}\\). You can see that the road comes closest to the lion at roughly \\(x=3\\). When you implement the lion.dist\\((x)\\) function, you’ll be able to find the argmin, that is, the value of the input \\(x\\) for which the output lion_dist\\((x)\\) is minimal. The value of the function lion_dist\\((x)\\) at the argmin is the min of the function. slice_plot(x^2 * exp(-x) ~ x, domain(x=c(0,5))) %&gt;% gf_label(2 ~ 3, label=&quot;lion&quot;) %&gt;% gf_refine(coord_fixed()) To find the argmin of the distance to the lion more precisely, implement the \\(\\text{lion.dist}(x)\\) function in the sandbox. Plot this out and look for the minimum. Alternatively, find \\(\\partial_x \\text{lion.dist}(x)\\) and find the \\(x\\) of the zero crossing. Question A Using the sandbox above, find the argmin for which the graph of the function \\(g(x) \\equiv x^2 \\exp(-x)\\) comes closest to the point \\((3, 2)\\)? (Choose the best answer.)     2.03︎✘        2.07︎✘        2.21︎✘        2.27︎✘        2.28︎✘        2.33︎✘        2.37︎✘        2.39︎✘        2.43︎✘        2.48︎✘        2.58︎✘        2.71︎✘        2.80\\(\\heartsuit\\ \\)       2.94︎✘ Exercise 23.18: ph92lT Return to the problem of finding the optimal radius of a cylindrical tank with spherical ends. The point is to choose the sphere radius \\(r\\) and the cylinder length \\(h\\) that minimize the surface area of the tank while enclosing a specified volume. In terms of \\(h\\) and \\(r\\), the volume and surface area are: \\[V(r, h) = \\pi r^2 h + \\frac{4}{3} \\pi r^3 \\ \\ \\ \\text{and}\\ \\ \\ A(r,h) = 2 \\pi r h + 4 \\pi r^2\\] Question A Which of these is correct? (Hint: Only one of the answers is dimensionally consistent.) \\(h(r, V) = (V-4\\pi r^3/3)/ \\pi r^2\\)Good.  \\(h(r, V) = (V-4\\pi r^2/2)/ \\pi r^2\\)︎✘ \\(h(r, V) = (V-4\\pi r^3/3)/ \\pi r^3\\)︎✘ \\(h(r, V) = \\sqrt{(V-4\\pi r^3/2)/\\pi r^3}\\)︎✘ Question B Which of these is the correct expression for \\(A(r, V)\\) \\(A(r, V) = 2 V/r + \\frac{8 \\pi}{3} r^2\\)︎✘ \\(A(r, V) = 2 V/r + \\frac{4 \\pi}{3} r^2\\)Good.  \\(A(r, V) = V/r + \\frac{20 \\pi}{3} r^2\\)︎✘ \\(A(r, V) = V/r + 3 \\pi r^2\\)︎✘ Question C Find \\(\\partial_r A(r, V)\\) and set to zero. Solve for \\(r^\\star\\) in terms of \\(V\\). Which of these is correct? \\(r^\\star = \\sqrt[3]{\\frac{3}{4\\pi} V}\\)Excellent!  \\(r^\\star = \\sqrt[3]{\\frac{4}{3\\pi} V}\\)︎✘ \\(r^\\star = \\sqrt[3]{\\frac{3\\pi}{4} V}\\)︎✘ \\(r^\\star = \\sqrt[3]{\\frac{3}{2\\pi} V}\\)︎✘ Find the optimum value of \\(r\\) to minimize \\(A(r,V)\\) when \\(V = 1000\\) liters. Question D What is the optimal value of \\(r\\) in cm to a precision of one micron?     6.2035︎✘ Check that you were using the right units for \\(V\\).       46.0351︎✘        52.0351︎✘        62.0351\\(\\heartsuit\\ \\) Use a sandbox to plot a graph of \\(A(r, V)\\) versus r, setting \\(V = 1000\\) liters. Question E From the graph of \\(A(r, V)\\) versus \\(r\\) at \\(V=1000\\) liters, read off a range of \\(r\\) that produces \\(A\\) no worse than 1% greater than the minimum. How wide is that range, approximately?     \\(\\pm 0.1\\)cm\\(&lt;span class=&#39;mcanswer&#39;&gt;︎✘ &lt;/span&gt;&lt;/span&gt;       &lt;span class=&#39;Zchoice&#39;&gt;\\)\\(cm\\)︎✘        \\(\\pm 5\\)cm\\(&lt;span class=&#39;mcanswer&#39;&gt;\\) \\(&lt;/span&gt;&lt;/span&gt;       &lt;span class=&#39;Zchoice&#39;&gt;\\)\\(cm\\)︎✘ Another word for an “input” is “argument.” Argmax is the contraction of argument producing the maximum output.↩︎ "],["partial-change.html", "Chapter 24 Partial change 24.1 Calculus on two inputs 24.2 All other things being equal … 24.3 Gradient vector 24.4 Total derivative (optional) 24.5 Differentials 24.6 Exercises", " Chapter 24 Partial change This is a good time to point out something we have been doing all along, but which has likely been such a persistent component of your mathematics education that you may not have realized that it is a construction. 2600 We have two ways by which we represent functions: As a computational algorithm for generating the output from an input(s), typically involving arithmetic and such. As a geometrical entity, specifically the graph of a function which can be a curve or, for functions of two inputs, a surface. These two modes are sometimes intertwined, as when we use the name “line” to refer to a computational object: \\(\\line(x) \\equiv a x + b\\). Unfortunately for functions of two inputs, a surface is hard to present in the formats that are most easily at hand: a piece of paper, a printed page, a computer screen. That’s because a curved surface is naturally a 3-dimensional object, while paper and screens provide two-dimensional images. Consequently, the graphics mode we prefer for presenting functions of two variables is the contour plot, which is not a single geometrical object but a set of many objects: contours, labels, colored tiles. 2605 We’ve been doing calculus on functions of one variable because it is so easy to exploit both the computational mode and the graphical mode. And it might fairly be taken as a basic organizing theme of calculus that 2610 a line segment approximates a curve in a small region around a point. When figuring out the derivative function \\(\\partial_x f(x)\\) from a graph of \\(f(x)\\), we find the tangent to the graph at each of many input values, record the slope of the line (and throw away the intercept) and then write down the series of slopes as a function of the input, typically by representing the slope by position along the vertical axis and the corresponding input by position along the horizontal axis. Figure 24.1 shows the process. 2615 Figure 24.1: (A) The graph of a smooth function annotated with small line segments that approximate the function locally. The color of each labeled segment corresponds to the value of \\(x\\) for that segment. The slope of each segment is written numerically below the segment. (B) The labeled dots show the slope of each segment from (A). The slope is encoded using vertical position (as usual) and carries over the numerical label from (A). Connecting the dots sketches out the derivative of the function in (A). Panel (A) in Figure 24.1 shows a smooth function \\(f(x)\\) (thin black curve). To find the function \\(\\partial_x f(x)\\), we take the slope of \\(f(x)\\) at many closely spaced inputs. In Panel (A), we’ve highlighted short, tangent line segments at the closely-spaced points labeled A through V. The slope of each tangent line segment can be calculated by the usual rise-over-run method; the numerical value of the slope is written underneath the segment. To plot the derivative \\(\\partial_x f(x)\\), I have taken the slope information from (A) and plotted it as a function of \\(x\\). 2620 To restate what you already know, in the neighborhood of any input value \\(x\\), the slope of any local straight-line approximation to \\(f(x)\\) is given by the value of of \\(\\partial_x f(x)\\). 24.1 Calculus on two inputs Although we use contour plots for good practical reasons, the graph of a function \\(g(x,y)\\) with two inputs is a surface, as described in Section 6.8. The derivative of \\(g(x,y)\\) should encode the information needed to approximate the surface at any input \\((x,y)\\). In particular, we want the derivative of \\(g(x,y)\\) to tell us the orientation of the tangent plane to the surface. A tangent plane is infinite in extent. Let’s use the word facet to refer to a little patch of the tangent plane centered at the point of contact. Each facet is flat. (It’s part of a plane!) Figure 24.2 shows some facets tangent to a familiar curved surface. No two of the facets are oriented the same way. Figure 24.2: A melon as a model of a curved surface such as the graph of a function of two inputs. Each tangent facet has its own orientation. (Disregard the slight curvature of the small pieces of paper. Summer humidity has interfered with my attempt to model a flat facet with a piece of Post-It paper! Better than a picture of a summer melon, pick up a hardcover book and place it on a curved surface such as a basketball. The book cover is a flat surface: a facet. The orientation of the cover will match the orientation of the surface at the point of tangency. Change the orientation of the cover and you will find that the point of tangency will change correspondingly. 2625 If melons and basketballs are not your style, you can play the same game on an interactive graph of a function of two variables. The snapshot below is a link to an applet that shows the graph of a function as a blue surface. You can specify a point on the surface by setting the value of the (x, y) input using the sliders. Display the tangent plane (which will be green) at that point by check-marking the “Tangent plane” input. (Acknowledgments to Alfredo Sánchez Alberca who wrote the applet using the GeoGebra math visualization system.) 2630 2635 For the purposes of computation by eye, a contour graph of a surface can be easier to deal with. Figure 24.3 shows the contour graph of a smoothly varying function. Three points have been labeled A, B, and C. 2640 Figure 24.3: A function of 2 inputs with 3 specific inputs marked A, B, and C Zooming in on each of the marked points presents a simpler picture for each of them, although one that is different for each point. Each zoomed-in plot contains almost parallel, almost evenly spaced contours. If the surface had been exactly planar over the entire zoomed-in domain, the contours would be exactly parallel and exactly evenly spaced. We can approach such exact parallelness by zooming in more closely around the labeled point. 2645 Figure 24.4: Zooming in on the neighborhoods of A, B, and C in Figure 24.3 shows a simple, almost planar, local landscape. Just as the function \\(\\line(x) \\equiv a x + b\\) describes a straight line, the function \\(\\text{plane}(x, y) \\equiv a + b x + c y\\) describes a plane whose orientation is specified by the value of the parameters \\(b\\) and \\(c\\). (Parameter \\(a\\) is about the vertical location of the plane, not it’s orientation.) 2650 In Figure 24.5, the facets tangent to the original surface at A, B, and C are displayed. Comparing Figures 24.4 and 24.5 you can see that each facet has the same orientation as the surface; the contours face in the same way. 2655 Figure 24.5: The facets around the points are linear functions, each aligned with the contours near that point in Figure 24.3 Remember that the point of constructing such facets is to generalize the idea of a derivative from a function of one input \\(f(x)\\) to functions of two or more inputs such as \\(g(x,y)\\). Just as the derivative \\(\\partial_x f(x_0)\\) reflects the slope of the line tangent to the graph of \\(f(x)\\) at \\(x=x_0\\), our plan for the “derivative” of \\(g(x_0,y_0)\\) is to represent the orientation of the facet tangent to the graph of \\(g(x,y)\\) at \\((x=x_0, y=y_0)\\). The question for us now is what information is needed to specify an orientation. 2660 One clue comes from the formula for a function whose graph is a plane oriented in a particular direction: \\[\\text{plane}(x,y) \\equiv a + b x + cy\\] To explore the roles of the parameters \\(b\\) and \\(c\\) in setting the orientation of the line, open a SANDBOX. The scaffolding code generates a particular instance of \\(\\text{plane}(x,y)\\) and plots it in two ways: a contour plot and a surface plot. Change the numerical values of \\(b\\) and \\(c\\) and observe how the orientation of the planar surface changes in the graphs. You can also see that the value of \\(a\\) is irrelevant to the orientation of the plane, just as the intercept of a straight-line graph is irrelevant to the slope of that line. 2665 plane &lt;- makeFun(a + b*x + c*y ~ x + y, a = 1, b = -2.5, c = 1.6) if (knitr::is_html_output()) { interactive_plot(plane(x, y) ~ x + y, domain(x=c(-2, 2), y=c(-2, 2))) } else { knitr::include_graphics(normalizePath(&quot;www/plane-3d.png&quot;)) } contour_plot(plane(x, y) ~ x + y, domain(x=c(-2, 2), y=c(-2, 2))) %&gt;% gf_refine(coord_fixed()) As always it can be difficult to extract quantitative information from a surface plot. For the example here, you can see that the high-point on the surface is when \\(x\\) is most negative and \\(y\\) is most positive. Compare that to the contour plot to verify that that two modes are displaying the same surface. 2670 (Note: The gf_refine(coord_fixed()) part of the contour-plot command makes numerical intervals on the horizontal and vertical axes have the same length.) An instructive experience is to pick up a rigid, flat object, for instance a smartphone or hardcover book. Hold the object level with pinched fingers at the mid-point of each of the short ends, as shown in Figure 24.6 (left). 2675 Figure 24.6: Combining two simple movements can tip a plane to all sorts of different orientations. You can tip the object in one direction by raising or lowering one hand. (middle picture) And you can tip the object in the other coordinate direction by rotating the object around the line joining the points grasped by the left and right hands. (right picture) By combining these two motions, you can orient the surface of the object in a wide range of directions.39 2680 The purpose of this lesson is to show that two-numbers are sufficient to dictate the orientation of a plane. In terms of Figure 24.6 these are 1) the amount that one hand is raised relative to the other and 2) the angle of rotation around the hand-to-hand axis. 2685 Similarly, in the formula for a plane, the orientation is set by two numbers, \\(b\\) and \\(c\\) in \\(\\text{plane}(x, y) \\equiv a + b x + c y\\). How do we find the right \\(b\\) and \\(c\\) for the tangent facet to a function \\(g(x,y)\\) at a specific input \\((x_0, y_0)\\)? Taking slices of \\(g(x,y)\\) provides the answer. In particular, these two slices: \\[\\text{slice}_1(x) \\equiv g(x, y_0) = a + b\\, x + c\\, y_0 \\\\ \\text{slice}_2(y) \\equiv g(x_0, y) = a + b x_0 + c\\, y\\] Look carefully at the formulas for the slices. In \\(\\text{slice}_1(x)\\), the value of \\(y\\) is being held constant at \\(y=y_0\\). Similarly, in \\(\\text{slice}_2(y)\\) the value of \\(x\\) is held constant at \\(x=x_0\\). 2690 The parameters \\(b\\) and \\(c\\) can be read out from the derivatives of the respective slices: \\(b\\) is equal to the derivative of the slice\\(_1\\) function with respect to \\(x\\) evaluated at \\(x=x_0\\), while \\(c\\) is the derivative of the slice\\(_2\\) function with respect to \\(y\\) evaluated at \\(y=y_0\\). Or, in the more compact mathematical notation: \\[b = \\partial_x \\text{slice}_1(x)\\left.\\strut\\right|_{x=x_0} \\ \\ \\text{and}\\ \\ c=\\partial_y \\text{slice}_2(y)\\left.\\strut\\right|_{y=y_0}\\] These derivatives of slice functions are called partial derivatives. The word “partial” refers to examining just one input at a time. In the above formulas, the \\({\\large |}_{x=x_0}\\) means to evaluate the derivative at \\(x=x_0\\) and \\({\\large |}_{y=y_0}\\) means something similar. 2695 You don’t need to create the slices explicitly in order to calculate the partial derivatives. Simply differentiate \\(g(x, y)\\) with respect to \\(x\\) in order to get parameter \\(b\\) and differentiate \\(g(x, y)\\) with respect to \\(y\\) to get parameter \\(c\\). To demonstrate, we’ll make use of the sum rule: \\[\\partial_x g(x, y) = \\underbrace{\\partial_x a}_{=0} + \\underbrace{\\partial_x b x}_{=b} + \\underbrace{\\partial_x cy}_{=0} = b\\] Similarly, \\[\\partial_y g(x, y) = \\underbrace{\\partial_y a}_{=0} + \\underbrace{\\partial_y b x}_{=0} + \\underbrace{\\partial_y cy}_{=c} = c\\] Get in the habit of noticing the subscript on the differentiation symbol \\(\\partial\\). When taking, for instance, \\(\\partial_y f(x,y,z, \\ldots)\\), all variables other than \\(y\\) are to be held constant. Some examples: 2700 \\[\\partial_y 3 x^2 = 0\\ \\ \\text{but}\\ \\ \\ \\partial_x 3 x^2 = 6x\\\\ \\ \\\\ \\partial_y 2 x^2 y = 2x^2\\ \\ \\text{but}\\ \\ \\ \\partial_x 2 x^2 y = 4 x y \\] 24.2 All other things being equal … Recall that the derivative of a function of one variable, say, \\(\\partial_x f(x)\\) tells you, at each possible value of the input \\(x\\), how much the output will change proportional to a small change in the value of the input. Now that we are in the domain of multiple inputs, writing \\(h\\) to stand for “a small change” is not entirely adequate. Instead, we’ll write \\(dx\\) for a small change in the \\(x\\) input and \\(dy\\) for a small change in the \\(y\\) input. With this notation, we write the first-order polynomial approximation to a function of a single input \\(x\\) as \\[f(x+dx) = f(x) + \\partial_x f(x) \\times dx\\] Applying this notation to functions of two inputs, we have: \\[g(x + \\color{magenta}{dx}, y) = g(x,y) + \\color{magenta}{\\partial_x} g(x,y) \\times \\color{magenta}{dx}\\\\ \\text{and} \\\\ g(x, y+\\color{brown}{dy}) = g(x,y) + \\color{brown}{\\partial_y} g(x,y) \\times \\color{brown}{dy}\\] Each of these statements is about changing one input while holding the other input(s) constant. Or, as the more familiar expression goes, \"The effect of changing one input all other things being equal or all other things held constant.40 2705 Everything we’ve said about differentiation rules applies not just to functions of one input, \\(f(x)\\), but to functions with two or more inputs, \\(g(x,y)\\), \\(h(x,y,z)\\) and so on. 2710 24.3 Gradient vector For functions of two inputs, there are two partial derivatives. For functions of three inputs, there are three partial derivatives. We can, of course, collect the partial derivatives into Cartesian coordinate form. This collection is called the gradient vector. 2715 Just as our notation for differences (\\(\\cal D\\)) and derivatives (\\(\\partial\\)) involves unusual typography on the letter “D,” the notation for the gradient involves such unusual typography although this time on \\(\\Delta\\), the Greek version of “D.” For the gradient symbol, turn \\(\\Delta\\) on its head: \\(\\nabla\\). That is, \\[\\nabla g(x,y) \\equiv \\left(\\stackrel\\strut\\strut\\partial_x g(x,y), \\ \\ \\partial_y g(x,y)\\right)\\] Note that \\(\\nabla g(x,y)\\) is a function of both \\(x\\) and \\(y\\), so in general the gradient vector differs from place to place in the function’s domain. The graphics convention for drawing a gradient vector for a particular input, that is, \\(\\nabla g(x_0, y_0)\\), puts an arrow with its root at \\((x_0, y_0)\\), pointing in direction \\(\\nabla g(x_0, y_0)\\), as in Figure 24.7. 2720 Figure 24.7: The gradient vector \\(\\nabla g(x=1,y=2)\\). The vector points in the steepest uphill direction. Consequently, it is perpendicular to the contour passing through its root. A gradient field (see Figure 24.8) is the value of the gradient vector at each point in the function’s domain. Graphically, in order to prevent over-crowding, the vectors are drawn at discrete points. The lengths of the drawn vectors are set proportional to the numerical length of \\(\\nabla g(x, y)\\), so a short vector means the surface is relatively level, a long vector means the surface is relatively steep. 2725 Figure 24.8: A plot of the gradient field \\(\\nabla g(x,y)\\). 24.4 Total derivative (optional) The name “partial derivative” suggests the existence of some kind of derivative that’s not just a part, but the whole thing. The total derivative is such a whole and gratifyingly made up of it’s parts, that is, the partial derivatives. Suppose you are modeling the temperature of some volume of the atmosphere, given as \\(T(t, x, y, z)\\). This merely says that the temperature depends on both time and location, something that is familiar from everyday life. The partial derivatives have an easy interpretation: \\(\\partial_t T()\\) tells how the temperature is changing over time at a given location, perhaps because of the evaporation or condensation of water vapor. \\(\\partial_x T()\\) tells how the temperature changes in the \\(x\\) direction, and so on. The total derivative gives an overall picture of the changes in a parcel of air, which you can thnk of as a tiny balloon-like structure but without the balloon membrane. The temperature inside the “balloon” may change with time (e.g. condensation or evaporation of water), but as the ballon drifts along with the motion of the air (that is, the wind), the evolving location can change the temperature as well. Think of a balloon caught in an updraft: the temperature goes down as the balloon ascends. For an imaginary observer located in the balloon, the temperature is changing with time. Part of this change is the instrinsic change measured by \\(\\partial_t T\\) but we need to add to that the changes induces by the evolving location of the balloon. The partial change in temperature due to a change in altitude is \\(\\partial_z T\\), but it’s important to realize that the coordinates of the location are themselves functions of time: \\(x(t), y(t), z(t)\\). Seeing the function \\(T()\\) for the observer in the balloon as a function of \\(t\\), we have \\(T(t, x(t), y(t), z(t))\\). This is a function composition: \\(T()\\) composed with each of \\(x()\\), \\(y()\\), and \\(z()\\). Recall in the chain rule \\(\\partial_v f(g(v)) = \\partial_v f(g(v)) \\partial_v g(v)\\) that the derivative of the composed quantity is the product of two derivatives. Likewise, the total derivative of temperature with respect to the observer riding in the balloon will be add together the parts due to changes in time (holding position constant), x-coordinate (holding time and the other space coordinates constant), and the like. Signifying the total differentiation with a capital \\(D\\), we have \\[D\\, T(t) = \\partial_t T() + \\partial_x T() \\cdot\\partial_t x + \\partial_y T()\\cdot \\partial_t y + \\partial_z T() \\cdot\\partial_t z\\] Note that \\(\\partial_t x\\) is the velocity of the balloon in the x-direction, and similarly for the other coordinate directions. Writing these velocities as \\(v_x, v_y, v_z\\), the total derivative for temperature of a parcel of air embedded in a moving atmosphere is \\[D\\ T(t) = \\partial_t T + v_x\\, \\partial_x T + v_y\\, \\partial_y T + v_z\\, \\partial_z T\\] Formulations like this, which put the parts of change together into a whole, are often seen in the mathematics of fluid flow as applied in meteorology and oceanology. 24.5 Differentials A little bit of this, a little bit of that. — Stevie Wonder, “The Game of Love” We have framed calculus in terms of functions: transformations that take one (or more!) quantities as input and return a quantity as output. This was not the original formulation. In this section, we will use the original style in order to demonstrate how you can sometimes skip the step of constructing a function before differentiating to answer a question of the sort: “If this quantity changes by a little bit, how much will another, related quantity change?” As an example, consider the textbook-style problem of a water skier being pulled along the water by a rope pulled in from the top of a tower of height \\(H\\). The skier is distance \\(x\\) from the tower. As the rope is winched in at a constant rate, does the skier go faster or slower as she approaches the tower. In the function style of approach, we can write the position function \\(x(t)\\) with input the length of the rope \\(L(t)\\). Using the diagram, you can see that \\[x(t) = \\sqrt{\\strut L(t)^2 - H^2}\\ .\\] Differentiate both sides with respect to \\(t\\) to get the velocity of the skier: \\(\\partial_t x(t)\\) through the chain rule: \\[\\underbrace{\\partial_t x(t)}_{\\partial_t f(g(t))} = \\underbrace{\\frac{1}{2\\sqrt{\\strut L(t)^2 - H^2}}}_{\\left[ \\partial_t f \\right](g(t)) } \\times \\underbrace{\\left[2 \\partial_t L(t)\\right]}_{\\partial_t g(t)} = \\frac{\\partial_t L(t)}{\\strut\\sqrt{L(t)^2 - H^2}}\\] Now to reformulate the problem without defining a function. Newton referred to “flowing quantities” or “fluents” and to what today is universally called derivatives as “fluxions.” Newton did not have a notion of inputs and output.41 At about the same time as Newton’s inventions, very similar ideas were being given very different names by mathematicians on the European continent. There, an infinitely small change in a quantity was called a “differential” and the differential of \\(x\\) was denoted \\(dx\\). The first calculus textbook was subtitled, Of the Calculus of Differentials, in other words, how to calculate differentials. (See Figure 24.9.) Section I of this 1696 text is entitled, “Where we give the rules of this calculation,” those rules being recognizably the same as presented in Chapter 22 of this book. Figure 24.9: From the start of the first calculus textbook, by le marquis de l’Hôpital, 1696. Definition I of Section I states, \"We call quantities variable* that grow or decrease continuously; and to the contrary constant quantities are those that remain the same while the others change. … The infinitely small amount by which a continuous quantity increases or decreases is called the differential.*\" The differential is not a derivative. The differential is an infinitely small change in a quantity and a derivative is a rate of change. The differential of a quantity \\(x\\) is written \\(dx\\) in the textbook.42 The point of Section I of de l’Hôpital’s textbook is to present the rules by which the differentials of complex quantities can be calculated. You’ll recognize the product rule in de l’Hôpital’s notation: Figure 24.10: The differential of \\(x\\,y\\) is \\(y\\,dx + x\\,dy\\) The Pythagorean theorem relates the various quantities this way: \\[L^2 = x^2 + H^2\\] The differential of each side of the equation refers to “a little bit” of increase in the quantity on that side of the equation: \\[d(L^2) = d(x^2)\\ \\ \\ \\implies\\ \\ \\ 2 L\\, dL = 2 x\\, dx\\] where we’ve used one of the “rules” for calculating differentials. This gives us \\[dx = \\frac{L}{x} dL\\] Think of this as a recipe for calculating \\(dx\\). If you tell me \\(L\\), \\(x\\), and \\(dL\\) then you can calculate the value of \\(dx\\). For instance, suppose the tower is 52 feet tall and that there is \\(L=173\\) feet of tow-rope extending to the skier. The Pythagorean theorem tells us the skier is \\(x=165\\) feet from the base of the tower. The rope is, let us suppose, being pulled in at the top of the tower at \\(dL = 10\\) feet per second. How fast is \\(x\\) changing? \\[dx = \\frac{173\\ \\text{ft}}{165\\ \\text{ft}} \\times 10 \\text{ft s}^{-2} = 10.05\\ \\text{ft s}^{-1}\\] We’ll return to “a little bit of this” when we explore how to add up little bits to get the whole in Chapter 31. 24.6 Exercises Exercise 24.01: xdkw It’s relatively easy to assess partial derivatives when you know the gradient. After all, the gradient is the vector of \\((\\partial_x\\,f(x,y), \\partial_y f(x,y))\\). To train your eye, here’s a contour plot and a corresponding gradient plot. Question A What is the rule for determining \\(\\partial_x f(x,y)\\) from the direction of the gradient vector? If the vector has a component pointing right, \\(\\partial_x f\\) is positive.Right!  If the vector has a component pointing left, \\(\\partial_x f\\) is positive︎✘ If the gradient points left, then uphill is to the left. So the function is increasing from right to left. That’s a negative partial derivative. If the vector has a vertical component pointing up, \\(\\partial_x f\\) is positive.︎✘ This would be true for the partial derivative with respect to \\(y\\), but that has to relevance to the partial with respect to \\(x\\). If the vector has a component pointing downward, the partial derivative \\(\\partial_x f\\) is positive.︎✘ No, but the partial with respect to \\(y\\) would be negative. Question B What is the rule for determining \\(\\partial_y f(x,y)\\) from the direction of the gradient vector? If the vector has a component pointing right, \\(\\partial_y f\\) is positive.︎✘ Left and right are about \\(\\partial_x f\\), not \\(\\partial_y f\\). If the vector has a component pointing left, \\(\\partial_y f\\) is positive.︎✘ Left and right are about \\(\\partial_x f\\), not \\(\\partial_y f\\). If the vector has a vertical component pointing up, \\(\\partial_y f\\) is positive.Right!  If the vector has a component pointing downward, the partial derivative \\(\\partial_y f\\) is positive.︎✘ The partial with respect to \\(y\\) would be negative. Exercise 24.02: 9iowVB Open a sandbox and use the following commands to make a contour plot of the function \\(g(x)\\) centered on the reference point \\((x_0\\!=\\!0,\\, y_0\\!=\\!0)\\). g &lt;- rfun( ~ x + y, seed = 802, n = 15) x0 &lt;- 0 y0 &lt;- 0 size &lt;- 5 contour_plot(g(x, y) ~ x + y, domain(x = x0 + size*c(-1, 1), y = y0 + size*c(-1, 1))) By making size smaller, you can zoom in around the reference point. Zoom in gradually (say, size = 1.0, 0.5, 0.1, 0.05, 0.01) until you reach a point where the surface plot is (practically) a pretty simple inclined plane. From the contour plot, zoomed in so that the graph shows an inclined plane, figure out the sign of \\(\\partial_x g(0,0)\\) and \\(\\partial_y g(0,0)\\). Question A Which answer best describes the signs of the partial derivatives of \\(g(x,y)\\) at the reference point \\((x_0=0, y_0=0)\\)? \\(\\partial_x g(0,0)\\) is pos, \\(\\partial_y g(0,0)\\) is pos ︎✘ \\(\\partial_x g(0,0)\\) is pos, \\(\\partial_y g(0,0)\\) is neg ︎✘ \\(\\partial_x g(0,0)\\) is neg, \\(\\partial_y g(0,0)\\) is neg ︎✘ \\(\\partial_x g(0,0)\\) is neg, \\(\\partial_y g(0,0)\\) is pos.Good.  \\(\\partial_x g(0,0)\\) is 0, \\(\\partial_y g(0,0)\\) is pos︎✘ Exercise 24.04: qdkw Consider this close up of a function around a reference point at the center of the graph. By eye, estimate these derivatives of the function at the reference point \\((x_0=-2, y_0=-5)\\). Question A What is the numerical value of \\(\\partial_x g(x,y)\\) at the reference point?     -1︎✘        -0.50︎✘        -0.25︎✘        0︎✘        0.25︎✘        0.50\\(\\heartsuit\\ \\)       1︎✘ Question B What is the numerical value of \\(\\partial_y g(x,y)\\) at the reference point?     -1︎✘        -0.50︎✘        -0.25︎✘        0︎✘        0.25︎✘        0.50︎✘        1\\(\\heartsuit\\ \\) The next questions ask about second-order partial derivatives. As you know, the second derivative is about how the first derivative changes with x or y. Insofar as the function is a simple inclined plane, where the contours would be straight, parallel, and evenly spaced, the second derivatives would all be zero. But you can see that it is not such a plane: the contours curve a bit. In determining the second derivatives by eye from the graph, you are encouraged to compare first derivatives at the opposing edges of the graph, as opposed to at very nearby points. Question C What is the sign of \\(\\partial_{xx} g(x,y)\\) at the reference point?     negative\\(\\heartsuit\\ \\)       positive︎✘ Question D What is the sign of \\(\\partial_{yy} g(x,y)\\) at the reference point?     negative︎✘        positive\\(\\heartsuit\\ \\) Question E What is the sign of \\(\\partial_{xy} g(x,y)\\) at the reference point?     negative︎✘        positive\\(\\heartsuit\\ \\) Question F What is the sign of \\(\\partial_{yx} g(x,y)\\) at the reference point?     negative︎✘        positive\\(\\heartsuit\\ \\) Exercise 24.06: uekses At numerous occasions in your professional life, you will be in one or both of these positions: You are a decision-maker being presented with the results of analysis conducted by a team of unknown reliability, and you need to figure out whether what they are telling you is credible. You are a member of the analysis team needing to demonstrate to the decision-maker that your work should be believed. As an example, consider one of the functions presented in a comedy book, Geek Logic: 50 Foolproof Equations for Everyday Life (2006), by Garth Sundem. The particular function we’ll consider here is Dr(), intended to help answer the question, “Should you go to the doctor?” \\[\\text{Dr}(d, c, p, e, n, s) = \\frac{\\frac{s^2}{2} + e(n-e)}{100 - 3(d + \\frac{p^3}{70} - c)}\\] where \\(d\\) = How many days in the past month have you been incapacitated? \\(d_0 \\equiv 3\\) \\(c\\) = Does the issue seem to be getting better or worse. (-10 to 10 with -10 being “circling the drain” and 10 being “dramatic improvement”) \\(c_0 \\equiv -2\\) \\(p\\) = How much pain or discomfort are you currently experiencing? (1-10 with 10 being “currently holding detached toe in Ziploc bag”) \\(p_0 = 3\\) \\(e\\) = How embarrassing is this issue? (1-10 with 10 being “slipped on ice and fell on 1972 Mercedes-Benz hood ornament, which is now part of my body”) \\(e_0 = 4\\) \\(n\\) = How noticeable is the issue? (1-10 with 10 being “fell asleep on waffle iron”) \\(n_0 = 5\\) \\(s\\) = How serious does the issue seem? (1-10 with 10 being “may well have nail embedded in frontal lobe [of brain]”) \\(s_0 = 3\\) Although the function is offered tongue-in-cheek, let’s examine it to see if it even roughly matches common sense. The tool we will use relates to low-order polynomial approximation around a reference point and examining appropriate partial derivatives. To save time, we stipulate a reference point for you, noted in the description of variables above. The code creates an R implementation of the function that is set up so that the default values of the variables are those at the given reference point. You can use this in a sandbox to try different changes in each of the input quantities. Dr &lt;- makeFun( ((s^2)/2 + e*(n-e)) / (100 - 3*(d + (p^3/70) - c)) ~ d+p+e+c+n+s, s=3, n=5, e=4, p=3, d=3, c=-2) Dr() According to the instructions in the book, if Dr()\\(&gt; 1\\), you should go to the doctor. Essay 1: The value of Dr() at the reference point is 0.10, indicating that you shouldn’t go to the doctor. But we don’t yet know whether 0.10 is very close to the decision threshold of 1 or very far away. Describe a reasonable way to figure this out. Report your description and the results here. Essay 2: There are six inputs to the function. Go through the list of all six and (without thinking too hard about it) write down for all of them your intuitive sense of whether an increase of one point in that input should raise or lower the output of Dr() at the reference point. Also write down whether you think the input should be a large or small determinant of whether to go to the doctor. (You don’t need to refer to the Dr() function itself, just to your own intuitive sense of what should be the effect of each of the inputs.) The operator D() can calculate partial derivatives. You can calculate the value of a partial derivative very easily at the reference point, using an expression like this, which gives the value of the partial of Dr() with respect to input \\(s\\) at the reference point: D(Dr(s = s) ~ s)(s=3) We’re now going to use these partial derivatives to compare your intuition about going to the doctor to what the function has to say. Of course, we don’t know yet whether the function is reasonable, so don’t be disappointed if your intuition conflicts with the function. Essay 3: Calculate the numerical value of each of the partial derivatives at the reference point. List them here and say, for each one, whether it accords with your intuition. Exercise 24.07: RbuhMy Each of the figures below shows a contour plot and a gradient field. For some of the figures, the contour plot and the gradient field show the same function, for others they do not. Your task is to identify whether the contour plot and the gradient field are of the same or different functions. Question A For Figure A, do the contour plot and the gradient field show the same function?     Yes\\(\\heartsuit\\ \\)       No︎✘ Question B For Figure B, do the contour plot and the gradient field show the same function?     Yes\\(\\heartsuit\\ \\)       No︎✘ Question C For Figure C, do the contour plot and the gradient field show the same function?     Yes︎✘        No\\(\\heartsuit\\ \\) Question D For Figure D, do the contour plot and the gradient field show the same function?     Yes\\(\\heartsuit\\ \\)       No︎✘ Question E For Figure E, do the contour plot and the gradient field show the same function?     Yes︎✘        No\\(\\heartsuit\\ \\) Question F For Figure F, do the contour plot and the gradient field show the same function?     Yes\\(\\heartsuit\\ \\)       No︎✘ Exercise 24.08: lkwciw Here is a contour plot of a function \\(g(x,y)\\). You will be presented with several gradient fields. Your task is to determine whether the gradient field corresponds to the contour plot and, if not, say why not. ## Warning: Removed 19 rows containing missing values (geom_segment). Question A What’s wrong with gradient field 1? arrows point down the hill instead of up it︎✘ magnitude of arrows are wrong, but direction is rightRight!  arrows don’t point in the right direction︎✘ nothing is wrong︎✘ ## Warning: Removed 18 rows containing missing values (geom_segment). Question B What’s wrong with gradient field 2? arrows point down the hill instead of up itExcellent!  magnitude of arrows are wrong, but direction is right︎✘ arrows don’t point in the right direction︎✘ nothing is wrong︎✘ ## Warning: Removed 19 rows containing missing values (geom_segment). Question C What’s wrong with gradient field 3? arrows point down the hill instead of up it︎✘ magnitude of arrows are wrong, but direction is right︎✘ arrows don’t point in the right direction︎✘ nothing is wrongCorrect.  ## Warning: Removed 19 rows containing missing values (geom_segment). Question D What’s wrong with gradient field 4? arrows point down the hill instead of up it︎✘ magnitude of arrows are wrong, but direction is right︎✘ arrows don’t point in the right directionGood.  nothing is wrong︎✘ Exercise 24.10: wkd83 Here are contour maps and gradient fields of several functions with input \\(x\\) and \\(y\\). But any row of graphs may show two different functions. Your job is to match the contour plot with the gradient field, which may be in another row. Question A Which contour plot matches gradient field 1?     A︎✘        B︎✘        C︎✘        D︎✘        E︎✘        F\\(\\heartsuit\\ \\) Question B Which contour plot matches gradient field 2?     A\\(\\heartsuit\\ \\)       B︎✘        C︎✘        D︎✘        E︎✘        F︎✘ Question C Which contour plot matches gradient field 3?     A︎✘        B︎✘        C︎✘        D\\(\\heartsuit\\ \\)       E︎✘        F︎✘ Question D Which contour plot matches gradient field 4?     A︎✘        B︎✘        C\\(\\heartsuit\\ \\)       D︎✘        E︎✘        F︎✘ Question E Which contour plot matches gradient field 5?     A︎✘        B︎✘        C︎✘        D︎✘        E\\(\\heartsuit\\ \\)       F︎✘ Question F Which contour plot matches gradient field 6?     A︎✘        B\\(\\heartsuit\\ \\)       C︎✘        D︎✘        E︎✘        F︎✘ Exercise 24.12: tPsfoR Using the gradient field depicted below, figure out the sign of the partial derivatives at the labeled points. We’ll use “neg” to refer to negative partial derivatives, “pos” to refer to positive partial derivatives, and “zero” to refer to partials that are so small that you can’t visually distinguish them from zero. Question A Which is \\(\\partial_y f\\) at point A?     neg\\(\\heartsuit\\ \\)       zero︎✘        pos︎✘ Question B Which is \\(\\partial_x f\\) at point A?     neg︎✘        zero︎✘        pos\\(\\heartsuit\\ \\) Question C Which is \\(\\partial_x f\\) at point B?     neg︎✘        zero︎✘        pos\\(\\heartsuit\\ \\) Question D Which is \\(\\partial_x f\\) at point C?     neg︎✘        zero\\(\\heartsuit\\ \\)       pos︎✘ Question E Which is \\(\\partial_y f\\) at point E?     neg︎✘        zero︎✘        pos\\(\\heartsuit\\ \\) Question F Which is \\(\\partial_x f\\) at point E?     neg\\(\\heartsuit\\ \\)       zero︎✘        pos︎✘ Question G At which letter are both the partial with respect to \\(x\\) and the partial with respect to \\(y\\) negative.?     A︎✘        B︎✘        C︎✘        D︎✘        E︎✘        F︎✘        none of them\\(\\heartsuit\\ \\) Exercise 24.14: vkdlw For almost everyone, a house is too expensive to buy with cash, so people need to borrow money. The usual form of the loan is called a “mortgage.” Mortgages extend over many years and involve paying a fixed amount each month. That amount is calculated so that, by paying it each month for the duration of the mortgage, the last payment will completely repay the amount borrowed plus the accumulated interest. The monthly mortgage payment in dollars, \\(P\\), for a house is a function of three variables, \\[P(A, r, N)\\] where \\(A\\) is the amount borrowed in dollars, \\(r\\) is the interest rate (percentage points per year), and \\(N\\) is the number of years before the mortgage is paid off. A studio apartment is selling for $220,000. You will need to borrow $184,000 to make the purchase. Question A Suppose \\(P(184000,4,10) = 2180.16\\). What does this tell you in financial terms? The monthly cost of borrowing $184,000 for 10 years at 4% interest per year.Excellent!  The monthly cost of borrowing $184,000 for 4 years at 10% interest per year.︎✘ You’ve got the order of the argument wrong. The annual cost of the mortgage at 4% interest for 10 years.︎✘ The output of the function \\(P()\\) is the monthly mortgage payment. The annual cost of the mortgage at 10% interest for 4 years︎✘ The output of the function \\(P()\\) is the monthly mortgage payment. The next two questions involve what happens to the monthly mortgage payments if you change either the amount or duration of the mortgage. (Hint: Common sense works wonders!) Question B What would you expect about the quantity \\(\\partial P / \\partial A\\), the partial derivative of the monthly mortgage payment with respect to the amount of money borrowed? It’s positiveNice! If you borrow more money, holding mortgage duration and interest rate constant, you are going to have to pay more each month. It’s zero︎✘ It’s negative︎✘ Question C What would you expect about the quantity \\(\\partial P / \\partial N\\), the partial derivative of the monthly mortgage payment with respect to the number of years the mortgage lasts? It’s positive︎✘ It’s zero︎✘ It’s negativeNice! If you borrow the same amount of money at the same interest rate, but have more years to pay it back, your monthly payment will be smaller. Question D Suppose \\(\\partial_r P (184000,4,30) =\\) $145.65. What is the financial significance of the number $145.65?? If the interest rate \\(r\\) went up from 4 to 5, the monthly payment would increase by $145.65.︎✘ This is a perfectly reasonable answer, but … recall that the derivative gives the rate of increase in the output of the function when the input changes by a tiny amount. It turns out that a 1 percentage point increase in interest rate is a very large amount of change. If the interest rate \\(r\\) went up from 4 to 4.001, the monthly payment would increase by $145.65.︎✘ This is indeed a small change in interest rate, but the value of the derivative is the rate of increase, not the increase itself. If the interest rate \\(r\\) went up from 4 to 4.001, the monthly payment would increase by $0.001 imes $145.65.Nice! You might think that nobody would be concerned about such a small increase in interest rate. But knowing the result for each very small increase allows us to calculate what would be the impact of a large increase by a process called integration. Exercise 24.16: 72ldw In economic theory, the quantity of the demand for any good is a decreasing function of the price of that good and an increasing function of the price of a competing good. The classical example is that apple juice competes with orange juice. The demand for orange juice is in units of thousands of liters of orange juice. The price is in units of dollars per liter. Here’s a graph with the input variables unlabeled. The contour labels indicate the demand for orange juice. The concept of partial derivatives makes it much easier to think about the situation. There are two partial derivative functions relevant to the function in the graph. Well denote the input variables apple and orange, but remember that these are the prices of those commodities in dollars per liter. \\(\\partial_\\text{apple} \\text{demand}()\\) – how the demand changes when apple-juice price goes up, holding orange-juice price constant. (Another notation that is more verbose but perhaps easier to read \\(\\frac{\\partial\\, \\text{demand}}{\\partial\\,\\text{apple}}\\)) \\(\\partial_\\text{orange} \\text{demand}()\\) – how the demand changes when orange-juice price goes up, holding apple-juice price constant. (Another notation: \\(\\frac{\\partial\\, \\text{demand}}{\\partial\\,\\text{orange}}\\)) Notice that the notation names both the output and the single input which is to be changed–the other inputs will be held constant. The first paragraph of this problem gives the economic theory which amounts to saying that one of the partial derivatives is positive and the other negative. Question A What is the proper translation of the notation \\(\\partial_\\text{apple}\\text{demand}()\\)? The partial derivative of orange-juice demand with repect to apple-juice priceGood.  The partial derivative of apple-juice price with respect to demand for orange juice︎✘ Derivatives are always with respect to an input variable. Demand for orange juice is the output variable. The partial derivative of apple-juice demand with respect to price of apple juice︎✘ This problem is about orange-juice demand, not apple-juice demand. The partial derivative of orange-juice price with respect to apple-juice price.︎✘ Both of these are input variables to the demand function. A partial derivative is always about the change in output when one of the inputs changes, not the change in one input when another input changes. Question B According to the economic theory described above, one of the partial derivatives will be positive and the other negative. Which will be positive. \\(\\partial_\\text{apple} \\text{demand}()\\)Excellent!  \\(\\partial_\\text{orange} \\text{demand}()\\)︎✘ If orange juice prices went up, would you drink more orange juice? Question C What does the vertical axis measure? Price of orange juiceNice!  Quantity of apple juice︎✘ Quantity of orange juice︎✘ Price of apple juice︎✘ Question D Consider the magnitude (absolute value) of the partial derivative of demand with respect to orange-juice price. Is this magnitude greater toward the top of the graph or the bottom? topCorrect.  bottom︎✘ The horizontal distance between contour lines is larger at the bottom of the graph than at the top. Far-apart contours mean that the function is flatter. neither︎✘ Remember, we’re talking about the partial derivative with respect to orange juice price. That corresponds to the slope when moving in a horizontal direction. Exercise 24.18: oekse The contour plot of function \\(g(y, z)\\) is overlaid with vectors. The black vector is a correct representation of the gradient (at the root of the vector). The other vectors are also supposed to represent the gradient, but might have something wrong with them (or might not). You’re job is to say what’s wrong with each of those vectors. Question A What’s wrong with the red vector? nothing︎✘ too longCorrect. The red vector is located in a place where the function is almost level. You can tell this because the contour lines are spaced far apart. The magnitude of the gradient will be small in such an area. But here, the red vector is even longer than the black vector, even though black is in a very steep area (with closely spaced contours). too short︎✘ points downhill︎✘ points uphill︎✘ Pointing uphill is what gradient vectors do! No problem with this. wrong direction entirely︎✘ Question B What’s wrong with the green vector? nothing︎✘ too long︎✘ Note that the vector reflects the steepness at the point where the root of the vector is drawn. The root of the green vector is in an area where the contour lines are spaced similarly to the area near the root of the black vector. So it’s correct that the length of the green vector is similar to the length of the black vector. too short︎✘ points downhillRight! The root of the green vector is near contour=4, the head at contour=2. So the vector is incorrectly pointing downhill. Gradients point in the steepest direction uphill. points uphill︎✘ Pointing uphill is what gradient vectors do! No problem with this. wrong direction entirely︎✘ Question C What’s wrong with the blue vector? nothingNice!  too long︎✘ too short︎✘ The blue vector is in a very flat area of the function. That’s why it’s so short. points downhill︎✘ points uphill︎✘ Pointing uphill is what gradient vectors do! No problem with this. wrong direction entirely︎✘ Question D What’s wrong with the orange vector? nothing︎✘ too long︎✘ too short︎✘ points downhill︎✘ points uphill︎✘ wrong direction entirelyRight! Gradient vectors should be perpendicular to nearby contours and should point uphill. The orange vector is neither Question E What’s wrong with the gray vector? nothing︎✘ too long︎✘ too shortNice! The function is practically as steep at the root of the gray vector as it is at the root of the black vector. (You can tell this from the spacing of the contour lines.) So the magnitude of the gray vector should be just about the same as the magnitude of the black vector. points downhill︎✘ points uphill︎✘ Exercise 24.20: ZQlUv4 Let’s return to the water skier in Section 24.5. When we left her, the rope was being pulled in at 10 feet per second and her corresponding speed on the water was 10.05 feet per second. The relationship between the rope speed and the skier’s speed was \\[dx = \\frac{L}{x} dL\\] and, due to the right-angle configuration of the tow system, \\(x^2 = L^2 - H^2\\). What happens to \\(dx\\) as \\(L\\) gets smaller with \\(dL\\) being the same? We need to keep in mind that \\(dx\\) depends on three things: \\(dL\\), \\(L\\), and \\(x\\). But we can substitute in the Pythagorean relationship between \\(x\\), \\(L\\), and (fixed) \\(H\\) to get \\[dx = \\frac{L}{\\strut\\sqrt{L^2 - H^2}}\\ dL\\ .\\] This is bad news for the skier who holds on too long! As \\(L\\) approaches \\(H\\), the rope becomes more and more vertical and the skier’s water speed becomes greater and greater, approaching \\(\\infty\\) as \\(L \\rightarrow H\\). You, an engineer brought in to solve this dangerous possibility, have proposed to have the winch slow down as the rope is reeled in. How should the speed of the rope be set so that the skier’s water speed remains safely constant? Question A What formula for \\(dL\\) will allow \\(dx\\) to stay constant at a value \\(v\\)? \\(dL = dx\\)︎✘ This is possible only for one value of \\(L\\), when \\(\\sqrt{L^2 - H^2} = L\\). So this isn’t a way to keep \\(dx\\) constant. \\(dL = v \\sqrt{L^2 - H^2}{L}\\)Good. The roop speed will get slower and slower, coming to zero when \\(L = H\\) \\(dL = v \\sqrt{L^2 - H^2}\\)︎✘ If \\(dL\\) were set according to this rule, \\(dx = L\\), which isn’t going to be constant as \\(L\\) gets smaller. There is no such formula.︎✘ In describing the orientation of aircraft and ships, three parameters are used: pitch, roll, and yaw. For a geometrical plane (as opposed to an aircraft or ship, which have distinct front and back ends), yaw isn’t applicable.↩︎ The Latin phrase for this is ceteris paribus, often used in economics.↩︎ The meaning of “output” as “to produce” dates from more than 100 years after Newton’s death.↩︎ A “warning” is given in the textbook that the symbol \\(d\\) will always be used to mark the differential of a variable quantity and that \\(d\\) will never be used to indicate a parameter.↩︎ "],["local-approximations.html", "Chapter 25 Local approximations 25.1 Eight simple shapes 25.2 Low-order polynomials 25.3 The low-order polynomial with two inputs 25.4 Finding coefficients from data 25.5 Exercises", " Chapter 25 Local approximations We have focused in this book on a small set of basic modeling functions and three operations for assembling new functions out of old ones: linear combination, multiplication, and composition. All of these have a domain that is the whole number line, or the positive half of the number line, or perhaps the whole number line leaving out zero or some other isolated point. Consider such domains to be global. 2750 We also discussed the components of piecewise functions. Each component is a function defined on a limited domain, an interval \\(a \\leq x \\leq b\\). In contrast to the global domains, we’ll call the limited domains local. 2755 In this chapter, we’ll explore a simple and surprisingly powerful method to approximate any function locally, that is, over a small domain. Why would you want to approximate a function? Why not just use the function itself? It’s often the case that we know about or hypothesize about relationships only from data. We believe there is a definite functional form for the relationship, but it’s unknown and unknowable to us. Still, we can approximate even an unknown function, matching the approximation to the data that is the visible manifestation of the unknown function. Local approximations provide a general-purpose method for creating functions that can represent a wide range of relationship patterns, even ones that are not otherwise known to us. In fields such as physics or engineering, there are often theories that dictate a particular form of function. For example, Newton’s universal law of gravitation posits an inverse square law for the force of gravity as a function of distance. Mechanical engineers use power laws to describe the shape of a beam under load, and communications engineers (and others) make extensive use of sinusoids. Textbooks in those fields rightfully emphasize those particular function forms. The utility of the local approximation method is that you can move forward even in the absence of a detailed theory. You need only apply your insight to posit which quantities are related to each other and then apply the approximation methods to produce a functional form. This approach is ubiquitous in all fields. Sometimes, the local approximation becomes the theory. This is seen, for instance, in Newton’s law of cooling, in Hooke’s law relating force and extension, or the chemist’s law of mass action. 2760 The information that you have about the relationship often takes the form of a data table. Each row records one trial in which the values of the inputs have been measured and the corresponding output value recorded. We’ll discuss the methods of constructing functions to match such data in Block 5 of this course. 2765 Another common form for the information about the relationship is about derivatives. That is, you know something about the derivative of a relationship even though you don’t (yet) have a form for the function describing the relationship. As an example, think about building a model of the sustainable speed of a bicycle as a function of the gear selected and the grade of the road—up or down. 2770 Consider these three questions that any experienced bicyclist can likely answer: On a given grade of road, is there an optimal gear for the highest sustained speed? (Have in mind a particular rider, perhaps yourself.) Imagine that the grade of the road is described by a positive number for uphill and a negative number for downhill: that is, the slope of the road. For a positive (uphill) grade and at a fixed gear, will the bike’s sustained speed be higher or lower as a function of the grade?43 Assuming you answered “yes” to question (1): Does the optimal gear choice depend on the grade of the road? (In concrete terms, would you choose different gears for an uphill climb than for a level road or a downhill stretch?) 2775 Using the methods in this chapter, the answers to those three questions let you choose an appropriate form for the speed(gear, grade) function. Then, using methods in Block 5 of this text, you can make a few measurements for any given rider and construct a model customized to that rider. 2780 Note that the three questions all have to do with derivatives. An “optimal gear” is a gear at which \\(\\partial_\\text{gear} \\text{speed}(\\text{gear}, \\text{grade}) = 0\\). That you ride slower the higher the numerical value of the slope means that \\(\\partial_\\text{grade} \\text{speed}(\\text{gear}, \\text{grade}) &lt; 0\\). And we know that \\(\\partial_\\text{gear} \\text{speed}(\\text{gear}, \\text{grade})\\) depends on the grade; that’s why there’s a different optimal gear at each grade. 2785 25.1 Eight simple shapes In many modeling situations with a single input, you can get very close to a good modeling function \\(f(x)\\) by selecting one of eight simple shapes, shown in Figure 25.1. 2790 Figure 25.1: The eight simple shapes, locally, of functions with one input. (See Chapter 25.) To choose among these shapes, consider your modeling context: 2795 is the relationship positive (slopes up) or negative (slopes down) is the relationship monotonic or not is the relationship concave up, concave down, or neither Some examples, scenarios where the modeler knows about the derivative and concavity of the relationship being modeled. It’s often the case that your knowledge of the system comes in this form. 2800 The incidence of an out-of-control epidemic versus time is concave up, but shallow-then-steep. As the epidemic is brought under control, the decline is steep-then-shallow and concave up. Over the whole course of an epidemic, there is a maximum incidence. Experience shows that epidemics can have a phase where incidence reaches a local minimum: a decline as people practice social distancing followed by an increase as people become complacent. 2805 How many minutes can you run as a function of speed? Concave down and shallow-then-steep; you wear out faster if you run at high speed. How far can you walk as a function of time? Steep-then-shallow and concave down; your pace slows as you get tired. How does the stew taste as a function of saltiness. The taste improves as the amount of salt increases … up to a point. Too much salt and the stew is unpalatable. The temperature of cooling water or the emission of radioactivity as functions of time are concave up and steep-then-shallow. 2810 How much fuel is consumed by an aircraft as a function of distance? For long flights the function is concave up and shallow-then-steep; fuel use increases with distance, but the amount of fuel you have to carry also increases with distance and heavy aircraft use more fuel per mile. In micro-economic theory there are production functions that describe how much of a good is produced at any given price, and demand functions that describe how much of the good will be purchased as a function of price. 2815 As a rule, production increases with price and demand decreases with price. In the short term, production functions tend to be concave down, since it’s hard to squeeze increased production out of existing facilities. For demand in the short term, functions will be concave up when there is some group of consumers who have no other choice than to buy the product. An example is the consumption of gasoline versus price: it’s hard in the short term to find another way to get to work. In the long term, consumption functions can be concave down as consumers find alternatives to the high-priced good. For example, high prices for gasoline may, in the long term, prompt a switch to more efficient cars, hybrids, or electric vehicles. This will push demand down steeply. 2820 2825 25.2 Low-order polynomials There is a simple, familiar functional form that, by selecting parameters appropriately, can take on each of the eight simple shapes: the second-order polynomial. \\[g(x) \\equiv a + b x + c x^2\\] As you know, the graph of \\(g(x)\\) is a parabola. The parabola opens upward if \\(0 &lt; c\\). That’s the shape of a local minimum. The parabola opens downward if \\(c &lt; 0\\). That’s the shape of a local maximum Consider what happens if \\(c = 0\\). The function becomes simply \\(a + bx\\), the straight-line function. When \\(0 &lt; b\\) the line slopes upward. When \\(b &lt; 0\\) the line slopes downward. With the appropriate choice of parameters, the form \\(a + bx + cx^2\\) is capable of representing four of the eight simple shapes. What about the remaining four? This is where the idea of local becomes important. Those remaining four shapes are the sides of parabolas, as in Figure ??. 2830 ## Warning in validate_domain(domain, free_args): Missing domain names: x Figure 25.2: Four of the eight simple shapes correspond to the sides of the parabola. The labels refer to the graphs in Figure 25.1. ## Warning in validate_domain(domain, free_args): Missing domain names: x Figure 25.3: Four of the eight simple shapes correspond to the sides of the parabola. The labels refer to the graphs in Figure 25.1. 25.3 The low-order polynomial with two inputs For functions with two inputs, the low-order polynomial approximation looks like this: \\[g(x, y) \\equiv a_0 + a_x x + a_y y + a_{xy} x y + a_{yy} y^2 + a_{xx} x^2\\] In reading this form, note the system being used to name the polynomial’s coefficients. First, we’ve used \\(a\\) as the root name of all the coefficients. Sometimes we might want to compare two or more low-order polynomials, so it’s convenient to be able to use \\(a\\) for one, \\(b\\) for another, and so on. 2835 The subscripts on the coefficients describes exactly which term in the polynomial involves each coefficient. For instance, the \\(a_{yy}\\) coefficient applies to the \\(y^2\\) term, while \\(a_x\\) applies to the \\(x\\) term. 2840 Each of \\(a_0, a_x,\\) \\(a_y,\\) \\(a_{xy}, a_{yy}\\), and \\(a_{xx}\\) will, in the final model, be a constant quantity. Don’t be confused by the use of \\(x\\) or \\(y\\) in the name of the coefficients. Each coefficient is a constant and not a function of the inputs. Often, your prior knowledge of the system being modeled will tell you something about one or more of the coefficients, for example, whether it is positive or negative. Finding a precise value is often based on quantitative data about the system. 2845 It helps to have different names for the various terms. It’s not too bad to say something like, “the \\(a_{xy}\\) term.” (Pronounciation: “a sub x y” or “a x y”) But the proper names are: linear terms, quadratic terms, and interaction term. And a shout out to \\(a_0\\), the constant term. 2850 \\[g(x, y) \\equiv a_0 + \\underbrace{a_x x + a_y y}_\\text{linear terms} \\ \\ \\ + \\underbrace{a_{xy} x y}_\\text{interaction term} +\\ \\ \\ \\underbrace{a_{yy} y^2 + a_{xx} x^2}_\\text{quadratic terms}\\] ## Warning in validate_domain(domain, free_args): Using -5 to 5 in domain for ## missing domain names. ## Warning in validate_domain(domain, free_args): Missing domain names: x, y Figure 25.4: A saddle Figure 25.4: A saddle If you’re like many people, you find it harder to walk uphill than down, and find it takes more out of you to walk longer distances than shorter. Let’s build a model of this, using nothing more than your intuition and the method of low-order polynomial approximations. Let’s call the map distance walked \\(d\\). (“Map distance” is the horizontal change in position, disregarding vertical changes.) The steepness of the hill will be the “grade” \\(g\\), which is measured as the horizontal distance covered divided by the vertical climb. If you’re going downhill, the grade is negative. The key ingredient in the model: We’ll measure the “difficulty” or “exertion” to walking as the energy consumed during the walk: \\(E(d, g)\\). Some assumptions about walking and energy consumed: If you don’t walk, you consume zero energy walking. The energy consumed should be proportional to the length of the walk. This is an assumption, and is probably valid, only for walks of short to medium distances, as opposed to forced marches over tens of miles. We’ll start with the full 2nd-order polynomial in two variables, and then seek to eliminate terms that aren’t needed. \\[E_{big}(d, g) \\equiv a_0 + a_d\\, d + a_g\\, g + a_{dg}\\, d\\, g + a_{dd}\\,d^2 + a_{gg}\\,g^2\\] According to assumption (1), when \\(E(d=0, g) = 0\\). Of course, if you are walking zero distance, it doesn’t matter what the grade is; the energy consumed is still zero. Consequently, we know that all terms that don’t include a \\(d\\) should go away. This leaves us with \\[E_{medium}(d, g) \\equiv a_d\\, d + a_{dg}\\, d\\, g + a_{dd}\\,d^2 = d \\left[\\strut a_d + a_{dg}\\, g + a_{dd}\\,d\\right]\\] Assumption (2) says that energy consumed is proportional to \\(d\\). The multiplier on \\(d\\) in \\(E_{medium}()\\) is \\(\\left[\\strut a_d + a_{dg}\\, g + a_{dd}\\,d\\right]\\) which is itself a function of \\(d\\). A proportional relationship implies a multiplier that doesn’t depend on the quantity itself. This means that \\(a_{dd} = 0\\). This leaves us with a very simple model: \\[E(d, g) \\equiv \\left[\\strut a_1 + a_2\\, g\\right]\\, d\\] where we have simplified the labeling on the coefficients since there are only two in the model. Perhaps assumption (2) is mis-placed and that the energy consumed per unit distance in a walk increases with the length of the walk. If so, we would need to return to the question of \\(a_{dd}\\). This is typical of the modeling cycle. Trying to be economical with model terms highlights the question of which terms are so small they can be ignored. Example 25.1 In selecting cadets for pilot training, two criteria are the cadet’s demonstrated flying aptitude and the leadership potential of the cadet. Let’s assume that the overall merit \\(M\\) of a candidate is a function of flying aptitude \\(F\\) and leadership potential \\(L\\). Currently, the merit score is a simple function of the \\(F\\) and \\(L\\) scores: \\[M_{current}(F, L) \\equiv F + L\\] The general in charge of the training program is not satisfied with the current merit function. “I’m getting too many cadets who are great leaders but poor pilots, and too many pilot hot-shots who are not good leaders. I would rather have an good pilot who is a good leader than have a great pilot who is a poor leader or a poor pilot who is a great leader.” (You might reasonably agree or disagree with this point of view, but the general is in charge.) The general has tasked you to revise the formula to better match her views about the balance betwen flying ability and leadership potential. How should you go about constructing \\(M_{improved}(F, L)\\)? You recognize that \\(F + L\\) is a low-order polynomial: just the linear terms are present without a constant or interaction term or quadratic terms. Low-order polynomials are a good way to approximate any formula locally, so you have decided to follow that route. Quadratic terms are appropriate when a model needs to feature a locally optimal level of the of the inputs. But it will never be the case that a lower flying score will be more favored than a higher score, and the same thing for the leadership score. So your model doesn’t need quadratic terms. That leaves the interaction term as the way forward. The low-order polynomial model will be \\[M_{improved}(F, L) \\equiv d_0 + F + L + d_{FL} FL\\] Should \\(d_{FL}\\) be positive or negative? Imagine a cadet Drew with acceptable and equal F and L scores. Another cadet, Blake, has scores that are \\(F+\\epsilon\\) and \\(L-\\epsilon\\), where \\(\\epsilon\\) might be positive or negative. Under the original formula for merit, Drew and Blake have equal merit. Under the new criteria, Drew should have a higher merit than Blake. In other words: \\[M_{improved}(F, L) - M_{improved}(F+\\epsilon, L-\\epsilon) &gt; 0\\] Replace \\(M_{improved}(F, L)\\) with the low-order polynomial approximation given earlier. \\[\\underbrace{d_0 + F + L + d_{FL} FL}_{M_{improved}(F, L)} - \\underbrace{\\left[{\\large\\strut} d_0 + \\left[ F + \\epsilon\\right] + \\left[ L - \\epsilon\\right] + d_{FL} (FL -\\epsilon L + \\epsilon F - \\epsilon^2)\\right]}_{M_{improved}(F+\\epsilon, L-\\epsilon)} &gt; 0\\] Collecting and cancelling terms in the above gives \\[- d_{FL}(\\epsilon(F-L) + \\epsilon^2) &gt; 0\\] Since \\(F\\) and \\(L\\) were assumed equal, this results in \\[M_{improved}(F, L) - M_{improved}(F+\\epsilon, L-\\epsilon) = d_{FL}\\, \\epsilon^2 &gt; 0\\] Thus, \\(d_{FL}\\) will have to be positive. 25.4 Finding coefficients from data Low-order polynomials are often used for constructing functions from data. In this section, I’ll demonstrate briefly how this can be done. The full theory will be introduced in Block 5 of this text. The data I’ll use for the demonstration is a set of physical measurements of height, weight, abdominal circumference, etc. on 252 human subjects. These are contained in the Body_fat data frame, shown below. One of the variables records the body-fat percentage, that is, the fraction of the body’s mass that is fat. This is thought to be an indicator of fitness and health, but it is extremely hard to measure and involves weighing the person when they are fully submerged in water. This difficulty motivates the development of a method to approximation body-fat percentage from other, easier to make measurements such as height, weight, and so on. For the purpose of this demonstration, we’ll build a local polynomial model of body-fat percentage as a function of height (in inches) and weight (in pounds). The polynomial we choose will omit the quadratic terms. It will contain the constant, linear, and interaction terms only. That is \\[\\text{body.fat}(h, w) \\equiv c_0 + c_h h + c_w w + c_{hw} h w\\] The process of finding the best coefficients in the polynomial is called linear regression. Without going into the details, we’ll use linear regression to build the body-fat model and then display the model function as a contour plot. mod &lt;- lm(bodyfat ~ height + weight + height*weight, data = math141Z::Body_fat) body_fat_fun &lt;- makeFun(mod) contour_plot(body_fat_fun(height, weight) ~ height + weight, domain(weight=c(100, 250), height = c(60, 80))) %&gt;% gf_labs(title = &quot;Body fat percentage&quot;) Figure 25.5: A low order polynomial model of body fat percentage as a function of height (inches) and weight (lbs). That we can build such a model doesn’t mean that it’s useful for anything. In Block 5 of the text we’ll return to the question of how well a model constructed from data represents the real-world relationships that the model attempts to describe. 25.5 Exercises Exercise 25.02: ckslw Consider the model presented in Section 25.3 about energy expenditure walking distance \\(d\\) on a grade \\(g\\): \\[E(d,g) = (a_0 + a_1 g)d\\] where \\(d\\) is the (horizontal equivalent) of the distance walked and \\(g\\) is the grade of the slope (that is, rise over run). We want \\(E\\) to be measured in Joules which has dimension M L\\(^2\\) T\\(^{-2}\\). Of course, the dimension of \\(d\\) is L, that is \\([d] = \\text{L}\\). Question A What is the dimension of the parameter \\(a_0\\)?     dimensionless︎✘        \\(L/T^2\\)︎✘        \\(T/L^2\\)︎✘        \\(M/T^2\\)︎✘        \\(M L/T^2\\)\\(\\heartsuit\\ \\)       \\(M/L^2\\)︎✘        \\(M/(L^2 T^2)\\)︎✘        \\(M L^2 / T^2\\)︎✘ Question B What is the dimension of \\(g\\)? (Hint: \\(g\\) is the ratio of vertical to horizontal distance covered.)     dimensionless\\(\\heartsuit\\ \\)       \\(L/T^2\\)︎✘        \\(T/L^2\\)︎✘        \\(M/T^2\\)︎✘        \\(M L/T^2\\)︎✘        \\(M/L^2\\)︎✘        \\(M/(L^2 T^2)\\)︎✘        \\(M L^2 / T^2\\)︎✘ Question C What is the dimension of the parameter \\(a_1\\)?     dimensionless︎✘        \\(L/T^2\\)︎✘        \\(T/L^2\\)︎✘        \\(M/T^2\\)︎✘        \\(M L/T^2\\)\\(\\heartsuit\\ \\)       \\(M/L^2\\)︎✘        \\(M/(L^2 T^2)\\)︎✘        \\(M L^2 / T^2\\)︎✘ Exercise 25.04: ikdlx Suppose we describe the spread of an infection in terms of three variables: \\(N\\) infection rate with respect to time: the number of new infections per day \\(I\\) the current number of people who are infectious, that is, currently capable of spreading the infection \\(S\\) the number of people who are susceptible, that is, currently capable of becoming infectious if exposed to the infection. All three of these variables are functions of time. News reports in 2020 routinely such as the one below gave the graph of \\(N\\) versus time for Covid-19. On November 15, 2020, \\(N\\) was 135,187 people per day. (This is the number of positive tests. The true value of \\(N\\) was, based on later information, 5-10 times greater.) The news reports don’t usually report \\(S\\) on a day-by-day basis. But a basic strategy in modeling with calculus is to take a snapshot: Given \\(I\\) and \\(S\\) today, what is a model of \\(N\\) for today. (Next semester, we’ll study “differential equations,” which provide a way of assembling from the snapshot model what the time course of the pandemic will look like.) The low-order polynomial for \\(N(S, I)\\) is \\[N(S,I) = a_0 + a_1 S + a_2 I + a_{12} I S.\\] We don’t include quadratic terms because there is no local maximum in \\(N(S, I)\\)—common sense suggests that \\(\\partial_S N() \\geq 0\\) and \\(\\partial_I N() \\geq 0\\), whereas a local maximum requires at least one of these derivatives to be negative near the max. Your job is to figure out which, if any, terms can be safely deleted from the low-order polynomial. A good way to approach this is to figure out, using common sense, what \\(N\\) would be for either \\(S=0\\) or \\(I=0\\). (Note that the previous is not restricted to \\(S = I = 0\\). Only one of them needs to be zero to produce the relevant result.) Question A We know that if \\(I=0\\) there will be no new infections, regardless of how large \\(S\\) is. We also know that if \\(S=0\\), there will be no new infections no matter how many people are currently infective. Which of these low-order polynomials correctly represents these two facts? (Assume that all the coefficients in the various polynomials are non-zero.) \\(N(S,I) = a_0 + a_1 S + a_2 I + a_{12} I S\\)︎✘ We don’t need all four terms. Think about it! \\(N(S,I) = a_0 + a_1 S + a_2 I\\)︎✘ When both \\(S\\) and \\(I\\) are zero, \\(N\\) would be non-zero. \\(N(S,I) = a_1 S + a_2 I + a_{12} I S\\)︎✘ \\(N(S,I) = a_2 I + a_{12} I S\\)︎✘ \\(N(S,I) = a_1 S + a_{12} I S\\)︎✘ \\(N(S,I) = a_{12} I S\\)Nice!  \\(N(S,I) = a_1 S + a_2 I\\)︎✘ It’s much the same for downhill biking, but you have to keep in mind that a shallow downhill has a higher numerical slope than a steep downhill. That is, the derivative of the hill is near zero for a very shallow grade and far from zero (that is, more negative) for a steep downhill grade.↩︎ "],["polynomials.html", "Chapter 26 Polynomials 26.1 Basics of polynomials with one input 26.2 Multiple inputs? 26.3 High-order approximations 26.4 Indeterminate forms 26.5 Computing with indeterminate forms 26.6 Exercises", " Chapter 26 Polynomials A big part of the high-school algebra curriculum is about polynomials. In some ways, this is appropriate since polynomials played an outsized part in the historical development of mathematical theory. Indeed, the so-called “Fundamental theorem of algebra” is about polynomials.44 For modelers, polynomials are a mixed bag. They are very widely used in modeling. Sometimes this is entirely appropriate, for instance the low-order polynomials that are the subject of Chapter 25. The problems come when high-order polynomials are selected for modeling purposes. Building a reliable model with high-order polynomials requires a deep knowledge of mathematics, and introduces serious potential pitfalls. Modern professional modelers learn the alternatives to high-order polynomials, but newcomers often draw on their experience in high-school and give unwarranted credence to polynomials. This chapter attempts to guide you to the ways you are likely to see polynomials in your future work and to help you avoid them when better alternatives are available. 26.1 Basics of polynomials with one input A polynomial is a linear combination of a particular class of functions: power-law functions with non-negative, integer exponents: 1, 2, 3, …. The individual functions are called monomials, a word that echoes the construction of chemical polymers out of monomers; for instance, the material polyester is constructed by chaining together a basic chemical unit called an ester. In one variable, say \\(x\\), the monomials are \\(x^1, x^2, x^3\\), and so on. (There’s also \\(x^0\\), but that’s better thought of as the constant function.) An n-th order polynomial has monomials up to exponent \\(n\\). For example, the form of a third-order polynomial is \\[a_0 + a_1 x^1 + a_2 x^2 + a_3 x^3\\] The domain of polynomials, like the power-law functions they are assembled from, is the real numbers, that is, the entire number line \\(-\\infty &lt; x &lt; \\infty\\). But for the purposes of understanding the shape of high-order polynomials, it’s helpful to divide the domain into three parts: a wriggly domain at the center and two tail domains to the right and left of the center. Figure 26.1: A \\(n\\)th-order polynomial can have up to \\(n-1\\) critical points that it wriggles among. A 7-th order polynomial is shown here in which there are six local maxima or minima alternatingly. Figure 26.1 shows a 7th order polynomial—that is, the highest-order term is \\(x^7\\). In one of the tail domains the function value heads off to \\(\\infty\\), in the other to \\(-\\infty\\). This is a necessary feature of all odd-order polynomials: 1, 3, 5, 7, … In contrast, for even-order polynomials (2, 4, 6, …) the function value in the two tail domains go in the same direction, either both to \\(\\infty\\) (Hands up!) or both to \\(-\\infty\\). In the wriggly domain in Figure 26.1, there are six argmins or argmaxes. An \\(n\\)th-order polynomial can have up to \\(n-1\\) extrema. Note that the local polynomial approximations in Chapter 25 are at most 2nd order and so there is at most 1 wriggle: a unique argmax. If the approximation does not include the quadratic terms (\\(x^2\\) or \\(y^2\\)) then there is no argmax for the function. 26.2 Multiple inputs? High-order polynomials are rarely used with multiple inputs. One reason is the proliferation of coefficients. For instance, here is the third-order polynomial in two inputs, \\(x\\), and \\(y\\). \\[\\underbrace{b_0 + b_x x + b_y y}_\\text{first-order terms} + \\underbrace{b_{xy} x y + b_{xx} x^2 + b_{yy} y^2}_\\text{second-order terms} + \\underbrace{b_{xxy} x^2 y + b_{xyy} x y^2 + b_{xxx} x^3 + b_{yyy} y^3}_\\text{third-order terms}\\] This has 10 coefficients. With so many coefficients it’s hard to ascribe meaning to any of them individually. And, insofar as some feature of the function does carry meaning in terms of the modeling situation, that meaning is spread out and hard to quantify. 26.3 High-order approximations The potential attraction of high-order polynomials is that, with their wriggly interior, they can take on a large number of appearances. This chameleon-like behavior has historically made them the tool of choice for understanding the behavior of approximations. That theory has motivated the use of polynomials for modeling patterns in data, but, paradoxically, has shown that high-order polynomials should not be the tool of choice for modeling data.&amp;[The mathematical background needed for those better tools won’t be available to us until Block 5, when we explore linear algebra.] Polynomial functions lend themselves well to calculations, since the output from a polynomial function can be calculated using just the basic arithmetic functions: addition, subtraction, multiplication, and division. To illustrate, consider this polynomial: \\[g(x) \\equiv x - \\frac{1}{6} x^3\\] Since the highest-order term is \\(x^3\\) this is a third-order polynomial. (As you’ll see, we picked these particular coefficients, 0, 1, 0, -1/6, for a reason.) With such simple coefficients the polynomial is easy to handle by mental arithmetic. For instance, for \\(g(x=1)\\) is \\(5/6\\). Similarly, \\(g(x=1/2) = 23/48\\) and \\(g(x=2) = 2/3\\). A person of today’s generation would use an electronic calculator for more complicated inputs, but the mathematicians of Newton’s time were accomplished human calculators. It would have been well within their capabilities to calculate, using paper and pencil, \\(g(\\pi/4) = 0.7046527\\).45 Our example polynomial, \\(g(x) \\equiv x - \\frac{1}{6}x^3\\), graphed in color in Figure 26.2, doesn’t look exactly like the sinusoid. If we increased the extent of the graphics domain, the disagreement would be even more striking, since the sinusoid’s output is always in \\(-1 \\leq \\sin(x) \\leq 1\\), while the polynomial’s tails are heading off to \\(\\infty\\) and \\(-\\infty\\). But, for a small interval around \\(x=0\\), exactly aligns with the sinusoid. Figure 26.2: The polynomial \\(g(x) \\equiv x -x^3 / 6\\) is remarkably similar to \\(\\sin(x)\\) near \\(x=0\\). It’s clear from the graph that the approximation is excellent near \\(x=0\\) and gets worse as \\(x\\) gets larger. The approximation is poor for \\(x \\approx \\pm 2\\). We know enough about polynomials to say that the approximation will not get better for larger \\(x\\); the sine function has a range of \\(-1\\) to \\(1\\), while the left and right tails of the polynomial are heading off to \\(\\infty\\) and \\(-\\infty\\) respectively. One way to measure the quality of the approximation is the error \\({\\cal E}(x)\\) which gives, as a function of \\(x\\), the difference between the actual sinusoid and the approximation: \\[{\\cal E}(x) \\equiv |\\strut\\sin(x) - g(x)|\\] The absolute value used in defining the error reflects our interest in how far the approximation is from the actual function and not so much in whether the approximation is below or above the actual function. Figure 26.3 shows \\({\\cal E}(x)\\) as a function of \\(x\\). Since the error is the same on both sides of \\(x=0\\), only the positive \\(x\\) domain is shown. Figure 26.3: The error \\({\\cal E}(x)\\) of \\(x - x^3/6\\) as an approximation to \\(\\sin(x)\\). Top panel: linear scale. Bottom panel: on a log-log scale. Figure 26.3 shows that for \\(x &lt; 0.3\\), the error in the polynomial approximation to \\(\\sin(x)\\) is in the 5th decimal place. For instance, \\(\\sin(0.3) = 0.2955202\\) while \\(g(0.3) = 0.2955000\\). That the graph of \\({\\cal E}(x)\\) is a straight-line on log-log scales diagnoses \\({\\cal E}(x)\\) as a power law. That is: \\({\\cal E}(x) = A x^p\\). As always for power-law functions, we can estimate the exponent \\(p\\) from the slope of the graph. It’s easy to see that the slope is positive, so \\(p\\) must also be positive. The inevitable consequence of \\({\\cal E}(x)\\) being a power-law function with positive \\(p\\) is that \\(\\lim_{x\\rightarrow 0} {\\cal E}(x) = 0\\). That is, the polynomial approximation \\(x - \\frac{1}{6}x^3\\) is exact as \\(x \\rightarrow 0\\). Throughout this book, we’ve been using straight-line approximations to functions around an input \\(x_0\\). \\[g(x) = f(x_0) + \\partial_x f(x_0) [x-x_0]\\] One way to look at \\(g(x)\\) is as a straight-line function. Another way is as a first-order polynomial. This raises the question of what a second-order polynomial approximation should be. Rather than the polynomial matching just the slope of \\(f(x)\\) at \\(x_0\\), we can arrange things so that the second-order polynomial will also match the curvature of the \\(f()\\). Since the curvature involves only the first and second derivatives of a function, the polynomial constructed to match both the first and the second derivative will necessarily match the slope and curvature of \\(f()\\). This can be accomplished by setting the polynomial coefficients appropriately. Start with a general, second-order polynomial centered around \\(x_0\\): \\[g(x) \\equiv a_0 + a_1 [x-x_0] + a_2 [x - x_0]^2\\] The first- and second-derivatives, evaluated at \\(x=x_0\\) are: \\[\\partial_x g(x)\\left.{\\Large\\strut}\\right|_{x=x_0} = a_1 + 2 a_2 [x - x_0] \\left.{\\Large\\strut}\\right|_{x=x_0} = a_1\\] \\[\\partial_{xx} g(x)\\left.{\\Large\\strut}\\right|_{x=x_0} = 2 a_2\\] Notice the 2 in the above expression. When we want to write the coefficient \\(a_2\\) in terms of the second derivative of \\(g()\\), we’ll end up with \\[a_2 = \\frac{1}{2} \\partial_{xx} g(x)\\left.{\\Large\\strut}\\right|_{x=x_0}\\] To make \\(g(x)\\) approximate \\(f(x)\\) at \\(x=x_0\\), we need merely set \\[a_1 = \\partial_x f(x)\\left.{\\Large\\strut}\\right|_{x=x_0}\\] and \\[a_2 = \\frac{1}{2} \\partial_{xx} f(x) \\left.{\\Large\\strut}\\right|_{x=x_0}\\] This logic can also be applied to higher-order polynomials. For instance, to match the third derivative of \\(f(x)\\) at \\(x_0\\), set \\[a_3 = \\frac{1}{6} \\partial_{xxx} f(x) \\left.{\\Large\\strut}\\right|_{x=x_0}\\] Remarkably, each coefficient in the approximating polynomial involves only the corresponding order of derivative. \\(a_1\\) involves only \\(\\partial_x f(x) \\left.{\\Large\\strut}\\right|_{x=x_0}\\); the \\(a_2\\) coefficient involves only \\(\\partial_{xx} f(x) \\left.{\\Large\\strut}\\right|_{x=x_0}\\); the \\(a_3\\) coefficient involves only \\(\\partial_{xx} f(x) \\left.{\\Large\\strut}\\right|_{x=x_0}\\), and so on. Now we can explain where the polynomial that started this section, \\(x - \\frac{1}{6} x^3\\) came from and why those coefficients make the polynmomial approximate the sinusoid near \\(x=0\\). Order \\(\\sin(x)\\) derivative \\(x - \\frac{1}{6}x^3\\) derivative 0 \\(\\sin(x) \\left.{\\Large\\strut}\\right|_{x=0} = 0\\) \\(\\left( 1 - \\frac{1}{6}x^3\\right)\\left.{\\Large\\strut}\\right|_{x=0} = 0\\) 1 \\(\\cos(x) \\left.{\\Large\\strut}\\right|_{x=0} = 1\\) \\(\\left(1 - \\frac{3}{6} x^2\\right) \\left.{\\Large\\strut}\\right|_{x=0}= 1\\) 2 \\(-\\sin(x) \\left.{\\Large\\strut}\\right|_{x=0} = 0\\) \\(\\left(- \\frac{6}{6} x\\right) \\left.{\\Large\\strut}\\right|_{x=0} = 0\\) 3 \\(-\\cos(x) \\left.{\\Large\\strut}\\right|_{x=0} = -1\\) \\(- 1\\left.{\\Large\\strut}\\right|_{x=0} = -1\\) 4 \\(\\sin(x) \\left.{\\Large\\strut}\\right|_{x=0} = 0\\) \\(0\\left.{\\Large\\strut}\\right|_{x=0} = 0\\) The first four derivatives of \\(x - \\frac{1}{6} x^3\\) exactly match, at \\(x=0\\), the first four derivatives of \\(\\sin(x)\\). The polynomial constructed by matching successive derivatives of a function \\(f(x)\\) at some input \\(x_0\\) is called a Taylor polynomial. Let’s construct a 3rd-order Taylor polynomial approximation to \\(f(x) = e^x\\) around \\(x=0\\). We know it will be a 3rd order polynomial: \\[g_{\\exp}(x) \\equiv a_0 + a_1 x + a_2 x^2 + a_3 x^3\\] The exponential function is particularly nice for examples because the function value and all it’s derivatives are identical: \\(e^x\\). So \\[f(x= 0) = 1\\] \\[ \\partial_x f(x=0) = 1\\] \\[\\partial_{xx} f(x=0) = 1\\] \\[\\partial_{xxx} f(x=0) = 1\\] and so on. The function value and derivatives of \\(g_{\\exp}(x)\\) at \\(x=0\\) are: \\[g_{\\exp}(x=0) = a_0\\] \\[\\partial_{x}g_{\\exp}(x=0) = a_1\\] \\[\\partial_{xx}g_{\\exp}(x=0) = 2 a_2\\] \\[\\partial_{xxx}g_{\\exp}(x=0) = 2\\cdot3\\cdot a_3 = 6\\, a_3\\] Matching these to the exponential evaluated at \\(x=0\\), we get \\[a_0 = 1\\] \\[a_1 = 1\\] \\[a_2 = \\frac{1}{2}\\] \\[a_3 = \\frac{1}{2 \\cdot 3} = \\frac{1}{6}\\] Result: the 3rd-order Taylor polynomial approximation to the exponential at \\(x=0\\) is \\[g_{\\exp}(x) = 1 + x + \\frac{1}{2} x^2 + \\frac{1}{2\\cdot 3} x^3 +\\frac{1}{2\\cdot 3\\cdot 4} x^4\\] Figure 26.4 shows the exponential function \\(e^x\\) and its 3th-order Taylor polynomial approximation near \\(x=0\\): Figure 26.4: The 3th-order Taylor polynomial approximation to \\(e^x\\) arount \\(x=0\\) The polynomial is exact at \\(x=0\\). The error \\({\\cal E}(x)\\) grows with increasing distance from \\(x=0\\): Figure 26.5: The error from a 3rd-order Taylor polynomial approximation to \\(e^x\\) around \\(x=0\\) is a power-law function with exponent \\(4\\). The plot of \\(\\log_{10} {\\cal E}(x)\\) versus \\(\\log_{10} | x |\\) in Figure 26.5 shows that the error grows from zero at \\(x=0\\) as a power-law function. Measuring the exponent of the power-law from the slope of the graph on log-log axes give \\({\\cal E}(x) = a |x-x_0|^5\\). This is typical of Taylor polynomials: for a polynomial of degree \\(n\\), the error will grow as a power-law with exponent \\(n+1\\). This means that the higher is \\(n\\), the faster \\(\\lim_{x\\rightarrow x_0}{\\cal E}(x) \\rightarrow 0\\). On the other hand, since \\({\\cal E}_x\\) is a power law function, as \\(x\\) gets further from \\(x_0\\) the error grows as \\(\\left(x-x_0\\right)^{n+1}\\). Brooke Taylor (1685-1731), a near contemporary of Newton, published his work on approximating polynomials in 1715. Wikipedia reports: “[T]he importance of [this] remained unrecognized until 1772, when Joseph-Louis Lagrange realized its usefulness and termed it ‘the main [theoretical] foundation of differential calculus.’”Source Figure 26.6: Brook Taylor Due to the importance of Taylor polynomials in the development of calculus, and their prominence in many calculus textbooks, many students assume their use extends to constructing models from data. They also assume that third- and higher-order monomials are a good basis for modeling data. Both these assumptions are wrong. Least squares is the proper foundation for working with data. Taylor’s work preceded by about a century the development of techniques for working with data. One of the pioneers in these new techniques was Carl Friedrich Gauss (1777-1855), after whom the gaussian function is named. Gauss’s techniques are the foundation of an incredibly important statistical method that is ubiquitous today: least squares. Least squares provides an entirely different way to find the coefficients on approximating polynomials (and an infinite variety of other function forms). The R/mosaic fitModel() function for polishing parameter estimates is based on least squares. In Block 5, we’ll explore least squares and the mathematics underlying the calculations of least-squares estimates of parameters. 26.4 Indeterminate forms Let’s return to an issue that has bedeviled calculus students since Newton’s time. The example we’ll use is the function \\[\\text{sinc}(x) \\equiv \\frac{\\sin(x)}{x}\\] The sinc() function (pronounced “sink”) is still important today, in part because of its role in converting discrete-time measurements (as in an mp3 recording of sound) into continuous signals. What is the value of \\(\\text{sinc}(0)\\)? One answer, favored by arithmetic teachers is that \\(\\text{sinc}(0)\\) is meaningless, because it involves division by zero. On the other hand, \\(\\sin(0) = 0\\) as well, so the sinc function evaluated at zero involves 0/0. This quotient is called an indeterminant form. The logic is this: Suppose we assume that \\(0/0 = b\\) for some number \\(b\\). then \\(0 = 0 \\times b = 0\\). So any value of \\(b\\) would do; the value of \\(0/0\\) is “indeterminant.” Still another answer is suggested by plotting out sinc(\\(x\\)) near \\(x=0\\) and reading the value off the graph: sinc(0) = 1. slice_plot(sin(x) / x ~ x, domain(x=c(-10,10)), npts=500) Figure 26.7: To judge from this plot, sin(0) = 1. The graph of sinc() looks smooth and the shape makes sense. Even if we zoom in very close to \\(x=0\\), the graph continues to look smooth. We call such functions well behaved. Compare the well-behaved sinc() to a very closely related function (which doesn’t seem to be so important in applied work): \\(\\frac{\\sin(x)}{x^3}\\). Both \\(\\sin(x)/x\\) and \\(\\sin(x) / x^3\\), evaluated at \\(x=0\\) involve a divide by zero. Both are indeterminate forms 0/0 at \\(x=0\\). But the graph of \\(\\sin(x) / x^3\\) (see Figure ??) is not we’ll behaved. \\(\\sin(x) / x^3\\) does not have any particular value at \\(x=0\\); instead, it has an asymptote. slice_plot(sin(x) / x ~ x, domain(x=c(-0.1, 0.1)), npts=500) %&gt;% gf_refine(scale_y_log10()) Figure 26.8: Zooming in around the division by zero. Left: The graph of \\(\\sin(x)/x\\) versus \\(x\\). Right: The graph of \\(\\sin(x)/x^2\\). The vertical scales on the two graphs are utterly different. slice_plot(sin(x) / x^3 ~ x, domain(x=c(-0.1, 0.1)), npts=500) %&gt;% gf_refine(scale_y_log10()) Figure 26.9: Zooming in around the division by zero. Left: The graph of \\(\\sin(x)/x\\) versus \\(x\\). Right: The graph of \\(\\sin(x)/x^2\\). The vertical scales on the two graphs are utterly different. Since both \\(\\sin(x)/x\\left.{\\Large\\strut}\\right|_{x=0}\\) and \\(\\sin(x)/x^3\\left. {\\Large\\strut}\\right|_{x=0}\\) involve a divide-by-zero, the answer to the utterly different behavior of the two functions is not to be found at zero. Instead, it’s to be found near zero. For any non-zero value of \\(x\\), the arithmetic to evaluate the functions is straight-forward. Note that \\(\\sin(x) / x^3\\) starts its mis-behavior away from zero. The slope of \\(\\sin(x) / x^3\\) is very large near \\(x=0\\), while the slope of \\(\\sin(x) / x\\) smoothly approaches zero. Since we’re interested in behavior near \\(x=0\\), a useful technique is to approximate the numerator and denominator of both functions by polynomial approximations. \\(\\sin(x) \\approx x - \\frac{1}{6} x^3\\) near \\(x=0\\) \\(x\\) is already a polynomial. \\(x^3\\) is already a polynomial. Remember, these approximations are exact as \\(x\\) goes to zero. So sufficiently close to zero, \\[\\frac{\\sin(x)}{x} = \\frac{x - \\frac{1}{6} x^3}{x} = 1 + \\frac{1}{6} x^2\\] Even at \\(x=0\\), there’s nothing indeterminant about \\(1 + x^2/6\\); it’s simply 1. Compare this to the polynomial approximation to \\(\\sin(x) / x^3\\): \\[\\frac{\\sin(x)}{x^3} = \\frac{x - \\frac{1}{6} x^3}{x^3} = \\frac{1}{x^2} - \\frac{1}{6}\\] Evaluating this at \\(x=0\\) involves division by zero. No wonder it’s badly behaved. The procedure for checking whether a function involving division by zero behaves well or poorly is described in the first-ever calculus textbook, published in 1697. The title (in English) is: The analysis into the infinitely small for the understanding of curved lines. In honor of the author, the Marquis de l’Hospital, the procedure is called l’Hopital’s rule.46 Conventionally, the relationship is written \\[\\lim_{x\\rightarrow x_0} \\frac{u(x)}{v(x)} = \\lim_{x\\rightarrow x_0} \\frac{\\partial_x u(x)}{\\partial_x v(x)}\\] Let’s try this out with our two example functions around \\(x=0\\): \\[\\lim_{x\\rightarrow 0} \\frac{\\sin(x)}{x} = \\frac{\\lim_{x\\rightarrow 0} \\cos(x)}{\\lim_{x \\rightarrow 0} 1} = \\frac{1}{1} = 1\\] \\[\\lim_{x\\rightarrow 0} \\frac{\\sin(x)}{x^3} = \\frac{\\lim_{x\\rightarrow 0} \\cos(x)}{\\lim_{x \\rightarrow 0} 3x^2} = \\frac{1}{0} \\ \\ \\text{indeterminate}!\\] 26.5 Computing with indeterminate forms In the early days of electronic computers, division by zero would cause a fault in the computer, often signaled by stopping the calculation and printing an error message to some display. This was inconvenient, since programmers did not always forsee division-by-zero situations and avoid them. As you’ve seen, modern computers have adopted a convention that simplifies programming considerably. Instead of stopping the calculation, the computer just carries on normally, but produces as a result one of two indeterminant forms: Inf and NaN. Inf is the output for the simple case of dividing zero into a non-zero number, for instance: 17/0 ## [1] Inf NaN, standing for “not a number,” is the output for more challenging cases: dividing zero into zero, or multiplying Inf by zero, or dividing Inf by Inf. 0/0 ## [1] NaN 0 * Inf ## [1] NaN Inf / Inf ## [1] NaN The brilliance of the idea is that any calculation that involves NaN will return a value of NaN. This might seem to get us nowhere. But most programs are built out of other programs, usually written by other people interested in other applications. You can use those programs (mostly) without worrying about the implications of a divide by zero. If it’s important to respond in some particularly way, you can always check the result for being NaN in your own programs. (Much the same is true for Inf, although dividing a non-Inf number by Inf will return 0.) Plotting software will often treat NaN values as “don’t plot this.” That’s why it’s possible to make a sensible plot of \\(\\sin(x)/x\\) even when the plotting domain includes zero. 26.6 Exercises Exercise 26.02: 3EdMBL The Taylor polynomial for \\(e^x\\) has an especially lovely formula: \\[p(x) = 1 + \\frac{x}{1!} + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots\\] Question A In the above formula, the center \\(x_0\\) does not appear. Why not? Having a center is not a requirement for a Taylor polynomial.︎✘ This is wrong. All Taylor polynomials are expansions around some fixed center value. There is a center, \\(x_0 = 1\\), but terms like \\(x_0 x^2\\) were simplified to \\(x^2\\).︎✘ Look again at the Taylor formula at the start of this section. The basis functions are \\(x-x_0, (x-x_0)^2, \\ldots\\), not \\(x_0 x, x_0 x^2, \\ldots\\) There is a center, \\(x_0 = 0\\), but the terms like \\((x-x_0)^2\\) were simplified to \\(x^2\\).Nice!  Exercise 26.04: o6dP4k Here is a Taylor polynomial: \\[p(x) = e + \\frac{e}{1!} (x-1) + \\frac{e}{2!} (x-1)^2 + \\cdots\\] Question A Where is the center \\(x_0\\) of this polynomial?     \\(x_0 = -2\\)︎✘        \\(x_0 = -1\\)︎✘        \\(x_0 = 0\\)︎✘        \\(x_0=1\\)\\(\\heartsuit\\ \\)       \\(x_0 = 2\\)︎✘ Question B Your roommate suggests that \\(p(x)\\) is a Taylor expansion of \\(e^x\\) around \\(x=1\\). Is he right? No, a polynomial doesn’t have functions like \\(e\\).︎✘ \\(e\\) is not a function, it’s just a number, 2.718282…. Yes. The center is \\(x_0 = 1\\).Good.  Not really. The formula suggests that the center is \\(x_0=1\\) but the coefficients are wrong.︎✘ The coefficients are right. Exercise 26.06: Co1Ekt Consider the function \\(f(x) \\equiv (x - 3)^2\\). Question A Using ordinary algebra, \\(f(x)\\) can be expanded as \\((x^2 - 6 x -9)\\). Is \\[p(x) = -9 - 6 x + x^2\\] a Taylor polynomial expansion of \\(f(x)\\)? Yes, with a center at \\(x_0 = 0\\)Right!  Yes, with a center at \\(x_0 = 3\\)︎✘ No, because there are no factorials involved︎✘ The factorials are already built-in to the coefficients. Exercise 26.08: llX7EF Here’s the Taylor polynomial expansion of \\(\\sin(x)\\) about a center \\(x_0\\): \\[p(x) = 1/2 - \\frac{\\sqrt{3}/{2}}{2!} (x - x_0)^2 + \\frac{1/2}{4!} (x - x_0)^4 + \\cdots\\] Question A Which of these is the numerical value of \\(x_0\\)? (Hint: Remember that the coefficients involve the function and its derivatives evaluated at \\(x_0\\) as described in Section 26.3.)     \\(\\pi/6\\)\\(\\heartsuit\\ \\)       \\(\\pi/3\\)︎✘        \\(\\pi/2\\)︎✘        \\(\\pi\\)︎✘ Exercise 26.10: ecdVKx With very high-order derivatives, it can be awkward to use a notation with repeated subscripts, like \\(\\partial_{xxxxx} f(x)\\). Another notation often encountered is \\(f^{(5)}\\), where the integer in the superscript tells the order of the derivative. We’ll use that notation in this problem. For a function \\(f(x)\\) and its derivatives \\(f^{(1)}(x)\\), \\(f^{(2)}(x)\\), … the Taylor polynomial \\(p(x)\\) centered on \\(x_0\\) is \\[p(x) \\equiv f(x_0) + \\frac{f^{(1)}(x_0)}{1!} (x - x_0)^1 + \\frac{f^{(2)}(x_0)}{2!} (x - x_0)^2 + \\cdots\\] A Taylor polynomial, like all polynomials, is a linear combination of basic functions. Question A Which of these are the basic functions being linearly combined in a Taylor polynomial? \\(f(x), f^{(1)}(x), f^{(2)}(x), \\ldots\\)︎✘ You won’t find any of these in the definition of \\(p(x)\\) given above. You’re confusing \\(x\\) with \\(x_0\\). \\(f(x_0), f^{(1)}(x_0), f^{(2)}(x_0), \\ldots\\)︎✘ These are not functions of \\(x\\). They are numbers computed by evaluating a function at the center point \\(x_0\\). \\(f(x_0), \\frac{f^{(1)}(x_0)}{1!}, \\frac{f^{(2)}(x_0)}{2!}, \\ldots\\)︎✘ These are not functions of \\(x\\). They are numbers computed by evaluating a function at the center point \\(x_0\\). \\((x-x_0), (x - x_0)^2, \\ldots\\)Correct. These are the only places where the variable \\(x\\) appears in the Taylor formula. Exercise 26.12: 682lsB Each of the three functions graphed below is a simple power-law function that can be written \\(\\left[x-x_0\\right]^n\\). The three functions have different values for \\(x_0\\) and for \\(n\\). Question A For the blue function, what is \\(x_0\\)?     0︎✘        1︎✘        2︎✘        3︎✘        4\\(\\heartsuit\\ \\)       5︎✘ Question B For the blue function, what is the order of the polynomial?     0︎✘        1\\(\\heartsuit\\ \\)       2︎✘        3︎✘        4︎✘        5︎✘ Question C For the orange function, what is \\(x_0\\)?     0︎✘        1︎✘        2\\(\\heartsuit\\ \\)       3︎✘        4︎✘        5︎✘ Question D For the orange function, what is the order of the polynomial?     0︎✘        1︎✘        2\\(\\heartsuit\\ \\)       3︎✘        4︎✘        5︎✘ Question E For the green function, what is \\(x_0\\)?     -2︎✘        -1\\(\\heartsuit\\ \\)       0︎✘        1︎✘        2︎✘        3︎✘ Question F For the green function, what is the order of the polynomial?     0︎✘        1︎✘        2︎✘        3\\(\\heartsuit\\ \\)       4︎✘        5︎✘ Exercise 26.14: cQT2v6 At \\(x=0\\), the value of \\(x \\ln(x)\\) is indeterminate, having the form \\(0 \\cdot \\infty\\). Using a sandbox, plot out \\(x \\ln(x)\\) over the domain \\(0 &lt; x &lt; \\frac{1}{2}\\). Question A From the graph, determine \\(\\lim_{x\\rightarrow 0} x \\ln(x()\\). Choose the correct answer.     -0.2︎✘        0\\(\\heartsuit\\ \\)       0.1︎✘        0.5︎✘        not well behaved︎✘ Use l’Hopital’s rule to confirm that \\(\\lim_{x\\rightarrow 0} x \\ln(x()\\) exists. Here, the rule has the form: \\[\\lim_{x\\rightarrow 0} x \\cdot \\ln(x) = [\\lim_{x\\rightarrow 0} \\partial_x x] \\cdot [\\lim_{x\\rightarrow 0} \\partial_x \\ln(x)]\\] Question B Does the application of l’Hopital’s rule confirm the result from graphing the function? YesRight!  No︎✘ Aren’t you getting \\(\\frac{1}{1/x} = x\\) when you carry out the differentiation involved? Exercise 26.16: jAOmME We would like to write a Taylor-series polynomial for \\(\\dnorm(x)\\). To do this, we will need the numbers \\[\\dnorm(x_0),\\ \\ \\partial_x \\dnorm(x_0),\\ \\ \\partial_{xx} \\dnorm(x_0),\\ \\ \\partial_{xxx} \\dnorm(x_0), ...\\] Here are the functions for the derivatives Order formula for derivative 0th \\(\\dnorm(x)\\) 1st \\(\\left[{\\large\\strut}-x\\right]\\dnorm(x)\\) 2nd \\(\\left[{\\large\\strut}x^2 - 1\\right]\\dnorm(x)\\) 3rd \\(\\left[{\\large\\strut}3x - x^3\\right]\\dnorm(x)\\) 4th \\(\\left[{\\large\\strut}3\\,x^2-x^4 \\right]\\dnorm(x)\\) 5th \\(\\left[{\\large\\strut}3-6\\,x^3 + x^5 \\right]\\dnorm(x)\\) 6th \\(\\left[{\\large\\strut}-15\\,x^2 + 10\\,x^4-x^6 \\right]\\dnorm(x)\\) 7th \\(\\left[{\\large\\strut}-15 + 45\\,x^3-15\\,x^5 + x^7 \\right]\\dnorm(x)\\) 8th \\(\\left[{\\large\\strut}105\\,x^2-105\\,x^4 + 21\\,x^6-x^8 \\right]\\dnorm(x)\\) Write a Taylor polynomial function for \\(\\dnorm(x)\\) around \\(x_0=0\\)). To do this, you will have to evaluate each of the 9 formulas above at \\(x=0\\), producing a number. For example, the first five formulas will give 0.3989, 0, -0.3989, 0, 1.1968. This would expand into the following Taylor function: T_at_0 = makeFun(0.3989 + 0*(x-x0) + - 0.3989*(x-x0)^2/factorial(2) + 0*(x-x0)^3/factorial(3) + 1.1968*(x-x0)^4/factorial(4) ~ x, x0=0) You’ll need to add in the 6th, 7th, and 8th terms. Plot T_at_0(x) ~ x over the domain \\(0 \\leq x \\leq 2\\), and pipe the result to a slice-plot of dnorm(x) ~ x so that you can compare the two plots. Define another function T_at_1() which will be much like T_at_zero() but with x0=1 and the coefficients changed to be the formulas evaluated at \\(x=1\\). Add a layer showing T_at_1() to your previous plot. Say over what domain T_at_0() is a good approximation to dnorm() and over what domain T_at_1() is a good approximation to dnorm(). Do the two domains overlap? Write a piecewise function of this form: T &lt;- makeFun(ifelse(abs(x) &lt; 0.5, T_at_0(abs(x)), T_at_1(abs(x))) ~ x) Plot this out on top of dnorm() to show whether T() is a good approximation to dnorm(). You could continue on to define T_at_2() and incorporate that into the piecewise T(), and so on, to construct an approximation to dnorm() that is accurate over a larger domain. The fundamental theorem says that an order-n polynomial has n roots (including multiplicities).↩︎ Unfortunately for these human calculators, pencils weren’t invented until 1795. Prior to the introduction of this advanced, graphite-based computing technology, mathematicians had to use quill and ink.↩︎ In many French words, the sequence “os” has been replaced by a single, accented letter, \\(\\hat{\\text{o}}\\).↩︎ "],["change-accumulation.html", "Chapter 27 Change and accumulation 27.1 Accumulation 27.2 Notation for anti-differentiation 27.3 R/mosaic notation 27.4 Dimension and anti-differentiation 27.5 From Calculus Made Easy 27.6 Exercises", " Chapter 27 Change and accumulation Every 10 years, starting in 1790, the US Census Bureau carries out a constitutionally mandated census: a count of the current population. The overall count as a function of year is shown in Figure 27.1. [Source] In the 230 years spanned by the census data, the US population has grown 100-fold, from about 4 million in 1790 to about 330,000,000 in 2020. Figure 27.1: US population since 1790. It’s tempting to look for simple patterns in such data. Perhaps the US population has been growing exponentially. A semi-log plot of the same data suggests that the growth is only very roughly exponential. (See Figure ??.) A truly exponential process would present as a curve with a constant derivative, but the derivative of the function in the graphed is decreasing over the centuries. Insofar as the slope over the semi-log graph is informative, it amounts to this quantity: \\[\\partial_t \\ln(\\text{pop}(t)) = \\frac{\\partial_t\\, \\text{pop}(t)}{\\text{pop}}\\] This is the per-capita rate of growth, that is, the rate of change in the population divided by the population. Conventionally, this fraction is presented as a percentage: percentage growth in the population per year, as in Figure 27.2. Figure 27.2: Annual per capita growth rate of the US population (percent) The dots in the graph are a direct calculation from the census data. There’s a lot of fluctuation, but an overall trend stands out: the population growth rate has been declining since the mid-to late 1800s. The deviations from the trend are telling and correspond to historical events. There’s a relatively low growth rate seen from 1860 to 1870: that’s the effect of the US Civil War. The Great depression is seen in the very low growth from 1930 to 1940. Baby Boom: look at the growth from 1950-1960. The bump from 1990 to 2000? Not coincidentally, the 1990 Immigration Act substantially increased the yearly rate of immigration. If the trend in the growth rate continues, the US will reach zero net growth about 2070, then continue with negative growth. Of course, negative growth is just decline. A simple prediction from Figure 27.2 is that the argmax of the US population will be around 2070. How large will the population be when it reaches its maximum? In Block 2, we dealt with situations where we know the function \\(f(t)\\) and want to find the rate of change \\(\\partial_t f(t)\\). Here, we know the rate of change of the population and we need to figure out the population itself, in other words to figure out from a known \\(\\partial_t f(t)\\) what is the (as yet) unknown function \\(f(t)\\). The process of figuring out \\(f(t) \\longrightarrow \\partial_t f(t)\\) is, of course, called differentiation. The opposite process, \\(\\partial_t f(t) \\longrightarrow f(t)\\) is called anti-differentiation. In this block we’ll explore the methods for calculating anti-derivatives and some of the settings in which anti-derivative problems arrive. The predictions from the accumulate-population-growth model are shown as a \\(\\color{magenta}{\\text{magenta}}\\) line in Figure 27.3. Figure 27.3: Predicted US population based on the historical linear decline in per-capita growth. According to the accumulation model, the population peaks in 2075 at 390 million. We’ll be back down to the present population level in about 100 years. Professional demographers make much more sophisticated models using detailed data from many sources. The demographers at the US Census Bureau predict that the population will reach a maximum of 404 million in 2060, shown by the little blue dot in Figure 27.3. That’s not too different from what we got by analyzing just the raw census numbers. 3135 27.1 Accumulation Imagine a simple setting: water flowing out of a tap into a basin or tank. The amount of water in the basin will be measured in a unit of volume, say liters. Measurement of the flow \\(f(t)\\) of water from the tap into the tank has different units, say liters per second. If volume \\(V(t)\\) is the volume of water in the tank as a function of time, \\(f(t)\\) at any instant is \\(f(t) = \\partial_t V(t)\\). Clearly there is a relationship between the two functions \\(f(t)\\) and \\(V(t)\\). With derivatives, we can give a good description of that relationship: \\[f(t) = \\partial_t V(t)\\] This description will be informative if we have measured the volume of water in the basin as a function of time and want to deduce the rate of flow from the tap. Now suppose we have measured the flow \\(f(t)\\) and want to figure out the volume. The volume at any instant is the past flow accumulated to that instant. As a matter of notation, we write this view of the relationship as \\[V(t) = \\int f(t) dt,\\] which you can read as “volume is the accumulated flow.” Other examples of accumulation and change: velocity is the rate of change of position with respect to time. Likewise, position is the accumulation of velocity over time. force is the rate of energy with respect to position. Likewise energy is the accumulation of force as position changes. deficit is the rate of change of debt with respect to time. Likewise, debt is the accumulation of deficit over time. 27.2 Notation for anti-differentiation For differentiation we are using the notation \\(\\partial_x\\) as in \\(\\partial_x f(x - a)\\). Remember that the subscript on \\(\\partial\\) names the with-respect-to input. There are three pieces of information this notation: The \\(\\color{magenta}{\\partial}\\) symbol which identifies the operation as partial differentiation. The name of the with-respect-to input \\(\\partial_{\\color{magenta}{x}}\\) written as a subscript to \\(\\partial\\). The function to be differentiated, \\(\\partial_x \\color{magenta}{f(x - a)}\\). For anti-differentiation, our notation must also specify the three pieces of information. It might be tempting to use the same notation as differentiation but replace the \\(\\partial\\) symbol with something else, perhaps \\(\\eth\\) or \\(\\spadesuit\\) or \\(\\forall\\), giving us something like \\(\\spadesuit_x f(x-a)\\). Convention has something different in store. The notation for anti-differentiation is \\[\\large \\int f(x-a) dx\\] 1. The \\(\\color{magenta}{\\int}\\) is the marker for anti-differentiation. 2. The name of the with-respect to variable is contained in the “dx” at the end of the notation: \\(\\int f(x-a) d\\color{magenta}{x}\\) 3. The function being anti-differentiated is in the middle \\(\\int \\color{magenta}{f(x-a)} dx\\). For those starting out with anti-differentiation, the conventional notation can be confusing, especially the \\(dx\\) part. It’s easy confuse \\(d\\) for a constant and \\(x\\) for part of the function being anti-differentiated. Think of the \\(\\int\\) and the \\(dx\\) as brackets around the function. You need both brackets for correct notation, the \\(\\int\\) and the \\(dx\\) together telling you what operation to perform. Remember that just as \\(\\partial_x f(x-a)\\) is a function, so is \\(\\int f(x-a) dx\\). 27.3 R/mosaic notation Recall that the notation for differentiation in R/mosaic is D(f(x-a) ~ x). This has the same three pieces of information as \\(\\partial_x f(x-a)\\) D() signifies differentiation. ~ x identifies the with-respect-to variable. f(x-a) ~ is the function on which the operation is to be performed. This style of notation extends beautifully to anti-differentiation: antiD(f(x-a) ~ x) Remember that just as D(f(x-a) ~ x) creates a new function out of f(x-a) ~ x, so does antiD(f(x-a) ~ x). 27.4 Dimension and anti-differentiation This entire block will be about anti-differentiation, its properties, and its uses. You already know that anti-differentiation (as the name suggests) is the inverse of differentiation. There is one consequence of this that it’s helpful to keep in mind as we move on to other chapters. This being calculus, the functions that we construct and operator upon have inputs that are quantities and outputs that are also quantities. Every quantity has a dimension, as discussed in Chapter 16. When you are working with any quantity, you should be sure that you know its dimension and its units. The dimension of the input to a function does not by any means have to be the same as the dimension of the output. For instance, we have been using many functions where the input has dimension time and the output is position (dimension L) or velocity (dimension L/T) or acceleration (dimension L/T\\(^2\\)). Imagine working with some function \\(f(y)\\) that’s relevant to some modeling project of interest to you. Returning to the bracket notation that we used in Chapter 16, the dimension of the input quantity will be [\\(y\\)]. The dimension of the output quantity is [\\(f(y)\\)]. The function \\(\\partial_y f(y)\\) has the same input dimension \\([y]\\) but the output will be \\([f(y)] / [y]\\). For example, suppose \\(f(y)\\) is the mass of fuel in a rocket as a function of time \\(y\\). The input dimension \\([y]\\) is T. The output dimension is M. The output of the function \\(\\partial_y f(y)\\) will be different; it has dimension \\([f(y)] / [y]\\), which in this case will be M / T. (Less abstractly, if the fuel mass is given in kg, and time is measured in seconds, then \\(\\partial_y f(y)\\) will have units of kg-per-second.) How about the dimension of the anti-derivative \\(F(y) = \\int f(y) dy\\)? The input still has input dimension T. The output … well, whatever [\\(F(y)\\)] is, we know the dimension of \\([f(y)] = [\\partial_y F(y)]\\) will have dimension \\([F(y)]\\, /\\, [y] =\\) M. Since the dimension \\([y]\\) = T, it must be that \\([F(y)]\\) = M T. To summarize: The dimension of derivative \\(\\partial_y f(y)\\) will be \\([f(y)] / [y]\\). The dimension of the anti-derivative \\(\\int f(y) dy\\) will be \\([f(y)]\\times [y]\\). Paying attention to the dimensions (and units!) of input and output can be a boon to the calculus student. Often students have some function \\(f(y)\\) and they are wondering which of the several calculus operations—differentiation, anti-differentiation, finding a maximum, finding an argmax or a zero—they are supposed to do. The thing to do is figure out what will be the dimension of the quantity you want. From that, you can often figure out which operation is appropriate. To illustrate, imagine that you have constructed \\(f(y)\\) for you task and you know, say, \\([f(y)]\\) = M and \\([y]\\) = T$. Look things up in the following table: Dimension of result Calculus operation M / T differentiate M T anti-differentiate M find max or min T find argmax/argmin or a function zero M T\\(^2\\) anti-differentiate twice in succession M / T\\(^2\\) differentiate twice in succession For example, suppose the output of the accelerometer on your rocket has dimension L / T\\(^2\\). You are trying to figure out from the accelerometer reading what is your altitude. Altitude has dimension L. Look up in the table to see that you want to anti-differentiate acceleration twice in succession. 27.5 From Calculus Made Easy Calculus Made Easy, by Silvanus P. Thompson, is a classic, concise, and elegant textbook from 1910. It takes a common-sense approach, sometimes lampooning the traditional approach to teaching calculus. Some calculus-tricks are quite easy. Some are enormously difficult. The fools who write the textbooks of advanced mathematics—and they are mostly clever fools—seldom take the trouble to show you how easy the easy calculations are. On the contrary, they seem to desire to impress you with their tremendous cleverness by going about it in the most difficult way. — from the preface Thompson’s first chapter starts with the notation of accumulation, which he calls “the preliminary terror.” The preliminary terror … can be abolished once for all by simply stating what is the meaning—in common-sense terms—of the two principal symbols that are used in calculating. These dreadful symbols are: \\(\\Large\\ d\\) which merely means “a little bit of.” Thus \\(dx\\) means a little bit of \\(x\\); or \\(du\\) means a little bit of \\(u\\). Ordinary mathematicians think it more polite to say “an element of,” instead of “a little bit of.” Just as you please. But you will find that these little bits (or elements) may be considered to be indefinitely small. \\(\\ \\ \\Large\\int\\) which is merely a long \\(S\\), and may be called (if you like) “the sum of.” Thus \\(\\ \\int dx\\) means the sum of all the little bits of \\(x\\); or \\(\\ \\int dt\\) means the sum of all the little bits of \\(t\\). Ordinary mathematicians call this symbol “the integral of.” Now any fool can see that if \\(x\\) is considered as made up of a lot of little bits, each of which is called \\(dx\\), if you add them all up together you get the sum of all the \\(dx\\)’s, (which is the same thing as the whole of \\(x\\)). The word “integral” simply means “the whole.” If you think of the duration of time for one hour, you may (if you like) think of it as cut up into \\(3600\\) little bits called seconds. The whole of the \\(3600\\) little bits added up together make one hour. When you see an expression that begins with this terrifying symbol, you will henceforth know that it is put there merely to give you instructions that you are now to perform the operation (if you can) of totaling up all the little bits that are indicated by the symbols that follow. The next chapter shows what it means to “total up all the little bits” of a function. 27.6 Exercises Exercise 27.02: bcJnUq Question A What is the name of the with-respect-to input in \\(\\int g(y) dy\\)? yNice!  dy︎✘ The \\(d\\) is just punctuation preceding the input name. x︎✘ There’s no \\(x\\) in the expression. t︎✘ There’s no \\(t\\) in the expression. Question B What is the name of the with-respect-to input in \\(\\int g(t) dy\\) yExcellent!  dy︎✘ The \\(d\\) is just punctuation preceding the input name. x︎✘ There’s no \\(x\\) in the expression. t︎✘ Even though \\(g(t)\\) is not a function of \\(y\\), the notation says we are to anti-differentiate it with respect to \\(y\\). The result will be \\(y g(t) + C\\). Question C What is the name of the with-respect-to input in \\(\\int g(x, t) dt\\) y︎✘ dt︎✘ The \\(d\\) is just punctuation preceding the input name. x︎✘ \\(g()\\) is a function of both \\(x\\) and \\(t\\), but we are indication that the anti-differentiation is to be done with respect to \\(t\\), not \\(x\\). tNice!  Exercise 27.04: Ya2cVq Question A Which of the following functions is \\(\\int a + bx dx\\)? (Hint: Differentiate each of them until you find the one that matches \\(a + bx\\).) \\(ax + rac{1}{2}b x^2 + C\\)Excellent!  \\(ax + 2b x^2 + C\\)︎✘ The derivative of this is \\(a + 4b x\\), not \\(a + bx\\). \\(a + b x^2 + C\\)︎✘ The derivative of this is \\(2 b x\\), not \\(a + bx\\). Question B Which of the following functions is \\(\\int e^{-kx} dt\\)?     $ - e^{-kx}\\(&lt;span class=&#39;mcanswer&#39;&gt;\\) \\(&lt;/span&gt;&lt;/span&gt;       &lt;span class=&#39;Zchoice&#39;&gt;\\)- k e^{-k x}\\(&lt;span class=&#39;mcanswer&#39;&gt;︎✘ &lt;/span&gt;&lt;/span&gt;       &lt;span class=&#39;Zchoice&#39;&gt;\\) e^{-kx}$︎✘ Exercise 27.06: wmyERp Every function has an anti-derivative. But there are many functions, for example \\(\\dnorm()\\) where there is no formula for the anti-derivative. Even so, the R/mosaic antiD() operator will figure out what is the anti-derivative. For each of the following functions, use makeFun() to implement the function as f(). Then use antiD() to construct the anti-derivative of f() and give this the name F(). Finally, use D() to compute the derivative of F(). For instance: f &lt;- makeFun(x*dnorm(x) ~ x) F &lt;- antiD(f(x) ~ x) dF &lt;- D(F(x) ~ x) slice_plot(f(x) ~ x, domain(x=c(0, 10))) %&gt;% slice_plot(dF(x) ~ x, color=&quot;blue&quot;, size=3, alpha = 0.2) Question A For the function \\(f(x) \\equiv \\pnorm(x^2)\\), what is \\(F(5)\\)? (Pick the closest answer.)     4︎✘        4.5\\(\\heartsuit\\ \\)       5︎✘        5.5︎✘        6︎✘        6.5︎✘ Question B For the function \\(f(x) \\equiv \\sin(x) \\ln(x^2)\\), what is \\(F(5)\\)? (Pick the closest answer.)     -4︎✘        -3.5︎✘        -3︎✘        -2.5\\(\\heartsuit\\ \\)       -2︎✘ Question C For the function \\(f(x) \\equiv x^2 \\pnorm(x)\\), what is \\(F(5)\\)? (Pick the closest answer.)     35︎✘        37︎✘        39︎✘        41\\(\\heartsuit\\ \\)       43︎✘ Make up a function of your own choosing, ensuring that it is defined on the domain used in the slice_plot() command in the Sandbox. See if you can construct one for which antiD() does not give a right answer. When you find one, send it to your instructor. By the way, did we mention that you’re welcome to include piecewise functions in your search for a function that will defeat antiD()? Exercise 27.08: kEAW8g In the population prediction model at the start of the chapter want to find a function \\(P(y)\\) that gives the population as a function of year \\(y\\). From the data, we plotted out \\(\\ln\\left[P(y)\\right]\\) and found a fairly smooth curve that was upward sloping and concave down. Next, we made a plot of the derivative with respect to year of that upward-sloping, concave-down curve and found the derivative to be well approximated by a straight-line function with a negative slope \\(a - b y\\). In other words, we found \\[\\partial_y \\ln(P(y)) = a - b\\,y\\] We want to figure out \\(P(y)\\) from this relationship. Step 1: Anti-differentiate the functions on both sides of the equation. This has the effect of removing the \\(\\partial_y\\) from the left side of the equation and replacing the right side by $ dy $. Task 1: Confirm that \\(\\int \\left[a - b\\,y\\right]dy = a y - \\frac{1}{2} b y^2 + C\\). Step 2: From Step 1 we have translated the relationship between population and year into this form: \\[\\ln(P(y)) = a y - \\frac{1}{2} b y^2 + C\\] Task 2: Exponentiate both sides of the newly framed relationship to get $ P(y) = (a y - b y^2 + C)$ and use the algebra of exponentials to write this as \\(P(y) = A e^{ay -b y^2}\\). Step 3: Let’s declare that \\(y=0\\) means “the present year.” Task 3: Find the population in the present year and use that information to estimate one of the parameters in \\(P(y) = A e^{ay-b y^2}\\). Step 4: The per-capita growth rate is \\(G(y) \\approx \\partial_y e^{a y - b y^2}\\). The data suggest that \\(G(0) = a = \\approx 0.01\\) and that \\(G(75) \\approx 0\\). Similarly, \\(b \\approx 0.01/75\\). You can use the chain rule to calculate \\(G(y) \\approx \\partial_y e^{a y - b y^2} = (a - 2 b y) e^{a y - b y^2}\\) Task 4: You know \\(a\\) and you have a rough value for \\(b\\). Let’s refine that value for \\(b\\). To do this, set \\(y=75\\) and plot \\((a - 2 b y) e^{a y - b y^2}\\) as a function of \\(b\\). Find the \\(b\\) that corresponds to 0 growth. f &lt;- makeFun((a - 2*b*y)*exp(a*y - b * y^2) ~ b, a = 0.01, y=75 ) slice_plot(f(b) ~ b, domain(b=c(0.000,0.01/75))) Read off the value of \\(b\\) from the graph. Now that you have numerical estimates for \\(a\\) and \\(b\\), plot out \\(P(y)\\) for the next 200 years. According to the prediction, what will be the population in year 2200? Exercise 27.10: NYPDR The graph shows a function \\(f(x)\\). Like all functions, it has an anti-derivative. Here are several functions, \\(F_1(x)\\) through \\(F_4(x)\\). One and only one is the anti-derivative of the function shown in the graph. Your job is to figure out which one. F1 &lt;- rfun(~ x, seed = 782) F2 &lt;- rfun(~ x, seed = 934) F3 &lt;- rfun(~ x, seed = 297) F4 &lt;- rfun(~ x, seed = 892) Don’t worry about how rfun() makes a function. Once you run those four lines, you can use slice_plot() in the usual way to plot out any of the four functions over the domain \\(-5 \\leq x \\leq 5\\). Question A Which one of the functions is an anti-derivative of the function graphed above? (Hint: See the next problem.)     F1()\\(\\heartsuit\\ \\)       F2()︎✘        F3()︎✘        F4()︎✘ Question B Confirming graphically that a candidate \\(F(x)\\) is indeed the anti-derivative of \\(f(x)\\) is hard because the two functions can have very different shapes. But there is a very simple operation you can apply to \\(F(x)\\) to make the comparison trivial. What is this operation? anti-differentiate $F(x)︎✘ differentiate \\(F(x)\\)Excellent! If the result matches the shape of \\(f(x)\\), you’ve confirmed that \\(F(x)\\) is the anti-derivative of \\(f(x)\\). compose \\(f(x)\\) with itself︎✘ multiply \\(F(x)\\) times $f(x)︎✘ "],["totaling-bits.html", "Chapter 28 Totaling the little bits 28.1 The notation of little bits 28.2 Exercises", " Chapter 28 Totaling the little bits Many students wonder how it is possible to reconstruct a function \\(F(x)\\) from its derivative \\(f(x)\\). This may be especially true for those who have studied calculus previously, who may have been taught that anti-differentiation is an advanced topic and may have struggled with the algebraic methods that are traditionally emphasized many calculus courses. The point of this short chapter is to show you that anti-differentiation is easy if you look at it the right way. As an example, consider the function \\(F(x)\\) shown in Figure 28.1. Figure 28.1: Top: A function \\(F(x)\\). Bottom: Slicing \\(F(x)\\) into piecewise domains and anchoring the left-most point of each slice at 0. Now imagine that we sliced up \\(F(x)\\) over small sub-domains of \\(x\\), as in Figure 28.1 (bottom). That is, we approximated \\(F()\\) piecewise locally. But we’ve broken the continuity of \\(F(x)\\) by moving each slice up or down so that the left-most point has value 0. Can you reconstruct \\(F(x)\\) from the local segments? Start by reading off the function value from the last point in the left-most segment. That’s been marked in Figure 28.1 with a blue dot. The function value at that dot is 7.072. Now take the second segment. The idea is to move that segment upward until it joins the first segment at the blue dot. You can do that by adding 7.072 to the second segment. The result is shown in Figure 28.2(top). Figure 28.2: Reconstructing the original function \\(F(x)\\) by moving each segment upward to meet its left neighbor. Top: The first two segments are connected. Bottom: The third segment is connected to the first two. Now read off the new value at the end of the second segment, it’s 4.198. Add this amount to the third segment as in Figure 28.2(bottom). Continue this process until you have reconstructed \\(F(x)\\) from the local segments. You may object: “Of course you can reconstruct \\(F(x)\\) from the local segments, but this isn’t the same as reconstructing \\(F(x)\\) from its derivative \\(\\partial_x F(x)\\).” My answer is, “That depends on how many segments you use.” Let’s use many more segments: Figure 28.3: Using small segments gives each segment a simple shape. Top: At width \\(h=0.1\\) a few of the segments look curved. Bottom: This graph zooms in on the subdomain \\(0 \\leq x \\leq 1\\) where there is a notably curved segment in the top graph. Setting \\(h=0.01\\) breaks up that curved segments into components well approximated by a straight line. Notice that many of the segments are straight lines. That’s understandable, since any function looks like a straight line over a small enough domain. Each of those straight-line segments is drawn over a domain \\(x_i &lt; x &lt; x_i+h\\) that has width \\(h\\). The slope of each segment is \\(\\partial_x F(x_i)\\) and it’s height is \\(h \\partial_x F(x_i)\\). Thus, to draw the segments we don’t need \\(F(x)\\), we just need \\(\\partial_x F(x)\\). You might continue to object, since not every one of the segments is a straight-line whose slope and height can be figured out with \\(\\partial_x F(x)\\). That’s true in the figure because we made the segments fairly wide. We can make them as small as you like for the calculation. (The graphic would get very crowded unless we zoom in on the horizontal axis.) Or, here is another segment drawing trick. Even the curved segments in Figure 28.3 are essentially quadratic. The derivative of each quadratic is a function of \\(x\\)—that’s why they curve. We can write that derivative using the first two derivatives of \\(F(x)\\), that is, as \\(\\partial_x F(x) = \\partial_x F(x_i) + \\partial_{xx} F(x_i) [x-x_i]\\). You’ll see in Chapter XXX that we have a simple formula that will construct the individual quadratically-shaped segment from \\(\\partial_x F(x)\\). 28.1 The notation of little bits The standard notation for anti-differentiation can be interpreted in terms of putting together segments, or, in the words of Prof. Thompson in Calculus Made Easy, “totaling up all the little bits.” (See Section 27.5.) Let’s assemble piece by piece the mathematical notation for “anti-differentiate \\(f(x)\\) to construct \\(F(x)\\).” We start with the function itself: \\(\\large f(x)\\). Remember that \\(f(x)\\), at each value of \\(x\\) will be the slope of \\(F(x)\\). Why? Because \\(F(x)\\) is the anti-derivative of \\(f(x)\\), so \\(f(x)\\) is the derivative of \\(F(x)\\). Now divide the domain \\(x\\) into many little bits. Each of these sub-domains is \\(\\large dx\\), a little chunk of \\(x\\). On each of the little chunks, draw in \\(f(x)\\). Since \\(f(x)\\) is the slope of \\(F(x)\\), we will draw \\(f(x)\\) for any given chunk as a short line segment of that slope over the chunk. We’ll write these little bits each of which is a straight-line function, as \\(\\large\\color{blue}{f(x) dx}\\). Here’s an example where the domain \\(-\\pi \\leq x \\leq \\pi\\) is being split into \\(dx\\)’s of length 0.2. Figure 28.4: Turning \\(f(x)\\) (thin black curve) into straight-line segments whose slope is given by the value of \\(f()\\). Assemble together all the \\(f(x)dx\\) segments from (3) to get \\(F(x)\\). This instruction to assemble is denoted \\[\\Large \\color{blue}\\int\\] Figure 28.5: \\(\\color{blue}{\\int} f(x)dx\\) means to assemble the straight-line pieces \\(f(x) dx\\) in the manner described in the previous section. Altogether, we have: \\[\\Large \\underbrace{\\underbrace{\\LARGE\\color{magenta}{\\int}}_{\\color{magenta}{\\text{assemble}}} \\underbrace{\\LARGE f(x) \\overbrace{\\strut \\overset{\\strut}{dx}}^{\\small \\text{bits of}\\ x}}_{\\color{blue}{\\text{the slope segments}}}}_{\\text{giving}\\ {\\LARGE F(x)}\\ \\text{altogether.}}\\] In the figures, \\(f(x) \\equiv \\cos(x)\\), so the assembly \\(\\int f(x) dx = \\sin(x)\\). 28.2 Exercises Exercise 28.02: BhGRKU The graph shows a function \\(G(t)\\) broken up into segments. Draw \\(G(t)\\) by putting together the segments. The segment in blue is obviously not a straight line. As you can see, the blue segment spans the sub-domain \\(0 \\leq x \\leq 0.5\\). How do we draw that segment knowing just \\(\\partial_t G(t)\\) and therefore \\(\\partial_{tt} G(t)\\). The values of those two functions at \\(x=0\\) are \\(\\partial_t G(0) = -1.988\\) and \\(\\partial_{tt} G(0) - 5.599\\). And, since all the segments have their left end anchored at a vertical value of zero, you know \\(G(0) = 0\\). Using Taylor series, construct a function centered at \\(x=0\\). Plot it out and see that it reconstructs the blue segment on the domain \\(0 \\leq x \\leq 0.5\\). "],["net-change.html", "Chapter 29 Integration 29.1 Net change 29.2 The “definite” integral 29.3 Initial value of the quantity 29.4 Integrals from bottom to top 29.5 Exercises", " Chapter 29 Integration Anti-derivatives are useful when you know how a quantity is changing but don’t yet know the quantity itself. It’s important, of course, to keep track of which is the “quantity itself” and which is the “rate of increase in that quantity.” This always depends on context and your point of view. It’s convenient, then, to set some fixed examples to make it easy to keep track of which quantity is which. Context Quantity Rate of increase in quantity Money Cash on hand \\({\\mathbf S}(t)\\) Cash flow \\(s(t)\\) Fuel Amount in fuel tank \\({\\mathbf F}(t)\\) Fuel consumption rate, e.g. kg/hour \\(f(t)\\) Motion Momentum \\({\\mathbf M}(t)\\) Force \\(m(t)\\) notation \\({\\mathbf H}(t)\\) \\(\\partial_t {\\mathbf H}(t)\\) notation \\(G(t) = \\int g(t) dt\\) \\(g(t)\\) We’ll also adopt a convention to make it simpler to recognize which quantity is the “quantity itself” and which is the “rate of increase in that quantity.” We will use CAPITAL LETTERS to name functions that are the quantity itself, and lower-case letters for the rate of increase in that quantity. For example, if talking about motion, an important quantity is *momentum and how it changes over time. The momentum itself will be \\({\\mathbf M}(t)\\) while the rate of increase of momentum will be \\(m(t)\\).47 The amount of money a business has on hand at time \\(t\\) is \\({\\mathbf S}(t)\\) measured, say, in dollars. The rate of increase of that money is \\(s(t)\\), in, say, dollars per day. Notice that we’re using the phrase “rate of increase” rather than “rate of change.” That’s because we want to keep straight the meaning of the sign of the lower-case function. If \\(m(t)\\) is positive, the momentum is increasing. If \\(m(t)\\) is negative then it’s a “negative rate of increase,” which is, of course, just a “decrease.” For a business, money coming in means that \\(s(t)\\) is positive. Expenditures of money correspond to \\(s(t)\\) being negative. In the fuel example. \\({\\mathbf F}(t)\\) is the amount of fuel in the tank. \\(f(t)\\) is the rate of increase in the amount of fuel in the tank. Of course, engines burn fuel, removing it from the tank. So we would write the rate at which fuel is burned as \\(-f(t)\\): removing fuel is a negative increase in the amount of fuel, an expenditure of fuel. The objective of this chapter is to introduce you to the sorts of calculations, and their notations, that let you figure out how much the CAPITAL LETTER quantity has changed over an interval of \\(t\\) based on what you already know about the value over time of the lower-case function. The first step in any such calculation is to find or construct the lower-case function \\(f(t)\\) or \\(c(t)\\) or \\(m(t)\\) or whatever it might be. This is a modeling phase. In this chapter, we’ll ignore detailed modeling of the situation and just present you with the lower-case function. The second step in any such calculation is to compute the anti-derivative of the lower-case function, giving as a result the CAPITAL LETTER function. You’ve already seen the notation for this, e.g. \\[{\\Large F(t) = \\int f(t) dt}\\ \\ \\ \\ \\ \\text{or}\\ \\ \\ \\ \\ {\\Large G(t) = \\int g(t) dt}\\ \\ \\ \\ \\text{and so on.}\\] In this chapter, we will not spend any time on this step; we will assume that you already have at hand the means to compute the anti-derivative. (Indeed, you already have antiD() available which will do the job for you.) Later chapters will look at the issues around and techniques for doing the computations by other means. The remaining steps in such calculations are to work with the CAPITAL LETTER function to compute such things as the amount of that quantity, or the change in that quantity as it is accumulated over an interval of \\(t\\). Sometimes you’re writing the capital letter functions in bold-face, e.g. \\({\\mathbf F}(t)\\) and other times you aren’t, e.g. \\(F(t)\\). What’s going on? This is a convention we’re adopting for this chapter, which is when we need it the most to introduce the concepts. Bold-face is being used in this chapter to represent the real-world quantity of interest. So \\({\\mathbf F}(t)\\) is the actual amount of fuel in the tank, \\({\\mathbf M}(t)\\) is the actual momentum of the car, and \\({\\mathbf S}(t)\\) is the actual amount of money on hand. The regular-face functions, \\(F(t)\\) and \\(M(t)\\) and \\(S(t)\\) are the functions that we get by applying anti-differentiation to \\(f(t)\\) or \\(m(t)\\) or \\(s(t)\\). Our broad interest is to construct the bold-face function knowing just the derivative of that function, which we’re writing in lower-case. So, \\(f(t) \\equiv \\partial_t {\\mathbf F}(t)\\). Similarly, \\(m(t) \\equiv \\partial_t {\\mathbf M}(t)\\) and \\(s(t) \\equiv \\partial_t {\\mathbf S}(t)\\). If we knew \\({\\mathbf F}(t)\\) or \\({\\mathbf M}(t)\\) or \\({\\mathbf S}(t)\\), that would be the end of the matter, since our interest is in the quantity \\({\\mathbf F}\\) or \\({\\mathbf V}\\) or \\({\\mathbf M}\\). But we are working with a situation where we know \\(f(t)\\) but not \\({\\mathbf F}(t)\\), or we know \\(m(t)\\) but not \\({\\mathbf M}(t)\\), and so on. How could such a situation arise in the real world? Suppose the car’s fuel gauge is broken, depriving us of direct knowledge of \\(\\mathbf F\\), but that we have a dashboard readout of the rate of fuel consumption. Then we would know \\(f(t)\\) but not \\({\\mathbf F}(t)\\). Or suppose you are in charge of day-to-day running of a business, collecting the income each day and paying the daily expenses. Thus, each day you know \\(s(t)\\)—the cash flow. But it’s your boss who has access to the bank account; you merely deposit money as you get it and write checks or Venmo suppliers (or however it is that your business operates day to day). So your boss knows \\({\\mathbf S}(t)\\) but you know only \\(s(t)\\). Since you know about anti-differentiation, you can try to reconstruct the fuel level \\({\\mathbf F}(t)\\) from the known \\(f(t)\\), or to figure out the bank balance \\({\\mathbf S}(t)\\) from your records of \\(s(t)\\). But anti-differentiation, while part of the solution, is only just a part. You can apply anti-differentiation to \\(f(t)\\), but what you get back will be \\(F(t)\\), not \\({\\mathbf F}(t)\\). What’s the difference between the two? It involves a constant value \\(C\\) which, alas, you can never figure out from \\(f(t)\\). All that you can claim, given the \\(F(t)\\) generated by anti-differentiation, is that \\[{\\mathbf F}(t) = F(t) + C .\\] 29.1 Net change Perhaps it goes without saying, but once you have the CAPITAL LETTER function, e.g. \\(F(t)\\), you can evaluate that function at any input that falls into the domain of \\(F(t)\\). If you have a graph of \\(F(t)\\) versus \\(t\\), just position your finger on the horizontal axis at input \\(t_1\\), then trace up to the function graph, then horizontally to the vertical axis where you can read off the value \\(F(t_1)\\). If you have \\(F()\\) in the form of a computer function, just apply \\(F()\\) to the input \\(t_1\\). In this regard, \\(F(t)\\) is like any other function. However, in using and interpreting the \\(F(t)\\) that we constructed by anti-differentiating \\(f(t)\\), we have to keep in mind the limitations of the anti-differentiation process. In particular, any function \\(f(t)\\) does not have a unique anti-derivative function. If we have one anti-derivative, we can always construct another by adding some constant: \\(F(t) + C\\) is also an anti-derivative of \\(f(t)\\). But we have a special purpose in mind when calculating \\(F(t_1)\\). We want to figure out from \\(F(t)\\) how much of the quantity \\(f(t)\\) has accumulated up to time \\(t_1\\). For example, if \\(f(t)\\) is the rate of increase in fuel (that is, the negative of fuel consumption), we want \\(F(t_1)\\) to be the amount of fuel in our tank at time \\(t_1\\). That cannot happen. All we can say is that \\(F(t_1)\\) is the amount of fuel in the tank at \\(t_1\\) give or take some unknown constant C. Instead, the correct use of \\(F(t)\\) is to say how much the quantity has changed over some interval of time, \\(t_0 \\leq t \\leq t_1\\). This “change in the quantity” is called the *net change in \\(F()\\). To calculate the net change in \\(F()\\) from \\(t_0\\) to \\(t_1\\) we apply \\(F()\\) to both \\(t_0\\) and \\(t_1\\), then subtract: \\[\\text{Net change in}\\ F(t) \\ \\text{from}\\ t_0 \\ \\text{to}\\ t_1 :\\\\= F(t_1) - F(t_0)\\] Example 29.1 Suppose you have already constructed the rate-of-change function for momentum \\(m()\\) and implemented it as an R function m(). For instance, \\(m(t)\\) might be the amount of force at any instant \\(t\\) of a car, and \\({\\mathbf M}(t)\\) is the accumulated force, better known as momentum. We’ll assume that the input to m() is in seconds, and the output is in kg-meters-per-second-squared, which has the correct dimension for force. You want to find the amount of force accumulated between time \\(t=2\\) and \\(t=5\\) seconds. # You&#39;ve previous constructed m(t) M &lt;- antiD(m(t) ~ t) M(5) - M(2) ## [1] -1.3921 To make use of this quantity, you’ll need to know it’s dimension and units. For this example, where the dimension [\\(m(t)\\)] is M L T\\(^{-2}\\), and [\\(t\\)] = T, the dimension [\\({\\mathbf M}(t)\\)] will be M L T\\(^{-1}\\). In other words, if the output of \\(m(t)\\) is kg-meters-per-second-squared, then the output of \\(V(t)\\) must be kg- meters-per-second. 29.2 The “definite” integral We have described the process of calculating a net change from the lower-case function \\(f(t)\\) in terms of two steps: Construct \\(F(t) = \\int f(t) dt\\). Evaluate \\(F(t)\\) at two inputs, e.g. \\(F(t_2) - F(t_1)\\), giving a net change, which we’ll write as \\({\\cal F}(t_1, t_2) = F(t_2) - F(t_1)\\). As a matter of notation, the process of going from \\(f(t)\\) to the net change is written as one statement. \\[{\\cal F}(t_1, t_2) = F(t_2) - F(t_1) = \\int_{t_1}^{t_2} f(t) dt\\] The punctuation \\[\\int_{t_1}^{t_2} \\_\\_\\_\\_ dt\\] captures in one construction both the anti-differentiation step (\\(\\int\\_\\_dt\\)) and the evaluation of the anti-derivative at the two bound \\(t_2\\) and \\(t_1\\). Several names are used to describe the overall process. It is important to become familiar with these. \\(\\int_a^b f(t) dt\\) is called a definite integral of \\(f(t)\\). \\(a\\) and \\(b\\) are called, respectively, the lower bound of integration and the upper bound of integration, although given the way we draw graphs it might be better to call them the “left” and “right” bounds, rather than lower and upper. The pair \\(a, b\\) is called the bounds of integration. As always, it pays to know what kind of thing is \\({\\cal F}(t_1, t_2)\\). Assuming that \\(t_1\\) and \\(t_2\\) are fixed quantities, say \\(t_1 = 2\\) seconds and \\(t_2 = 5\\) seconds, then \\({\\cal F}(t_1, t_2)\\) is itself a quantity. The dimension of that quantity is [\\(F(t)\\)] which in turn is [\\(f(t)\\)]\\(\\cdot\\)[\\(t\\)]. So if \\(f(t)\\) is fuel consumption in liters per second, then \\(F(t)\\) will have units of liters, and \\({\\cal F}(t_1, t_2)\\) will also have units of liters. Remember also an important distinction: \\(F(t) = \\int f(t) dt\\) is a function whose output is a quantity. \\(F(t_2) - F(t_1) = \\int_{t_1}^{t_2} f(t) dt\\) is a quantity, not a function. Of course, \\(f(t)\\) is a function whose output is a quantity. In general, the two functions \\(F(t)\\) and \\(f(t)\\) produce outputs that are different kinds of quantities. For instance, the output of \\(F(t)\\) is liters of fuel while the output of \\(f(t)\\) is liters per second: fuel consumption. Similarly, the output of \\(S(t)\\) is dollars, while the output of \\(s(t)\\) is dollars per day. The use of the term definite integral suggests that there might be something called an indefinite integral, and indeed there is. “Indefinite integral” is just a synonym for “anti-derivative.” In this book we favor the use of anti-derivative because it’s too easy to leave off the “indefinite” and confuse an indefinite integral with a definite integral. Also, “anti-derivative” makes it completely clear what is the relationship to “derivative.” Since 1700, it’s common for calculus courses to be organized into two divisions: Differential calculus, which is the study of derivatives and their uses. Integral calculus, which is the study of anti-derivatives and their uses. Mathematical notation having been developed for experts rather than for students, very small typographical changes are often used to signal very large changes in meaning. When it comes to anti-differentiation, there are two poles of fixed meaning and then small changes which modify the meaning. The poles are: Anti-derivative: \\(\\int f(t) dt\\), which is a function whose output is a quantity. Definite integral \\(\\int_a^b f(t) dt\\), which is a quantity, plain and simple. But you will also see some intermediate forms: \\(\\int_a^t f(t) dt\\), which is a function with input \\(t\\). \\(\\int_a^x f(t) dt\\), which is the same function as in (a) but with the input name \\(x\\) being used. \\(\\int_t^b f(t) dt\\), which is a function with input \\(t\\). Less commonly, \\(\\int_x^t f(t) dt\\) which is a function with two inputs, \\(x\\) and \\(t\\). The same is true of \\(\\int_x^y f(t) dt\\) and similar variations. 29.3 Initial value of the quantity Recall that we’re interested in a real quantity \\({\\mathbf F}(t)\\), but we only know \\(f(t)\\) and from that can calculate an anti-derivative \\(F(t)\\). The relationship between them is \\[{\\mathbf F}(t) = F(t) + C\\] where \\(C\\) is some fixed quantity that we cannot determine directly from \\(f(t)\\). Still, even if we cannot determine \\(C\\), there’s one way we can use \\(F(t)\\) to make definite statements about \\({\\mathbf F}(t)\\). Consider the net change from \\(t_1\\) to \\(t_2\\) in the real quantity \\({\\mathbf F}\\). This is \\[{\\mathbf F}(t_2) - {\\mathbf F}(t_1) = \\left[F(t_2) + C\\right] - \\left[F(t_1) + C\\right] = F(t_2) - F(t_1)\\] In other words, just knowing \\(F(t)\\), we can make completely accurate statements about net changes in the value of \\({\\mathbf F}(t)\\). Let’s develop our understanding of this unknown constant \\(C\\), which is called the constant of integration. To do so, watch the following movie which attempts to show the process of constructing the integral \\[F(t) = \\int_2^t f(t) dt\\ .\\] Figure 29.1: Constructing the anti-derivative \\(F(t)\\) by reading the slope from \\(f(t)\\) and using that slope to extend the picture of \\(F()\\) Focus first on the top graph. The function we are integrating, \\(f(t)\\), is known before we carry out the integration, so it is shown in the top graph. \\(f(t)\\) is the rate of increase in \\(F(t)\\) (or \\({\\mathbf F}(t)\\) for that matter). From the graph, you can read using the vertical axis the value of \\(f(t)\\) for any input \\(t\\). But since \\(f(t)\\) is a rate of increase, we can also depict \\(f(t)\\) as a slope. That slope is being drawn as a \\(\\color{magenta}{\\text{magenta}}\\) arrow. Notice that when \\(f(t)\\) is positive, the arrow slopes upward and when \\(f(t)\\) is negative, the arrow slopes downward. The steepness of the arrow is the value of \\(f(t)\\), so for inputs where the value of \\(f(t)\\) is far from zero the arrow is steeper than for it is for values of \\(f(t)\\) that are near zero. Now look at both graphs, but concentrate just on the arrows in the two graphs. They are always the same: carbon copies of one another. Finally the bottom graph. We’re starting the integral at \\(t_1=2\\). Since nothing has yet been accumulated, the value \\(F(t_1 = 2) = 0\\). From (1) and (2), you know the arrow shows the slope of \\(F(t)\\). So as \\(F(t&gt;2)\\) is being constructed the arrow guides the way. When the slope arrow is positive, \\(F(t)\\) is growing. When the slope arrow is negative, \\(F(t)\\) is going down. In tallying up the accumulation of \\(f(t)\\), we started at time \\(t=2\\) and with \\(F(t=2) = 0\\). This makes sense, since nothing can be accumulated over the mere instant of time from \\(t=2\\) to \\(t=2\\). On the other hand, it was our choice to start at \\(t=2\\). We might have started at another value of \\(t\\) such as \\(t=0\\) or \\(t=-5\\) or \\(t=-\\infty\\). If so, then the accumulation of \\(f(t)\\) up to \\(t=2\\) would likely have been something other than zero. But what if we knew an actual value for \\({\\mathbf F}(2)\\). This is often the case. For instance, before taking a trip you might have filled up the fuel tank. The accumulated of fuel consumption only tells you how much fuel has been used since the start of the trip. But if you know the starting amount of fuel, by adding that to the accumulation you’ll know instant by instant how much fuel is in the tank. In other words, \\[{\\mathbf F}(t) = {\\mathbf F}(2) + \\int_2^t f(t) dt\\ .\\] This is why, when we write an anti-derivative, we should always include mention of some constant \\(C\\)—the so-called constant of integration—to remind us that there is a difference between the \\(F(t)\\) we get from anti-differentiation and the \\({\\mathbf F}(t)\\) of the function we’re trying to reconstruct. That is, \\[{\\mathbf F}(t) = F(t) + C = \\int f(t) dt + C\\ .\\] We only need to know \\({\\mathbf F}(t)\\) at one point in time, say \\(t=0\\), to be able to figure out the value of \\(C\\): \\[C = {\\mathbf F}(0) - F(0)\\ .\\] Another way to state the relationship between the anti-derivative and \\({\\mathbf F}(t)\\) is by using the anti-derivative to accumulate \\(f(t)\\) from some starting point \\(t_0\\) to time \\(t\\). That is: \\[{\\mathbf F}(t) \\ =\\ {\\mathbf F}(t_0) + \\int_{t_0}^t f(t)\\, dt\\ = \\ {\\mathbf F}(t_0) + \\left({\\large\\strut}F(t) - F(t_0)\\right)\\] A famous legend has Galileo at the top of the Tower of Pisa around 1590. The legend illustrates Galileo’s finding that a light object (e.g. a marble) and a heavy object (e.g. a ball) will fall at the same speed. Galileo published his mathematical findings in 1638 in Discorsi e Dimostrazioni Matematiche, intorno a due nuove scienze.48 In 1687, Newton published his world-changingPhilosophiae Naturalis Principia Mathematica.^[ English: Mathematical Principles of Natural Philosophy). Let’s imagine the ghost of Galileo returned to Pisa in 1690 after reading Newton’s Principia Mathematica. In this new legend, Galileo holds a ball still in his hand, releases it, and figures out the position of the ball as a function of time. Although Newton famously demonstrated that gravitational attraction is a function of the distance between to objects, he also knew that at a fixed distance—the surface of the Earth—gravitational acceleration was constant. So Galileo was vindicated by Newton. But, although gravitational acceleration is constant from top to bottom of the Tower of Pisa, Galileo’s ball was part of a more complex system: a hand holding the ball still until release. Acceleration of the ball versus time is therefore approximately a Heaviside function: \\[\\text{accel}(t) \\equiv \\left\\{\\begin{array}{rl}0 &amp; \\text{for}\\ t \\leq 3\\\\ -9.8 &amp; \\text{otherwise}\\end{array}\\right.\\] accel &lt;- makeFun(ifelse(t &lt;= 3, 0, -9.8) ~ t) Acceleration is the derivative of velocity. We can construct a function \\(V(t)\\) as the anti-derivative of acceleration, but the real-world velocity function will be \\[{\\mathbf V}(t) = {\\mathbf V}(0) + \\int_0^t \\text{accel}(t) dt\\] V_from_antiD &lt;- antiD(accel(t) ~ t) V &lt;- makeFun(V0 + (V_from_antiD(t) - V_from_antiD(0)) ~ t, V0 = 0) In the computer expression, the parameter V0 stands for \\({\\mathbf V}(0)\\). We’ve set it equal to zero since, at time \\(t=0\\), Galileo was holding the ball still. Velocity is the derivative of position, but the real-world velocity function will be the accumulation of velocity from some starting time to time \\(t\\), plus the position at that starting time: \\[x(t) \\equiv x(0) + \\int_0^t V(t) dt\\] We can calculate \\(\\int V(t) dt\\) easily enough with antiD(), but the function \\(x(t)\\) involves evaluating that anti-derivative at times 0 and \\(t\\): x_from_antiD &lt;- antiD(V(t) ~ t) x &lt;- makeFun(x0 + (x_from_antiD(t) - x_from_antiD(0)) ~ t, x0 = 53) We’ve set the parameter x0 to be 53 meters, the height above the ground of the top balcony on which Galileo was standing for the experiment. Figure 29.2: The acceleration, velocity, and position of the ball as a function of time in Galileo’s Tower of Pisa experiment. The ball is released at time \\(t_0\\). In the (fictional) account of the 1690 experiment, we had Galileo release the ball at time \\(t=0\\). That’s a common device in mathematical derivations, but in a physical sense it’s entirely arbitrary. Galileo might have let go of the ball at any other time, say, \\(t=3\\) or \\(t=14:32:05\\). A remarkable feature of integrals is that it doesn’t matter what we use as the lower bound of integration, so long as we set the initial value to correspond to that bound. For a while you were writing integrals like this: \\(\\int_a^b f(t) dt\\). Then you replaced \\(b\\) with the input name \\(t\\) to get \\(\\int_a^t f(t) dt\\). But then you switched everything up by writing \\(\\int_a^t f(x) dx\\). Is that the same as \\(\\int_a^t f(t) dt\\)? If so, why do you get to replace the \\(t\\) with \\(x\\) in some places but not in others? Recall from Chapter 5 that the names used for inputs to a function definition don’t matter so long as they are used consistently on the left and right sides of \\(\\equiv\\). For instance, all these are the same function: \\(f(x) \\equiv m x + b\\) \\(g(t) \\equiv m t + b\\) \\(h(\\text{wind}) \\equiv m \\text{wind} + b\\) Now think about the integral \\(\\int_a^b f(t) dt\\): \\[\\int_a^b f(t) dt = F(b) - F(a)\\ .\\] On the left-hand side, the input name \\(t\\) is prominant, appearing in two places: \\(f(\\color{magenta}{t}) d\\color{magenta}{t}\\). But \\(t\\) is nowhere on the right-hand side. We could have equally well written this as \\(\\int_a^b f(x) dx\\) or \\(\\int_a^b f(\\text{wind}) d\\text{wind}\\). The name we use for the input to \\(f()\\) doesn’t matter so long as it is consistent with the name used in the \\(d\\_\\_\\) part of the notation. Often, the name placed in the blanks in \\(\\int f(\\_\\_) d\\_\\_\\) is called a dummy variable. Writing \\(\\int_a^t f(t) dt\\) is perfectly reasonable, but many authors dislike the multiple appearance of \\(t\\). So they write something like \\(\\int_a^t f(x) dx\\) instead. 29.4 Integrals from bottom to top The bounds of integration appear in different arrangements. None of these are difficult to derive from the basic forms: The relationship between an integral and its corresponding anti-derivative function: \\[\\int_a^b f(x) dx = F(b) - F(a)\\] This relationship has a fancy-sounding name: the second fundamental theorem of calculus. The accumulation from an initial-value \\[{\\mathbf F}(b)\\ =\\ {\\mathbf F}(a) + \\int_a^b f(x) dx\\ = \\ {\\mathbf F}(a) + F(b) - F(a)\\] For many modeling situations, \\(a\\) and \\(b\\) are fixed quantities, so \\(F(a)\\) and \\(F(b)\\) are also quantities; the output of the anti-derivative function at inputs \\(a\\) and \\(b\\). But either the lower-bound or the upper-bound can be input names, as in \\[\\int_0^t f(x) dx = F(t) - F(0)\\] Note that \\(F(t)\\) is not a quantity but a function of \\(t\\). On occasion, you will see forms like \\(\\int_t^0 f(x)dx\\). You can think of this in either of two ways: The accumulation from a time \\(t\\) less than 0 up until 0. The reverse accumulation from 0 until time \\(t\\). Reverse accumulation can be a tricky concept because it violates everyday intuition. Suppose you were harvesting a row of ripe strawberries. You start at the beginning of the row—position zero. Then you move down the row, picking strawberries and placing them in your basket. When you have reached position \\(B\\) your basket holds the accumulation \\(\\int_0^B s(x)\\, dx\\), where \\(s(x)\\) is the lineal density of strawberries—units: berries per meter of row. But suppose you go the other way, starting with an empty basket at position \\(B\\) and working your way back to position 0. Common sense says your basket will fill to exactly the same amount as in the forward direction, and indeed this is the case. But integrals work differently. The integral \\(\\int_B^0 s(x) dx\\) will be the negative of \\(\\int_0^B s(x) dx\\). You can see this from the relationship between the integral and the anti-derivative: \\[\\int_B^0 s(x) dx \\ = \\ S(0) - S(B) \\ =\\ -\\left[{\\large\\strut}S(B) - S(0)\\right]\\ = \\ -\\int_0^B s(x) dx\\] This is not to say that there is such a thing as a negative strawberry. Rather, it means that harvesting strawberries is similar to an integral in some ways (accumulation) but not in other ways. In farming, harvesting from 0 to \\(B\\) is much the same as harvesting from \\(B\\) to 0, but integrals don’t work this way. Another property of integrals is that the interval between bounds of integration can be broken into pieces. For instance: \\[\\int_a^c f(x) dx \\ = \\ \\int_a^b f(x) dx + \\int_b^c f(x) dx\\] You can confirm this by noting that \\[\\int_a^b f(x) dx + \\int_b^c f(x) dx \\ = \\ F(b) - F(a) + \\left[{\\large\\strut}F(c) - F(b)\\right] = F(c) - F(a) \\ = \\ \\int_a^c f(x) dx\\ .\\] Finally, consider this function of \\(t\\): \\[\\partial_t \\int_a^t f(x) dx\\ .\\] First, how do we know it is a function of \\(t\\). Well, \\[\\int_a^t f(x) dx = F(t) - F(a)\\]is a function of \\(t\\). Differentiating the function \\(\\int_a^t f(x) dx\\), as with every other function, produces a new function. Second, there is a shortcut for calculating \\(\\partial_t \\int_a^t f(x) dx\\): \\[\\partial_t \\int_a^t f(x) dx\\ =\\ \\partial_t \\left[{\\large\\strut}F(t) - F(a)\\right]\\ .\\] Since \\(F(a)\\) is a quantity and not a function, \\(\\partial_t F(a) = 0\\). That simplies things. Even better, we know that the derivative of \\(F(t)\\) is simply \\(f(t)\\): that’s just the nature of the derivative/anti-derivative relationship between \\(f(t)\\) and \\(F(t)\\). Put together, we have: \\[\\partial_t \\int_a^t f(x) dx\\ =\\ f(t)\\ .\\] This complicated-looking identity has a fancy name: the first fundamental theorem of calculus. Backtracking the stars. In the 1920s, astronomers and cosmologists started to question the idea that the large-scale universe is static and unchanging. This traditional belief was undermined both by theory (e.g. General Relativity) and observations. The most famous of these were collected and published by Edwin Hubble, starting in 1929 and continuing over the next decade as improved techniques and larger telescopes became available. In recent years, with the availability of the space telescope named in honor of Hubble data has expanded in availability and quality. Figure 29.3 shows a version of Hubble’s 1929 graph based on contemporary data. Figure 29.3: The relationship between velocity and distance of stars, using contemporary data in the same format at Edwin Hubble’s 1929 publication. Each dot in Figure 29.3 is an exploding star called a supernova. The graph shows the relationship between the distance of the star from our galaxy and the outward velocity of that star. The velocities are large, \\(3 \\times 10^4\\) km/s is about one-tenth the speed of light. Similarly, the distances are big; light from the furthest star shown took about 2 billion years to reach Earth. For each star, we know the “current” velocity and the “current” position.49 For cosmologists constructing theories of the origin of the universe, an important question is the location of the star in the remote past. The location of each star can be found by integrating the velocity backwards in time. \\[D(t) = D_\\text{now} - \\int_t^\\text{now} v(t) dt\\] Ideally we would have measurements of the function \\(v(t)\\), but nobody was around to record them 500 million years ago. So, to model \\(v(t)\\) we can use theories of the evolution of the universe or … we can start simply and imagine that \\(v(t)\\) is constant. Let’s play out the consequences of that assumption. From the Hubble diagram, we can compute \\(v\\) as a function of \\(D\\)—the data show a simple straight-line relationship. The slope is (as always) rise-over-run: the rise is 40000 km/s and the run is 700 megaparsecs, which is \\(2.2 \\times 10^{22}\\) km, so the slope is \\(1.8 \\times 10^{-18}\\) \\(s\\)^{-1}$. Consequently, the straight-line relationship is \\[v(D_{now}) = 1.8 \\times 10^{-18}\\ D_{now} .\\] Since \\(v\\) is assumed not to depend on \\(t\\), the anti-derivative itself is trivial: \\(\\int_t^\\text{now} v dt = t v\\). Evaluating the anti-derivative at the limits of integration gives, for each star, \\[D(t) = D_\\text{now} - 1.8\\times 10^{-18} D_\\text{now} \\left[\\text{now} - t\\right]\\] Let’s define now\\(=0\\) and ask what might be a obvious question for people interested in the origin of the universe: At what \\(t+0\\) was each star at distance zero from the Milky Way? That is, what is the \\(t_0\\) at which \\(D(t_0) = 0\\)? Re-arranging the equation gives \\[0 = D_\\text{now} \\left[1 - 1.8\\times 10^{-18} t_0\\right]\\ \\ \\implies \\ \\ t_0 = \\frac{1}{1.8\\times 10^{-18}} \\approx 5.5 \\times 10^{17} \\text{seconds}.\\] Notice that time \\(t_0\\) does not depend on \\(D_\\text{now}\\). According to the theory that the star’s velocity \\(v(t)\\) is constant, all of the stars, now spaced apart across 2 billion light years, were at the same position at \\(t_0 = 5.5 \\times 10^{17}\\) seconds ago. Converting seconds to years, we get that this grand (but hypothetical) meeting of the stars occurred 17 billion years ago. Pretty crowded to have all the mass in the universe in one place at the same time. No wonder they call it the Big Bang! 29.5 Exercises Exercise 29.02: DkoUjX The following exercises are based on properties of definite integrals that were discussed in class and can be found on page 621 of the MMAC textbook. Here are some definite integrals for which, without stating anything more about the function, we give you the numerical result.       \\(\\int_{2}^{7} f(x) \\,dx = -8\\) \\(\\int_{-6}^{-2} g(x) \\,dx = 3\\) \\(\\int_{2}^{12} f(x) \\,dx = -14\\) \\(\\int_{0}^{2} g(x) \\,dx = 1\\) \\(\\int_{2}^{7} h(x) \\,dx = 5\\) \\(\\int_{0}^{2} h(x) \\,dx = 6\\) Use the above information to answer the multiple-choice questions below. Question A \\(\\int_{2}^{7} 3f(x) \\,dx =\\)     -8︎✘ Did you see the three?       -42︎✘ Check the bounds       -24\\(\\heartsuit\\ \\)       13︎✘ Question B \\(\\int_{7}^{12} f(x) \\,dx =\\) 6︎✘ Be careful with your signs 22︎✘ Be careful with your signs -6Nice!  -22︎✘ Be careful with your signs Question C \\(\\int_{2}^{7} f(x) + g(x) \\,dx =\\) -3︎✘ Do you know \\(\\int_{2}^{7} g(x) \\,dx\\)? 8︎✘ Do you know \\(\\int_{2}^{7} g(x) \\,dx\\)? -8︎✘ Do you know \\(\\int_{2}^{7} g(x) \\,dx\\)? insufficient information to answer questionCorrect.  Question D \\(\\int_{2}^{2} r(x) \\,dx =\\) -3︎✘ Look at the bounds 0Good. Even though you don’t know \\(r(x)\\) this is always true when the bounds are the same -8︎✘ Look at the bounds insufficient information to answer question at t︎✘ Look at the bounds Question E \\(\\int_{-6}^{-2} g(x)+3 \\,dx =\\) 6︎✘ You need to integrate the 3 15Correct.  12︎✘ Don’t forget g(x) 3︎✘ Break it up into two different integrals Question F \\(\\int_{12}^{7} f(x) \\,dx =\\) -6︎✘ Be careful with your signs 22︎✘ Be careful with your signs 6Nice!  -22︎✘ Be careful with your signs Exercise 29.04: LCKEs The equation below shows three items, all of which are equivalent even though they look different. You can see this from the equal signs separating the three items. REPLACE WITH COLORIZED VERSION \\[\\large \\int_{a}^{b} {f(x)} dx = {F(x)}\\left.\\right|_{a}^{b} = {F({b})} -{F({a})}\\] When you reach the point where you can say, “That’s obvious,” and can write down the three items from memory, you will have achieved an important facility with calculus. Question A Since the three items are equivalent, they are all the same kind of “thing.” What kind of thing are they? a numberExcellent! Another term for this is definite integral. Evaluating an anti-derivative at two values of \\(x\\) and subtracting one from the other gives a number. (Remember, in our notation, \\(a\\) and \\(b\\) stand for numerical constants, unless we specifically say otherwise.) a function of \\(x\\)︎✘ Each of the items include something that is a function of \\(x\\), but the entire item is not itself a function of \\(x\\). an interval︎✘ Each of the items includes an interval, but the entire item is not one. a limit of integration︎✘ Each of the items includes a limit of integration, but the entire item is not one. an anti-derivative︎✘ There is an anti-derivative involved in each item, but the entire item is not one. a constant of integration︎✘ No constant of integration is needed to express any of the items The equation has been written in color to help you identify elements that are the same in each of the three items. Question B Which of the colors stands for a limit of integration?     black︎✘        dodgerblue︎✘        tan\\(\\heartsuit\\ \\)       orange3︎✘ Question C Which of the colors stands for the derivative of a function that appears elsewhere in the equation?     black︎✘        dodgerblue︎✘        tan︎✘        orange3\\(\\heartsuit\\ \\) Question D Which of the colors stands for an anti-derivative of a function that appears elsewhere in the equation?     black︎✘        dodgerblue\\(\\heartsuit\\ \\)       tan︎✘        orange3︎✘ Exercise 29.06: gDSeX Remember our conventions for notation: Numerical constants (perhaps with units) Symbols: e.g. \\(a\\), \\(b\\), \\(c\\), \\(x_0\\), \\(t^{\\star}\\) Examples: 3.2, 4.8 meters, 17 feet/sec\\(^2\\) Quantities that can vary (perhaps with units) Symbols: e.g. \\(x\\), \\(t\\), \\(y\\), \\(u\\), \\(v\\) Examples: position, time, velocity Functions of a variable Symbols: e.g. \\(f(x)\\), \\(g(t)\\), \\(h(x, t)\\) Examples: position as a function of time, density as a function of position Functions evaluated at a specific numerical input Symbols: e.g. \\(f(a)\\), \\(g(t_0)\\), \\(h(x^{\\star}, t^{\\star})\\) Examples: velocity at the finish line, starting position In particular, take care to distinguish between these two kinds of symbolic items: \\(f(x)\\), \\(f()\\) as a function of \\(x\\) \\(f(x_0)\\), the function \\(f()\\) evaluated at the specific input \\(x_0\\), producing (typically) a quantity like 3.5 meters/sec. A major source of confusion for students is that \\(a\\) is a constant, even though we are not yet saying specifically which numerical value that constant has. Think of \\(a\\) as meaning “insert constant here.” In terms of derivatives … LIST TAKEN OUT TO GET TUFTE TO WORK With this in mind, turn to our three perspectives on a definite integral \\[\\int_a^b f(x) dx \\ \\ =\\ \\ \\left. F(x) \\right|_a^b\\ \\ =\\ \\ F(b) - F(a)\\] \\(a\\) and \\(b\\) are numerical constants -\\(f(x)\\) and \\(F(x)\\) are functions of \\(x\\) -\\(F(a)\\) is the function \\(F()\\) evaluated at the specific input \\(a\\), producing a quantity. Likewise \\(F(b)\\). Question A What kind of a thing is \\(F(u)\\), according to our notation convention? a number︎✘ Is \\(u\\) a number in our notation? a function of \\(x\\)︎✘ Close, but not \\(x\\). a function of \\(u\\)Nice!  a definite integral︎✘ A definite integral would be something like \\(\\int_a^b f(x) dx\\) or \\(\\left. F(x) \\right|_a^b\\) or \\(F(b) - F(a)\\). Question B What kind of a thing is \\(F(a)\\), according to our notation convention? a numberNice! We’re evaluating \\(F()\\) at a specific numerical value of the input, namely \\(a\\). a function of \\(x\\)︎✘ A function always has one or more variables as input. \\(a\\) is not a variable but a numerical constant. a function of \\(u\\)︎✘ A function always has one or more variables as input. \\(a\\) is not a variable but a numerical constant. a definite integral︎✘ A definite integral would be something like \\(\\int_a^b f(x) dx\\) or \\(\\left. F(x) \\right|_a^b\\) or \\(F(b) - F(a)\\). Question C What kind of a thing is \\(F(u) - F(a)\\), according to our notation convention? a number︎✘ Is \\(u\\) a number in our notation? a function of \\(x\\)︎✘ Close, but not \\(x\\). a function of \\(u\\)Correct. Since \\(F(u)\\) is a function of \\(u\\), and \\(F(a)\\) is a constant, \\(F(u) - F(a)\\) is a function of \\(u\\) minus a constant, or, in other words, a function of \\(u\\). a definite integral︎✘ A definite integral would be something like \\(\\int_a^b f(x) dx\\) or \\(\\left. F(x) \\right|_a^b\\) or \\(F(b) - F(a)\\). Question D According to our notation convention, what kind of a thing is \\[\\int_a^u f(x) dx \\text{?}\\], a number︎✘ a function of both x and u︎✘ a function of \\(x\\)︎✘ Close, but not \\(x\\). a function of \\(u\\)Correct. You can see this by referring to the three perspectives equation. \\[\\int_a^u f(x)dx = F(u) - F(a)\\] which is a function of \\(u\\). a definite integral︎✘ Certainly it looks a lot like a definite integral. But \\(u\\) is a variable, not a constant. Question E According to our notation convention, what kind of a thing is \\[\\int_u^b f(x) dx \\text{?}\\], a number︎✘ a function of both x and u︎✘ a function of \\(x\\)︎✘ Close, but not \\(x\\). a function of \\(u\\)Right! You can see this by referring to the three perspectives equation. \\[\\int_u^b f(x)dx = F(b) - F(u)\\] which is a function of \\(u\\). a definite integral︎✘ Certainly it looks a lot like a definite integral. But \\(u\\) is a variable, not a constant. Question F According to our notation convention, what kind of a thing is \\[\\int_u^x f(x) dx \\text{?}\\], a number︎✘ a function of both x and uCorrect. You can see this by referring to the three perspectives equation. \\[\\int_u^x f(x)dx = F(x) - F(u)\\] which is a function of both \\(x\\) and \\(u\\). a function of \\(x\\)︎✘ a function of \\(u\\)︎✘ a definite integral︎✘ Certainly it looks a lot like a definite integral. But \\(x\\) and \\(u\\) are variables, not constants. Now turn to the entities involved in the so-called “First Fundamental Theorem of Calculus.” (“Fundamental theorem” is a highfalutin way of saying something like, “This isn’t obvious at first glance, and so you should be especially careful to memorize it so that you identify it when you see it.” Another way to state it is, “Every function is the derivative of some anti-derivative.” But you knew that already, since “every function has an anti-derivative.”) Here are the entities involved, which you’ll recognize as a slight modification of an earlier statement: \\[\\partial_u \\int_a^u f(x)dx \\ \\ =\\ \\ \\partial_u \\left. F(x) \\right|_a^u \\ \\ = \\ \\ \\partial_u \\left(F(u) - F(a)\\right) .\\] Let’s look at the right-most expression \\(\\partial_u \\left(F(u) + F(a)\\right)\\) and exploit the the derivative of a sum is the sum of the derivatives. So … \\[\\partial_u \\left(F(u) + F(a)\\right) = \\partial_u F(u) - \\partial_u F(a) = \\partial_u F(u)\\] Question G Which of the following correctly justifies the step \\[\\partial_u F(u) - \\partial_u F(a) = \\partial_u F(u)\\ \\text{?}\\] \\(F(a)\\) is a constantCorrect. And the derivative of a constant is always 0. \\(F()\\) is an anti-derivative.︎✘ \\(F(b)\\) does not appear.︎✘ \\(F(u) = \\int f(x) dx\\)︎✘ Taking the left-most and right-most expressions in the above equation, we have \\[\\partial_u \\int_a^u f(x) dx = \\partial_u F(u)\\] Question H Is there an algebraic simplification of \\(\\partial_u F(u)\\)? No, because it depends on what \\(F(u)\\) is.︎✘ But we know what \\(F(u)\\) is: the anti-derivative of \\(f(u)\\). Yes, because \\(\\partial_u F(u)\\) is simply \\(f(u)\\).Excellent!  No, because we could just as easily have written \\(\\partial_x F(x)\\)︎✘ Yes, because it is the same thing as \\(\\partial_x F(x)\\)︎✘ The equation \\[\\partial_u \\int_a^u f(x) dx \\ \\ = \\ \\ f(u)\\] means that “differentiation undoes integration” or, as we’ve been putting it, “differentiation undoes anti-differentiation.” Exercise 29.08: DKwksA In the 1660s, John Boyle made use of then-new instrumentation to measure gas pressure. He discovered what’s now called Boyle’s Law, which says that, at constant temperature in a closed system, pressure times volume is a constant: \\[PV = const\\] In the 1720s, Daniel Fahrenheit developed the first reliable thermometer consisting of a column of mercury in a glass straw. He developed a temperature scale which divided the range from freezing to boiling into 180 small units, which he called “degrees,” as was traditional in measuring angles. (In 1742, Anders Celsius created another scale with freezing at 0 and 100 small units—still called “degrees”—between freezing and boiling. With the availability of reliable thermometers, scientists started to consider the role of temperature in the relationship between pressure and volume. Their many discoveries were eventually synthesized into a “combined gas law” and then into an “ideal gas law” which famously states: \\[PV = nRT .\\] Here, \\(n\\) is “amount” of gas, quantified as the number of moles of the gas in the container, \\(T\\) is temperature, and \\(R\\) is the “ideal gas constant”: \\[R = 8.314 \\text{J}/(\\text{K}\\ \\text{mol})\\] The “mol” cancels out the dimension of \\(n\\), the \\(K\\) cancels out the dimension of \\(T\\), leaving us with \\(PV\\) having the dimension of energy (Joules). The temperature \\(T\\) is measured in degrees Kelvin, which is just like Celsius but moving the location of 0 from freezing to … well … the hypothetical temperature when \\(PV=0\\), which can be estimated by extrapolating measurements of \\(PV(T)\\) (that is, \\(PV\\) as a function of \\(T\\)) to the \\(T\\) where \\(PV = 0\\). Question A It’s convenient to have specific units in mind for pressure and volume. Since \\(P V\\) gives energy, let’s arrange \\(P\\) and \\(V\\) to have units such that when multiplied the result is Joules. What is the expression of the dimension Joule in terms of the SI system, that is, time in seconds, length in meters, and mass in kg? Hint: use the above paragraph and knowing that the units for energy are consistent for potential, kinetic, or other types of energy. \\(kg m^2 s^{-2}\\)Correct.  \\(kg m / s\\)︎✘ This is the units of momentum. \\(kg^2 m^2 s^3\\)︎✘ \\(m^2 / s^2\\)︎✘ Question B In the SI units system, volume has units of cubic meters: \\(m^3\\). What are the SI units for pressure in terms of kg, m, and s? The units of your answer to this question times the units for pressure should be equivilent to your answer from the previous question. \\(kg m^{-1} s^{-2}\\)Good.  \\(kg m^1 s^{-2}\\)︎✘ This is the units of force \\(kg^2 m^1 s^2\\)︎✘ \\(m s^2 / kg\\)︎✘ For use in calculus, it’s helpful to re-write the Ideal Gas Law in functional form. There are several ways to do this. For instance, if we wanted to measure the number of moles of gas in a container, we could use the function \\(n(P, V, T) = PV/RT\\). Here, we’re going to focus on pressure as a function of the other quantities: \\[P(n, V, T) = nRT/V.\\] Now consider a very simple machine consisting of a cylinder, closed on one end and sealed by a movable piston at the other, as in this picture. Source: R. Castelnuovo - Own work, CC BY-SA 3.0 The machine in the picture is more complicated than the simple machine we want to model. The picture includes two small valves at the top of the cylinder connected each to a pipe. Our machine has no valves and no pipes. The cylinder is charged with gas when it is manufactured. After that, nothing material goes in or out of the closed cylinder/piston system. When you push on the cylinder, the volume available for the gas gets smaller and the pressure increases. When you let the cylinder push on you, the volume available gets bigger and the pressure decreases. The amount of gas, \\(n\\), never changes. For simplicity, we’ll imagine that \\(n=1\\) and that the gas is N\\(_2\\). This means the mass of the gas is 0.028 kg. And, to simplify even more, let’s insist that the temperature of the cylinder and its gaseous content does not change from room temperature: 293\\(^\\circ\\) Kelvin. If you start in a high-volume, low-pressure state and push the piston to move to a low-volume, high-pressure state at the same temperature, you will be putting energy into the machine. The “area” of each little box in the graph, that is, pressure times volume, Question C How much energy (in Joules) corresponds to one small rectangle of area in the graph? 500 J︎✘ pick a gray box, what are its dimensions? 625 JCorrect.  2500 J︎✘ pick a gray box, what are its dimensions? 25,000 J︎✘ This is four gray boxes, not one Question D By counting rectangles in the graph, estimate how much energy needs to be put into the machine when the volume changes from 7.5 m\\(^3\\) to 2.5 m\\(^3\\) at a temperature of 300 K?     1000 J︎✘        3000 J\\(\\heartsuit\\ \\)       5000 J︎✘        10,000 J︎✘ Now that you have compressed the gas in the cylinder, by doing work on it, let’s heat up the machine to 1200K. Question E What will be the pressure of the gas when the volume of the machine is 2.5 m\\(^3\\) at temperature 1200 K? (The units will be kg m$^{-1} \\(s^{-2}\\))     1000︎✘        2000︎✘        3000︎✘        4000\\(\\heartsuit\\ \\) Question F Starting with the machine at 1200K and a volume of 2.5 m\\(^3\\), how much energy will the machine transfer to you when it expands to 7.5 m\\(^3\\)? Estimate this by counting squares in the graph.     about 5000 J︎✘        about 10,000 J\\(\\heartsuit\\ \\)       about 50,000 J︎✘        about 100,000 J︎✘ The net work done by the machine in completing the cycle, shifting from compression at low temperature to expansion at high temperature, is the difference between the energy put out by the machine when expanding and the energy put into the machine to compress the gas. Such a machine is called a “heat engine” since it turns a source of high temperature and a source of low temperature into energy. In a SANDBOX, evaluate the code below. The first line defines a function \\(P(V, T)\\) with default \\(n=1\\) mole of gas. Anti-differentiate \\(P()\\) with respect to \\(V\\) then calculate the energy needed to compress the cylinder at the low temperature, that is \\[\\int_{7.5}^{2.5} P(V, T=300) dV .\\] Call this numerical result compress_energy. Similarly, calculate the energy done by the machine in the high-temperature expansion \\[\\int_{2.5}^{7.5} P(V, T=1200) dV .\\] Call this numerical result expand_energy. You may want to make a graph of your \\(P(V, T)\\) function to check that it is right. Also, check that the integrals are right by comparing them to the rough estimate you made earlier by counting squares. P &lt;- makeFun( n*8.314*T/V ~ V + T, n=1) antiP &lt;- makeFun(n*8.314*T*log(V) ~ V + T, n=1) compress_energy &lt;- ... evaluate antiP appropriately expand_energy &lt;- ... ditto compress_energy # prints out the values expand_energy Exercise 29.10: ikgl The function windspeed(t) records wind speed at the site of a wind-turbine farm over one day, that is, \\(0 \\leq t \\leq 24\\) hours. The function speed2power(s) is the production function for the model of wind turbine used at the farm: the input is speed in miles per hour, the output is in kilowatts. (Both these functions were created for this exercise. They are not about a real turbine at a real wind farm, but are somewhat realistic.) Hint: you can nest a function inside of another function. For instance, if I had a function (‘solarpanelpower’) that calculates the amount of power a solar panel generates and another function (‘sunlight’) that tells me the amount of sunlight at time of the day (‘TOD’). I could evaluate this in one step like the following: ‘solarpanelpower(sunlight(TOD)).’ This would give me the amount of power from the solar panel based upon the time of the day. Your task, find the total energy generated over the 24-hour period by the turbine. Reminder: energy \\(E\\) is electric power multiplied by time. Or, more usefully for this problem, the increment energy \\(dE\\) generated at time \\(t\\) is the product of power at time \\(t\\) multiplied by the increment of time \\(dt\\), that is, \\(dE = p(t) dt\\). Consequently, \\[E = \\int_\\text{morning}^\\text{night} p(t) dt\\] where “morning” should really be 00:00 h and night 24:00 h on the day in question. We don’t have an algebraic formula for windspeed(t) even though it is a function. You can use antiD() to find the anti-derivative of the electric power function. The answer you compute should be saved to the name result. The units will be in kWh – kilowatt hours. # ignore these definitions. They are setting up the # functions for you to use tmp &lt;- rfun(~ t, seed=982) tmp2 &lt;- rfun(~ t, seed = 2932) tmp3 &lt;- rfun(~ t, seed = 43) windspeed &lt;- function(t) { abs(tmp((t - 5)*3) + tmp2((t - 10)*2) + tmp3((t - 15)*4)) } speed2power &lt;- function(s) { pmin(ifelse(s &lt; 5, 0, (s-2)^3), 5000) } #Your work starts here slice_plot(windspeed(t) ~ t, domain(t=c(0, 24))) # # Uncomment the next lines as you figure out how to fill in the &quot;...blanks...&quot; # antid_of_power &lt;- antiD( ....power_function_here(t)... ~ t) # result &lt;- antid_of_power(...night...) - antid_of_power(...morning...) # result # this prints out the result Question A Wind turbines of this type have a maximum power rating of 5000 kilowatts. Was this rating exceeded at any point during the day? The maximum instantaneous power was about 3500 kilowatts︎✘ The maximum instantaneous power was about 1100 kilowatts︎✘ That threshold was reached about 9 AMRight!  That threshold was exceeded about 8 AM︎✘ The maximum instantaneous power cannot be determined from the information given.︎✘ Question B At the maximum power rating of 5000 kilowatts, what’s the theoretical maximum amount of energy produced by the turbine over a 24-hour day? 5000 * 24 kilowatt-hoursGood.  5000 / 24 kilowatt-hours︎✘ The units, kilowatt hours, should remind you that power is multiplied by time. 5000 kilowatts︎✘ That’s the power rating. We want to know the amount of energy. Can’t be determined from the information given.︎✘ Question C About what fraction of the theoretical maximum energy did the wind turbine generate over the 24-hour period? About 2.5%︎✘ About 10%Good.  About 25%︎✘ About 50%︎✘ Can’t be determined from the information given.︎✘ Question D A peak time for residential energy consumption is from 7 am to 9 am. The price at which you can sell electrical energy to the grid operator is $0.09 per kilowatt-hour. At that price, how much would the energy produced from 7-9 am be worth? About 20 cents.︎✘ That would be the answer if the turbine generated only 1 kilowatt of power during that period. About $150︎✘ About $350Nice!  About $650︎✘ Question E What’s the average wind speed over the 24-hour period?     About 5 mph\\(\\heartsuit\\ \\)       About 7 mph︎✘        About 9 mph︎✘ Question F Wind speed fluctuates a lot, but imagine that the wind blew steadily at the average wind speed from the previous problem. How much energy would be generated over the 24-hour period? 0 kilowatt hoursRight! That wind wouldn’t be strong enough to turn the turbine. 500 kilowatt hours︎✘ 1000 kilowatt hours︎✘ 10,000 kilowatt hours︎✘ Exercise 29.12: JKLes The (so-called) “First Fundamental Theorem of Calculus” says: \\[\\partial_t \\int_a^t f(x) dx \\ = \\ f(t)\\] Question A Consider this new quantity: \\[\\partial_t \\int_t^a f(x) dx\\] Which of the following is a valid simplification of the quantity?     \\(f(t)\\)︎✘        \\(f(-t)\\)︎✘        \\(-f(t)\\)\\(\\heartsuit\\ \\)       none of the above︎✘ An app. Exercise 29.14: Hd5zsE Your house has solar panels on the roof. In sunshine, these generate power. You use some of that power immediately for cooking, lighting, and such. Any power generated above your needs gets stored in a battery. Any power used above the solar generation gets supplied by the battery. Over the course of a day, your use of power fluctuates (you use the toaster, open the refrigerator, etc). Similarly, the solar generation fluctuates as clouds pass by and the sun rises and sets in the sky. The amount of energy stored in the battery fluctuates over the day as you consume energy in your home and produce it with the solar panels. The unit used for electrical power is a “kilowatt” (kW). An old-fashioned incandescent light bulb consumes about 0.1 kW while lighted, a modern LED bulb generates about the same amount of light using only 0.01 kW. A refrigerator uses about 0.1 kW while a hair-dryer uses about 1 kW when it is running. Batteries store energy. The usual unit for energy is “kilowatt-hour” (kWh). A refrigerator will, over a 24-hour day, use 0.1 * 24 = 2.4 kWh. Power multiplied by time duration gives energy. If the power were constant, the energy could be calculated by a simple multiplication of the power over the duration. Since power fluctuates, we can’t do the calculation with ordinary multiplication. Instead, we have to integrate power over time. For this activity, use the “Solar-panels” App. Add picture/link to app. Question A Why is it called “net production” instead of just “production?” Because your house is connected to the utility electrical network in case you need extra power.︎✘ Because the system designer is something of a poet and wants you to think of the solar cells as a kind of fishing net harvesting photons.︎✘ Because the government will send you surplus hair nets to thank you for reducing CO2 production.︎✘ Because it’s not simply production from the solar panels but production minus consumption (the solar panels require energy to run). If you ignored consumption, you would call it “gross energy produced.”Right!  Question B The bottom graph shows energy accumulated in the battery since midnight. What does it mean that the energy accumulated is negative? The battery level is lower throughout the day than it was at midnight.Excellent!  The battery is discharging over the entire day.︎✘ It’s the top graph, net power production, that tells if if the battery is charging (positive net production) or discharging (negative net production). So this statement is not always accurate The sign is not important.︎✘ The sign is important Question C During the interval from 05:00 to 20:00, how much did the energy stored by the battery change? Highlight that interval in the beeps graph. -2.5 kWh︎✘ Is there more or less energy in the battery between these two points? 1.9 kW︎✘ Energy has units kWh, not kW. 15 hours︎✘ This is the length of the interval, not the energy stored. 1.5 kWhCorrect. You an calculate this by taking the difference between the relative battery level at the end of the interval and at the start of the interval. These values are shown as blue dots on the bottom graph (if you used the cursor to highlight the interval). Question D Suppose the battery was holding 20 kWh at 00:00. How much energy was it holding at 15:00? -2 kWh︎✘ This is the change in the battery energy level, what is the actual value at the level? 18 kWhCorrect.  20 kWh︎✘ 24 kWh︎✘ Question E When you choose a time interval in the beep graph, how come the energy stored (in kWh) is displayed as an area in the top graph? Keep in mind that the vertical scale of the top graph is kW, not kWh. It’s pretty.︎✘ Thanks. But there’s a better reason that’s relevant to calculus. To highlight visually the interval that that was selected.︎✘ There would be other ways to show the interval. To convert kW to kWh, we are effectively multiplying the power (kW) by the time duration. Power is on the vertical axis, time duration is on the horizontal axis. Multiplying the two corresponds to the area under the graph.Correct. In this instance, energy is acting as the anti-derivative of the power function with respect to time Question F How come two different colors are used to display the “area” under the net power curve? The second derivative of the anti-derivative of \\(f(t)\\) is equal to \\(f(t)\\).︎✘ The statement is true, but it’s irrelevant to the question being asked. No reason related to calculus per se. We like to make graphs pretty.︎✘ Because it’s not simply “area.” It’s the product of net power and time duration, and sometimes this quantity is negative. The color indicates whether the quantity is positive or negative at any instant.Good.  Exercise 29.16: Rr2ds Suppose the continuous function \\(f(x)\\) is positive on \\(x \\in [0, 4]\\) and negative on \\(x \\in [4, 8]\\). Let \\[F(x) \\equiv \\int_0^x f(u) du.\\] In addition, suppose \\(\\int_0^8 f(x)dx &lt; 0\\). Mark each statement as True or False. Question A \\(F(x)\\) has to be positive on [0,4] and negative on [4, 8].     True︎✘        False\\(\\heartsuit\\ \\) Question B \\(F(x)\\) must cross the x-axis at least once in the interval [0, 8].     True\\(\\heartsuit\\ \\)       False︎✘ Question C \\(F(0) &lt; F(8)\\).     True︎✘        False\\(\\heartsuit\\ \\) Question D \\(F(x)\\) is concave up on [0, 4] and concave down on [4, 8].     True︎✘        False\\(\\heartsuit\\ \\) Question E \\(F(x)\\) has a local maximum at x = 4.     True\\(\\heartsuit\\ \\)       False︎✘ Question F \\(F(x)\\) has a point of inflection at x=4.     True︎✘        False\\(\\heartsuit\\ \\) Momentum is velocity times mass. Newton’s Second Law of Motion stipulates that force equals the rate of change of momentum.↩︎ English: Discourses and Mathematical Demonstrations Relating to Two New Sciences↩︎ “Current” is in quotes because the measurements reflect the situation 100s of millions of years ago, when the light was emitted from the star.↩︎ "],["integrals-step-by-step.html", "Chapter 30 Integrals step-by-step 30.1 Euler method 30.2 Area 30.3 The Euler Step 30.4 Better numerics (optional) 30.5 Exercises", " Chapter 30 Integrals step-by-step The setting for anti-differentiation (and it’s close cousin, integration) is that we have a function \\(F(t)\\) which we do not yet know, but we do have access to some information about it: its slope as a function of time \\(f(t) \\equiv \\partial_t F(t)\\) and, perhaps, its value \\(F(t_0)\\) at some definite input value. Chapter 28 showed some ways to visualize the construction of an \\(F(t)\\) by accumulating short segments of slope. The idea is that we know \\(f(t)\\) which tells us, at any instant, the slope of \\(F(t)\\). So, in drawing a graph of \\(F(t)\\), we put our pen to paper at some input value \\(t_0\\) and then move forward in \\(t\\), setting the instantaneous slope of our curve according to \\(f(t)\\). In Chapter 29, we dealt with one of the limitations of finding \\(F(t)\\) by anti-differentiation of \\(f(t)\\); the anti-derivative is not unique. This is because to start drawing \\(F(t)\\) we need pick a \\(t_0\\) and an initial value of \\(F(t_0)\\). If we had picked a a different starting point \\(t_1\\) or a different initial value \\(F(t_1)\\), the new curve would be different than the one drawn through \\((t_0, F(t_0))\\), although it would have the same shape, just shifted up or down according to our choice. We summarize this situation algebraically by writing \\[\\int f(t) dt = F(t) + C\\ ,\\] where \\(C\\) is the constant of integration, that is, the vertical shift of the curve. The non-uniqueness of \\(F(t)\\) does not invalidate its usefulness. In particular, the quantity \\(F(b) - F(a)\\), will be the same regardless of which starting point we used to draw \\(F(t)\\). We have two names for \\(F(b) - F(a)\\) The net change in \\(F()\\) from \\(a\\) to \\(b\\). The definite integral of \\(f()\\) from \\(a\\) to \\(b\\), written \\(\\int_a^b f(t) dt\\). These two things, the net change and the definite integral, are really one and the same, a fact we describe by writing \\[\\int_a^b f(t) dt = F(b) - F(a)\\ .\\] In this chapter, we’ll introduce a simple numerical method for calculating from \\(f()\\) the net change/definite integral. This will be a matter of trivial but tedious arithmetic: adding up lots of little bits of \\(f(t)\\). Later, in Chapter 31, we’ll see how to avoid the tedious arithmetic by use of algebraic, symbolic transformations. This symbolic approach has great advantages, and is the dominant method of anti-differentiation found in college-level science textbooks. However, there are many common \\(f(t)\\) for which the symbolic approach is not possible, whereas the numerical method works for any \\(f(t)\\). Even more important, the numerical technique has a simple natural extension to some commonly encountered accumulation problems that look superficially like they can be solved by anti-differentiation but rarely can be in practice. We’ll meet one such problem and solve it numerically, but a broad approach to the topic, called dynamics or differential equations, will have to wait until Block 6. 30.1 Euler method The starting point for this method is the definition of the derivative of \\(F(t)\\). Reaching back to Chapter 8, \\[\\partial_t F(t) \\equiv \\lim_{h\\rightarrow 0} \\frac{F(t+h) - F(t)}{h}\\] To translate this into a numerical method for computing \\(F(t)\\), let’s write things a little differently. First, since the problem setting is that we don’t (yet) know \\(F(t)\\), let’s refer to things we do know. In particular, we know \\(f(t) = \\partial_t F(t)\\). Again, recognizing that we don’t yet know \\(F(t)\\), let’s re-write the expression using something that we do know: \\(F(t_0)\\). Stated more precisely, \\(F(t_0)\\) is something we get to make up to suit our convenience. (A common choice is \\(F(t_0)=0\\).) Let’s replace the symbol \\(h\\) with the symbol \\(dt\\). Both of them mean “a little bit of” and \\(dt\\) makes explicit that we mean “a little bit of \\(t\\).” We’ll substitute the limit \\(\\lim_{h\\rightarrow 0}\\) with an understanding that \\(dt\\) will be something “small.” How small? We’ll deal with that question when we have to tools to answer it. With these changes, we have \\[f(t_0) = \\frac{F(t_0+dt) - F(t_0)}{dt}\\ .\\] The one quantity in this relationship that we do not yet know is \\(F(t_0 + dt)\\). So re-arrange the equation so that we can calculate the unknown in terms of the known. \\[F(t_0 + dt) = F(t_0) + f(t_0)\\, dt\\ .\\] Example 30.1 Let’s consider finding the anti-derivative of \\(\\dnorm()\\), that is, \\(\\int_0^t \\dnorm(x) dx\\). In one sense, you already know the answer, since \\(\\partial_x \\pnorm(x) = \\dnorm(x)\\). In reality, however, we know \\(\\pnorm()\\) only because it has been numerically constructed by integrating \\(\\dnorm()\\). The \\(\\pnorm()\\) function is so important that the numerically constructed answer has been memorized by software. 30.2 Area The quantity \\[\\Large \\color{magenta}{f(t_0)}\\, \\color{orange}{dt}\\] gives rise to a visualization that has been learned by generations of calculus students. The visualization is so compelling and powerful that many students (and teachers, and textbook authors) mistake the visualization for integration and anti-differentiation themselves. We’ll start the visualization with a simple graph of \\(f(t)\\), which is called the integrand in the integral \\(\\int_a^b f(t) dt\\). Figure 30.1 shows the graph of \\(f(t)\\). A specific point \\(t_0\\) has been marked on the horizontal axis. Next to it is another mark at \\(t_0 + dt\\). Of course, the distance between these marks is \\(\\color{orange}{dt}\\). ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; Figure 30.1: Illustrating the interpretation of \\(f(t_0) dt\\) as an “area.” Per the usual graphical convention, a position along the vertical axis corresponds to a possible output of \\(f(t)\\). The output for \\(t=t_0\\) is \\(\\color{magenta}{f(t_0)}\\). That same quantity corresponds to the length of the vertical orange segment connecting \\((t_0, 0)\\) to \\((t_0, f(t_0))\\). The \\(\\color{orange}{dt}\\) line segment and the \\(\\color{magenta}{f(t_0)}\\) segment constitute two sides of a rectangle, shown as a shaded zone. The “area” of that rectangle is the product \\(\\color{magenta}{f(t_0)}\\ \\color{orange}{dt}\\). In this sort of visualization, an integral is the accumulation of many of these \\(f(t) dt\\) rectangles. For instance, Figure 30.2 the visualization of the integral \\[\\int_{0}^3 f(t) dt\\ .\\] ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; Figure 30.2: Visualizing the integral \\(\\int_0^3 f(t) dt\\) as the total “area” of several \\(f(t) dt\\) bars. The width of each of the bars is \\(dt\\). The height depends on the value of the function \\(f(t)\\) at the bar. For illustration, two of the bars are marked with vertical and horizontal line segments. As always in calculus, we imagine \\(dt\\) as a “small” quantity. In Figure 30.3 you can see that the function output changes substantially over the sub-domain spanned by a single rectangle. Using smaller and smaller \\(dt\\), as in Figure ?? brings the visualization closer and closer to the actual meaning of an anti-derivative. Figure 30.3: Visualizing the integral \\(\\int_0^3 f(t) dt\\) as the total “area” of several \\(f(t) dt\\) bars. The width of each of the bars is \\(dt\\). The height depends on the value of the function \\(f(t)\\) at the bar. For illustration, two of the bars are marked with vertical and horizontal line segments. Why do you keep putting “area” in quotes? When \\(f(t_i) &lt; 0\\), then \\(f(t_i) dt\\) will be negative. There is no such thing as a negative area, but in constructing an integral the \\(f(t_i)dt\\), being negative, diminishes the accumulated area. ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; Figure 30.4: The \\(\\int_{-2}^3 g(t) dt\\) covers subdomains where \\(g(t) &gt; 0\\) and where \\(g(t) &lt; 0\\). In those latter subdomains, the “area” is negative, and shown in light orange here. Another problem is that area is a physical quantity, with dimension L\\(^2\\). The quantity produced by integration will have physical dimension \\([f(t)][t]\\), the product of the dimension of the with-respect-to quantity and the output of the function. “Area” is an effective metaphor for visualizing integration, but the goal of integration is not to calculate an area but, typically, some other kind of quantity. 30.3 The Euler Step The previous section a visualization of an integral in terms of an area on a graph. As you know, a definite integral \\(\\int_a^b f(t) dt\\) can also be computed by constructing the anti-derivative \\(F(t) \\equiv \\int f(t) dt\\) and evaluating it at the upper and lower bounds of integration: \\(F(b) - F(a)\\). In this section, we’ll look at the numerical process of constructing an anti-derivative function, which uses many of the same concepts as those involved in finding an integral by combining areas of rectangles. A definite integral produces a quantity, not a function. The anti-derivative function constructed by using quantities like \\(f(t) dt\\) will be a series of quantities rather than a formula. In particular, it will have the form of a data table, something like this: \\(t\\) \\(F(t)\\) -2 10.62 -1.5 6.47 -1 3.51 -0.5 2.02 0 2.4 0.5 3.18 1.0 5.14 \\(\\vdots\\) \\(\\vdots\\) To start, we’ll need to create a series of \\(t\\) values. We’ll do this by specifying a starting value for \\(t\\) and then creating successive values by adding a numerical increment \\(dt\\) to the entries one after the other until we reach a terminating value. For instance, in the above table, the starting value for \\(t\\) is \\(-2\\), the numerical increment is \\(dt=0.5\\), and the terminating value is \\(1\\). In previous chapters of this book we have worked with data tables, but always the data table was given to us, we did not have to construct it.50 Now we need to construct the data frame with the \\(t\\) column containing appropriate values. Computer languages provide many ways to accomplish this task. We’ll use a simple R/mosaic function Picket(), which constructs a data table like the one shown above. You provide two arguments: the domain for \\(t\\), that is, the desired upper and lower bounds of integration; the interval size \\(dt\\) (which is called h in the argument list). For instance, to construct the \\(t\\) column of the table shown above, you can use Picket() this way: Pts &lt;- Picket(domain(t = -2:1), h=0.5) Pts ## # A tibble: 6 × 3 ## t preweight weight ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -2 1 0.5 ## 2 -1.5 1 0.5 ## 3 -1 1 0.5 ## 4 -0.5 1 0.5 ## 5 0 1 0.5 ## 6 0.5 1 0.5 As you can see, the data table produced by Picket() has the \\(t\\) column, as well as a second column named weight. We haven’t explained weight yet, but you can see that it is the same value we specified as h. The name Picket() is motivated by the shape of a picket fence. The pickets are evenly spaced, which keeps things simple but is not a requirement. Note that the picket does not say anything at all about the function \\(f(t)\\) being anti-differentiated. The picket can be applied to any function although precision might require a smaller \\(dt\\) for functions that have a lot going on in a small domain. The next step in using the picket to perform anti-differentiation is to apply the function \\(f()\\) to the pickets. That is, we’ll add a new column, perhaps called vals to the data table. Adding a new column is a common task when dealing with data. We’ll do this with a new function, mutate(), whose specific function is adding new columns (or modifying old ones). Here’s the command to apply \\(f()\\) to t and call the new column vals: # Find the height of the pickets Pts &lt;- Pts %&gt;% mutate(vals = f(t)) With this modification, the data table looks like: ## # A tibble: 6 × 4 ## t preweight weight vals ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -2 1 0.5 -9.12 ## 2 -1.5 1 0.5 -7.27 ## 3 -1 1 0.5 -4.50 ## 4 -0.5 1 0.5 -1.46 ## 5 0 1 0.5 1.28 ## 6 0.5 1 0.5 3.31 Now that we know the value of the function at each of the pickets, the next step is to multiply the value by the spacing between pickets. That spacing, which we set with the argument h = 0.5 in our original call to Picket() is in the column called weight. We’ll call the result of the multiplication step. Note that the following R command incorporates the previous calculation of vals; we’re looking to build up a single command that will do all the work. # Multiply the height by the picket spacing Pts &lt;- Pts %&gt;% mutate(vals = f(t), step = vals * weight) Pts ## # A tibble: 6 × 5 ## t preweight weight vals step ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -2 1 0.5 -9.12 -4.56 ## 2 -1.5 1 0.5 -7.27 -3.63 ## 3 -1 1 0.5 -4.50 -2.25 ## 4 -0.5 1 0.5 -1.46 -0.732 ## 5 0 1 0.5 1.28 0.639 ## 6 0.5 1 0.5 3.31 1.66 We used the name step to identify the product of the height and spacing of the pickets to help you think about the overall calculation as accumulating a series of steps. Each step provides a little more information about the anti-derivative that we will now calculate. In terms of the area metaphor for integration, each step is the area of one vertical bar of the sort presented in the previous section. We’ll call these Euler steps, a term that will be especially appropriate when, in Block 6, we use integration to calculate the trajectories of systems—such as a ball in flight—that change in time. The final step in constructing the anti-derivative is to add up the steps. This is simple addition. But we’ll arrange the addition one step at a time. That is, for the second row, the result will be the sum of the first two steps. For the third row, the result will be the sum of the first three steps. And so on. The name for this sort of accumulation of the previous steps is called a cumulative sum. Another name for a cumulative sum is a “running sum”: the sum-so-far as we move down the column of steps. Cumulative sums are computed in R by using cumsum(). Here, we’re calling the result of the cumulative sum F to emphasize that it is the result of anti-differentiating \\(f()\\). But keep in mind that the anti-derivative is not just the F column, but the table with both t and F columns. That is, the table has a column for the input as well as the output. That’s what it takes to be a function. # Doing everything in one command Pts &lt;- Picket(domain(t = -2:1), h=0.5) %&gt;% mutate(vals = f(t), step = vals * weight, F = cumsum(step)) ## # A tibble: 6 × 6 ## t preweight weight vals step F ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -2 1 0.5 -9.12 -4.56 -4.56 ## 2 -1.5 1 0.5 -7.27 -3.63 -8.19 ## 3 -1 1 0.5 -4.50 -2.25 -10.4 ## 4 -0.5 1 0.5 -1.46 -0.732 -11.2 ## 5 0 1 0.5 1.28 0.639 -10.5 ## 6 0.5 1 0.5 3.31 1.66 -8.88 We can summarize the steps in this Euler approach to numerical integration graphically: ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. Figure 30.5: Steps in a numerical construction of an anti-derivative. (1) Create a set of picket locations over the domain of interest. The locations are spread horizontally by amount dt, so each picket will be dt units wide. (2) evaluate the original function at the picket points to give picket heights. (3) Multiply the picket height by the picket width to create an “area.” (4) Starting at zero for the left-most picket, add in successive picket areas to construct the points on the anti-derivative function (green). Note that the vertical axis in (4) has a different dimension and units than in steps (1)-(3). In (4) the vertical scale is in the units of the anti-derivative function output. 30.4 Better numerics (optional) Except as a textbook exercise, you will likely never have to compute a numerical anti-derivative from scratch as we did in the previous section. This is a good thing. To understand why, you have to know one of the important features of modern technical work. That feature is: We never work alone in technical matters. There is always a set of people whose previous work we are building on, even if we never know the names of those people. This is because technology is complicated and it is evidently beyond the reach of any human to master all the salient aspects of each piece of technology being incorporated into the work we consider our own. Of course this is true for computers, since no individual can build a useful computer from first principles. It’s also true for software. One detail in particular is relevant to us here. Computer arithmetic of the sort used in the previous section—particularly addition—is prone to error when adding up lots and lots of small bits. This means that it is not always sensible to choose very small \\(dt\\) in order to get a very accurate approximation to the anti-derivative. Fortunately, there are specialists in numerical mathematics who work on ways to improve the accuracy of calculations for mid-sized \\(dt\\). Their work has been incorporated into the results of antiD() and Integrate() and so the details are, for us, unimportant. But they are only unimportant because they have been taken care of. To illustrate how considerably more accuracy can be gained in calculating an anti-derivative, consider that the rectangular bars drawn in the previous sections are intended to approximate the “area” under the function. With this in mind, we can replace the rectangular bars with more suitable shapes that stay closer to the function over the finite extend of each \\(dt\\) domain. The rectangular bars model the function as piecewise constant. A better job can be done with piecewise linear approximations or piecewise quadratic approximations. Often, such refinements can be implemented merely by changing the weight column in the picket data frame used to start off the process. One widely used method, called Gauss-Legendre quadrature can calculate a large segment of an integral accurately (under conditions that are common in practice) with just five evaluations of the integrand \\(f(t)\\). For the integral \\(\\int_a^b f(t) dt\\) the picket locations and weights have these values: location weight \\(c - 0.90618 w\\) \\(0.236927 \\times w\\) \\(c - 0.53847 w\\) \\(0.478629 \\times w\\) \\(c\\) \\(0.568889 \\times w\\) \\(c + 0.53847 w\\) \\(0.478629 \\times w\\) \\(c + 0.90618 w\\) \\(0.236927 \\times w\\) where \\(c = \\frac{a+b}{2}\\) and \\(w = (b-a)/2\\). The locations and weights may seem like a wizard parody of mathematics, but those precise values are founded in an advanced formulation of polynomials rooted in the theory of linear combinations to which you’ll be introduced in Block 5. Needless to say, you can hardly be expected to have any idea where they come from. That’s why it’s useful to build on the work of experts in specialized areas. It’s particularly helpful when such expertise is incorporated into software that faithfully and reliably implements the methods. The lesson to take to heart: Use professional software systems that have been extensively vetted. 30.5 Exercises Exercise 30.02: ady5Fh The output of a function, being a quantity, has dimension and units. Suppose the dimension of the output of a function \\(v(t)\\) is \\(L/T\\), for instance, meters-per-second. The anti-derivative function \\(V(t) \\equiv \\int v(t) dt\\) will also have dimension and units. Recall that in constructing the anti-derivative using the Euler method, we multiply the values of \\(v(t)\\) times some small increment in the input, \\(h\\). Therefore the dimension of the output of \\(V(t)\\) will be \\([v(t)] [t]\\). So if \\([v(t)] = L/T\\), the dimension \\([V(t)] [t] = L T/T = L\\). Units for such a dimension would be, for instance, meters. This makes sense, since if you accumulate velocity (meters-per-sec) over an interval of time (sec) you end up with the distance travelled (meters). Suppose you know the acceleration \\(a(t)\\) of an object as a function of time. The dimension of acceleration is \\(L/T^2\\). askMC( &quot;What is the dimension of $$\\\\int a(t) dt\\\\ \\\\text{?}$$&quot;, &quot;$L/T^3$&quot;, &quot;$L$&quot;, &quot;$LT$&quot;, &quot;+$L/T$+&quot;, &quot;$LT^2$&quot; ) Question A What is the dimension of \\[\\int a(t) dt\\ \\text{?}\\]     \\(L/T^3\\)︎✘        \\(L\\)︎✘        \\(LT\\)︎✘        \\(L/T\\)\\(\\heartsuit\\ \\)       \\(LT^2\\)︎✘ Suppose you know the power consumed by an appliance \\(p(t)\\) as a function of time. Typically appliances have a cycle and use different amounts of power during different parts of the cycle. (Think of a clothes washer.) askMC( &quot;What will be the dimension of $\\\\int p(t) dt\\\\ \\\\text{?}$&quot;, &quot;+energy+&quot;, &quot;force&quot;, &quot;acceleration&quot;, &quot;length&quot; ) Question B What will be the dimension of \\(\\int p(t) dt\\ \\text{?}\\)     energy\\(\\heartsuit\\ \\)       force︎✘        acceleration︎✘        length︎✘ Exercise 30.04: CCwWGB In this activity, you are going to use the “Graph-antiD” web app which enables you to visualize the anti-derivative function in terms of areas. To use the app, click-drag-and-release to mark part of the domain of the function being displayed. Add a picture of the app and a link to it. To answer these questions correctly, you must set the “Shape of function” box to 864. askMC( &quot;A. From the graph, roughly estimate $$\\\\int_0^3 f(t)dt$$ Choose the closest numerical value from the following. You could use either graph for this caclulation, but $F(t)$ will be simpler algebra.&quot;, -46, -26, &quot;0&quot;=&quot;F(t) has a net change over the interval&quot;, &quot;3&quot;=&quot;there is more stock at F(3) than F(0)&quot;, &quot;19&quot;=&quot;there is more stock at F(3) than F(0)&quot;, &quot;26&quot;=&quot;F(t) at the right end of the interval is lower than at the left end&quot;, right_one = -26, random_answer_order = FALSE ) Question A A. From the graph, roughly estimate \\[\\int_0^3 f(t)dt\\] Choose the closest numerical value from the following. You could use either graph for this caclulation, but \\(F(t)\\) will be simpler algebra. -46︎✘ -26Right!  0︎✘ F(t) has a net change over the interval 3︎✘ there is more stock at F(3) than F(0) 19︎✘ there is more stock at F(3) than F(0) 26︎✘ F(t) at the right end of the interval is lower than at the left end askMC( &quot;B. In order to construct the anti-derivative whose value at time $t=-3$ will be zero, what constant of integration $C$ should you **add** to the $F(t)$ shown.&quot;, &quot;-120&quot;= &quot;Would adding this to F(-3) be equal to 0?&quot;, &quot;-80&quot;= &quot;Would adding this to F(-3) be equal to 0?&quot;, &quot;-50&quot;= &quot;Would adding this to F(-3) be equal to 0?&quot;, &quot;0&quot;= &quot;Would adding this to F(-3) be equal to 0?&quot;, &quot;50&quot; = &quot;Would adding this to F(-3) be equal to 0?&quot;, &quot;80&quot; = &quot;Are you sure you have the sign right?&quot;, &quot;120&quot; = &quot;Would adding this to F(-3) be equal to 0?&quot;, right_one = -80, random_answer_order = FALSE ) Question B B. In order to construct the anti-derivative whose value at time \\(t=-3\\) will be zero, what constant of integration \\(C\\) should you add to the \\(F(t)\\) shown. -120︎✘ Would adding this to F(-3) be equal to 0? -80Correct. Would adding this to F(-3) be equal to 0? -50︎✘ Would adding this to F(-3) be equal to 0? 0︎✘ Would adding this to F(-3) be equal to 0? 50︎✘ Would adding this to F(-3) be equal to 0? 80︎✘ Are you sure you have the sign right? 120︎✘ Would adding this to F(-3) be equal to 0? askMC( &quot;C. Examining the stock at time $t=0$, you observe that there are 40 units. Roughly how much stock will there be at $t=5$?&quot;, &quot;-25&quot; = &quot;Did you shift the curve in the right direction?&quot;, &quot;-15&quot; = &quot;That would be the answer if there had been 0 units of stock at time $t=0$.&quot;,&quot;0&quot;=&quot;Imagine F(t) being shifted by the difference of 40 and F(0)&quot;, &quot;15&quot;=&quot;Imagine F(t) being shifted by the difference of 40 and F(0)&quot;, 25, right_one=25, random_answer_order = FALSE ) Question C C. Examining the stock at time \\(t=0\\), you observe that there are 40 units. Roughly how much stock will there be at \\(t=5\\)? -25︎✘ Did you shift the curve in the right direction? -15︎✘ That would be the answer if there had been 0 units of stock at time \\(t=0\\). 0︎✘ Imagine F(t) being shifted by the difference of 40 and F(0) 15︎✘ Imagine F(t) being shifted by the difference of 40 and F(0) 25Right!  askMC( &quot;D. You start with a stock of 100 units at time $t = -2$. At roughly what time $t$ will the stock be half of this?&quot;, &quot;-1.2&quot;=&quot;$F(t)$-$F(a)$=50, what is the value of a?&quot;, -0.3, &quot;0.5&quot;=&quot;$F(t)$-$F(a)$=50, what is the value of a?&quot;, &quot;1.2&quot;=&quot;$F(t)$-$F(a)$=50, what is the value of a?&quot;, &quot;1.8&quot;=&quot;$F(t)$-$F(a)$=50, what is the value of a?&quot;, &quot;The stock will never fall so low.&quot;, right_one = -0.3, random_answer_order = FALSE ) Question D D. You start with a stock of 100 units at time \\(t = -2\\). At roughly what time \\(t\\) will the stock be half of this? -1.2︎✘ \\(F(t)\\)-\\(F(a)\\)=50, what is the value of a? -0.3Correct.  0.5︎✘ \\(F(t)\\)-\\(F(a)\\)=50, what is the value of a? 1.2︎✘ \\(F(t)\\)-\\(F(a)\\)=50, what is the value of a? 1.8︎✘ \\(F(t)\\)-\\(F(a)\\)=50, what is the value of a? The stock will never fall so low.︎✘ askMC( &quot;E. Your stock finally runs out at time $t=2.5$. When did you have 120 units in stock?&quot;, &quot;+$t=-4$+&quot;, &quot;$t=-3$&quot;=&quot;This uses a similiar approach to the last question.&quot;, &quot;$t=0$&quot;=&quot;This uses a similiar approach to the last question.&quot;, &quot;There was never such a time.&quot; ) Question E E. Your stock finally runs out at time \\(t=2.5\\). When did you have 120 units in stock? \\(t=-4\\)Nice!  \\(t=-3\\)︎✘ This uses a similiar approach to the last question. \\(t=0\\)︎✘ This uses a similiar approach to the last question. There was never such a time.︎✘ askMC( &quot;F. After decreasing for a long time, the stock finally starts to increase from about $t=2.5$ onward. What about $f(t=2.5)$ tells you that $F(t=2.5)$ is increasing?&quot;, &quot;The derivative is at a minimum.&quot;=&quot;Does this mean $F(t)$ must be increasing?&quot;, &quot;The derivative is negative&quot;=&quot;Does this mean $F(t)$ must be increasing?&quot;, &quot;The derivative is near zero.&quot; = &quot;Kind of. For the stock $F(t)$ to increase, what has to be true of the derivative at that instant.&quot;, &quot;+The derivative becomes positive and stays positive.+&quot;, &quot;The derivative is at a maximum.&quot;=&quot;Does this mean $F(t)$ must be increasing?&quot;, random_answer_order = FALSE ) Question F F. After decreasing for a long time, the stock finally starts to increase from about \\(t=2.5\\) onward. What about \\(f(t=2.5)\\) tells you that \\(F(t=2.5)\\) is increasing? The derivative is at a minimum.︎✘ Does this mean \\(F(t)\\) must be increasing? The derivative is negative︎✘ Does this mean \\(F(t)\\) must be increasing? The derivative is near zero.︎✘ Kind of. For the stock \\(F(t)\\) to increase, what has to be true of the derivative at that instant. The derivative becomes positive and stays positive.Correct.  The derivative is at a maximum.︎✘ Does this mean \\(F(t)\\) must be increasing? askMC( &quot;G. Find the argmin $t^\\\\star$ of $f(t)$ and note the sign of $f(t^\\\\star).$ What does this tell you about $F(t^\\\\star)$.&quot;, &quot;$t^\\\\star$ is also the argmin of $F()$.&quot;=&quot;look at the corresponding point on $F(t)$.&quot;, &quot;+$F(t^\\\\star)$ is decreasing at its steepest rate.+&quot;, &quot;$F(t^\\\\star)$ is increasing at it&#39;s slowest rate.&quot;=&quot;look at the corresponding point on $F(t)$.&quot;, &quot;$F(t^\\\\star)$ is increasing at its steepest rate.&quot;=&quot;look at the corresponding point on $F(t)$.&quot;, &quot;$t^\\\\star$ is the argmax of $F()$&quot;=&quot;look at the corresponding point on $F(t)$.&quot; ) Question G G. Find the argmin \\(t^\\star\\) of \\(f(t)\\) and note the sign of \\(f(t^\\star).\\) What does this tell you about \\(F(t^\\star)\\). \\(t^\\star\\) is also the argmin of \\(F()\\).︎✘ look at the corresponding point on \\(F(t)\\). \\(F(t^\\star)\\) is decreasing at its steepest rate.Right!  \\(F(t^\\star)\\) is increasing at it’s slowest rate.︎✘ look at the corresponding point on \\(F(t)\\). \\(F(t^\\star)\\) is increasing at its steepest rate.︎✘ look at the corresponding point on \\(F(t)\\). \\(t^\\star\\) is the argmax of \\(F()\\)︎✘ look at the corresponding point on \\(F(t)\\). askMC( &quot;H. What is the average flow into stock over the period $-5 \\\\leq t \\\\leq 1$. (If the flow is *outward from stock*, that&#39;s the same as a negative inward flow.)&quot;, -30, -20, &quot;0&quot; = &quot;But you can see that the stock is diminishing steadily during $-5 \\\\leq t \\\\leq 1$, so how could the average flow be zero.&quot;, &quot;10&quot;, right_one = -20, random_answer_order = FALSE ) Question H H. What is the average flow into stock over the period \\(-5 \\leq t \\leq 1\\). (If the flow is outward from stock, that’s the same as a negative inward flow.) -30︎✘ -20Excellent!  0︎✘ But you can see that the stock is diminishing steadily during \\(-5 \\leq t \\leq 1\\), so how could the average flow be zero. 10︎✘ askMC( &quot;I. Which of the following is an interval when the average flow is approximately zero?&quot;, &quot;$-1.3 \\\\leq t \\\\leq 1.1$&quot;=&quot;The area appears to be negative.&quot;, &quot;+$0.8 \\\\leq t \\\\leq 5$+&quot;, &quot;$-5 \\\\leq t \\\\leq 0$&quot;=&quot;The area appears to be negative.&quot;, &quot;None of the above&quot;, random_answer_order = FALSE ) Question I I. Which of the following is an interval when the average flow is approximately zero? \\(-1.3 \\leq t \\leq 1.1\\)︎✘ The area appears to be negative. \\(0.8 \\leq t \\leq 5\\)Right!  \\(-5 \\leq t \\leq 0\\)︎✘ The area appears to be negative. None of the above︎✘ askMC( &quot;J. From the graph, estimate $$\\\\int_2^{-4} f(t)dt$$ Choose the closest numerical value from the following.&quot;, &quot;-120&quot; = &quot;Pay attention to the order of the limits of integration.&quot;, -60, 60, 120, &quot;None of these answers are close to being right.&quot;, right_one = 120, random_answer_order = FALSE ) Question J J. From the graph, estimate \\[\\int_2^{-4} f(t)dt\\] Choose the closest numerical value from the following. -120︎✘ Pay attention to the order of the limits of integration. -60︎✘ 60︎✘ 120Good.  None of these answers are close to being right.︎✘ Exercise 30.06: rk5PPK Consider this function, \\(f(t)\\): tmp &lt;- rfun(~ t, seed = 2304) f &lt;- makeFun( tmp( (t-5)) - 15 ~ t) F &lt;- antiD(f(t) ~ t) dt &lt;- 0.1 Slabs &lt;- tibble::tibble( t = seq(0, 10, by = dt), tend = t + dt, y = f(t), ymid = f(t + dt/2), color = ifelse(y &gt; 0, &quot;orange&quot;, &quot;dodgerblue&quot;) ) gf_rect(0 + ymid ~ t + tend, data = Slabs, fill = ~ color, color = NA, alpha = 0.3, inherit=FALSE) %&gt;% gf_path(y ~ t, group=NA, size=1.5) %&gt;% gf_hline(yintercept = 0, color = &quot;orange3&quot;) %&gt;% gf_refine( scale_y_continuous( breaks = c(0, -10, 10, 20), labels=c(&quot;0&quot;, &quot;neg&quot;, &quot;pos&quot;, &quot;&quot;)), scale_x_continuous(breaks=0:10), scale_fill_identity() ) %&gt;% gf_labs(y=&quot;f(t)&quot;, title=&quot;Black curve shows f(t)&quot;) %&gt;% gf_theme(theme(legend.position = &quot;none&quot;)) Assume that the “area” of each small box on the graph is the product of 1 Watt \\(\\times\\) 1 second. askMC( &quot;What is $$\\\\int_1^2 f(t) dt\\\\ \\\\text{?}$$ (Choose the closest answer. The units are in Watt-seconds.)&quot;, -3.2, &quot;-1.4&quot;=&quot;Count the boxes in the interval&quot;, &quot;0&quot;=&quot;Count the boxes in the interval&quot;, &quot;2.5&quot;=&quot;Count the boxes in the interval&quot;, &quot;3.3&quot; = &quot;That&#39;s a pretty good count of boxes, but still not the right answer.&quot;, 6.1, right_one = -3.2, random_answer_order = FALSE ) Question A What is \\[\\int_1^2 f(t) dt\\ \\text{?}\\] (Choose the closest answer. The units are in Watt-seconds.) -3.2Good.  -1.4︎✘ Count the boxes in the interval 0︎✘ Count the boxes in the interval 2.5︎✘ Count the boxes in the interval 3.3︎✘ That’s a pretty good count of boxes, but still not the right answer. 6.1︎✘ \\[\\text{Let}\\ \\ A = \\int_1^3 f(x) dx\\ \\ \\ \\text{and}\\ \\ \\ B = \\int_2^4 f(x) dx\\] askMC( &quot;Which is bigger, A or B?&quot;, &quot;A&quot;, &quot;B&quot;, &quot;They are the same size&quot;, right_one = &quot;B&quot;, random_answer_order = FALSE ) Question B Which is bigger, A or B?     A︎✘        B\\(\\heartsuit\\ \\)       They are the same size︎✘ \\[\\text{Let}\\ \\ A = \\int_3^1 f(t) dt\\ \\ \\ \\text{and}\\ \\ \\ B = \\int_4^2 f(t) dt\\] askMC( &quot;Which is bigger, A or B?&quot;, &quot;A&quot;, &quot;B&quot;, &quot;They are the same size&quot;, right_one = &quot;A&quot;, random_answer_order = FALSE ) Question C Which is bigger, A or B?     A\\(\\heartsuit\\ \\)       B︎✘        They are the same size︎✘ Consider the function \\[g(x) \\equiv \\int_4^x f(t) dt\\] for the next three questions askMC( &quot;Which is bigger, $g(8)$ or $g(9)$?&quot;, &quot;+$g(8)$+&quot;, &quot;$g(9)$&quot;=&quot;the interval from 8 to 9 decreases the total size&quot;, &quot;They are the same size&quot;, &quot;Trick question! There can be no such function $g(x)$ since $f()$ is a function of $t$&quot; = &quot;Try plugging in $x=8$ on the right side of the definition and see if it makes sense.&quot; ) Question D Which is bigger, \\(g(8)\\) or \\(g(9)\\)? \\(g(8)\\)Correct.  \\(g(9)\\)︎✘ the interval from 8 to 9 decreases the total size They are the same size︎✘ Trick question! There can be no such function \\(g(x)\\) since \\(f()\\) is a function of \\(t\\)︎✘ Try plugging in \\(x=8\\) on the right side of the definition and see if it makes sense. askMC( &quot;Is $g(2.5)$ positive or negative?&quot;, &quot;positive&quot; = &quot;The function being integrated, $f(t)$, is positive over the interval $2.5 \\\\leq t \\\\leq 4$. Since the lower limit $t=4$ is larger than the upper limit $t=2.5$, the $\\\\int_4^{2.5} f(t)dt$ is negative.&quot;, &quot;zero&quot;, &quot;+negative+&quot; ) Question E Is \\(g(2.5)\\) positive or negative? positive︎✘ The function being integrated, \\(f(t)\\), is positive over the interval \\(2.5 \\leq t \\leq 4\\). Since the lower limit \\(t=4\\) is larger than the upper limit \\(t=2.5\\), the \\(\\int_4^{2.5} f(t)dt\\) is negative. zero︎✘ negativeRight!  askMC( &quot;At what value of $x$ is $g(x) = 0$?&quot;, &quot;2&quot;=&quot;There is still area under the curve for this interval&quot;, &quot;3&quot;=&quot;There is still area under the curve for this interval&quot;, &quot;4&quot; = &quot;When the two limits of integration are the same, the definite integral is *always* zero.&quot;, &quot;5&quot;=&quot;There is still area under the curve for this interval&quot;, &quot;6&quot;=&quot;There is still area under the curve for this interval&quot;, &quot;7&quot;=&quot;There is still area under the curve for this interval&quot;, &quot;8&quot;=&quot;There is still area under the curve for this interval&quot;, right_one = 4, random_answer_order = FALSE ) Question F At what value of \\(x\\) is \\(g(x) = 0\\)? 2︎✘ There is still area under the curve for this interval 3︎✘ There is still area under the curve for this interval 4Right! When the two limits of integration are the same, the definite integral is always zero. 5︎✘ There is still area under the curve for this interval 6︎✘ There is still area under the curve for this interval 7︎✘ There is still area under the curve for this interval 8︎✘ There is still area under the curve for this interval \\[\\text{Let}\\ \\ h(x) \\equiv \\int_0^x f(t) dt\\] askMC( &quot;At what value of $x$ is $h(x) \\\\approx 0$?&quot;, &quot;1&quot;=&quot;consider when positive and negative areas are equal in magnitude.&quot;, &quot;2&quot;=&quot;consider when positive and negative areas are equal in magnitude.&quot;, &quot;3&quot;=&quot;consider when positive and negative areas are equal in magnitude.&quot;, 4, &quot;5&quot;=&quot;consider when positive and negative areas are equal in magnitude.&quot;, &quot;6&quot;=&quot;consider when positive and negative areas are equal in magnitude.&quot;, right_one = 4, random_answer_order = FALSE ) Question G At what value of \\(x\\) is \\(h(x) \\approx 0\\)? 1︎✘ consider when positive and negative areas are equal in magnitude. 2︎✘ consider when positive and negative areas are equal in magnitude. 3︎✘ consider when positive and negative areas are equal in magnitude. 4Nice!  5︎✘ consider when positive and negative areas are equal in magnitude. 6︎✘ consider when positive and negative areas are equal in magnitude. \\(\\partial_x h(x)\\) is a function. When we write \\(\\partial_x h(3)\\) we mean to evaluate that function for an input value of \\(x=3\\). askMC( &quot;Which is bigger, $\\\\partial_x h(3)$ or $\\\\partial_x h(4)$?&quot;, &quot;$\\\\partial_x h(3)$&quot;=&quot;remember $f(t) is essentially the derivative of $h(x)$ with respect to x.&quot;,&quot;+$\\\\partial_x h(4)$+&quot;, &quot;Can&#39;t tell.&quot; ) Question H Which is bigger, \\(\\partial_x h(3)\\) or \\(\\partial_x h(4)\\)? \\(\\partial_x h(3)\\)︎✘ remember $f(t) is essentially the derivative of \\(h(x)\\) with respect to x. \\(\\partial_x h(4)\\)Nice!  Can’t tell.︎✘ \\[\\text{Let}\\ \\ y(x) \\equiv \\int_4^x f(t) dt\\] Here are four different graphs. slice_plot(F(x) - F(4) ~ x, domain(x=c(0:10))) %&gt;% gf_labs(title = &quot;(A)&quot;) slice_plot(F(4) - F(x) ~ x, domain(x=c(0:10))) %&gt;% gf_labs(title = &quot;(B)&quot;) slice_plot(F(6) - F(x) ~ x, domain(x=c(0:10))) %&gt;% gf_labs(title = &quot;(C)&quot;) slice_plot(abs(F(4) - F(x)) ~ x, domain(x=c(0:10))) %&gt;% gf_labs(title = &quot;(D)&quot;) askMC( &quot;Which of the graphs shows $y(x)$?&quot;, &quot;A&quot;, &quot;B&quot;=&quot;Should it increase or decrease after the point crosses the x-axis?&quot;, &quot;C&quot;=&quot;Should it increase or decrease after the point crosses the x-axis?&quot;, &quot;D&quot;=&quot;When should the graph equal 0?&quot;, right_one = &quot;A&quot;, random_answer_order = FALSE ) Question I Which of the graphs shows \\(y(x)\\)? ANice!  B︎✘ Should it increase or decrease after the point crosses the x-axis? C︎✘ Should it increase or decrease after the point crosses the x-axis? D︎✘ When should the graph equal 0? Exercise 30.08: 9W6VB Using the Euler method find \\(\\int f(t) dt\\) over the interval \\(t_0=0\\) to \\(t_{end}=1\\). The \\(t\\) quantity is in steps of \\(h=0.01\\). \\(t\\) \\(\\partial_t f(t)\\) \\(\\int f(t) dt\\) 0 0.399 0.5 0.01 0.242 0.02 0.054 0.03 | 0.399 | Exercise 30.10: 3IU9R Consider this sequence: 4, 5, 3, 1, 2 Question A What is the sum? 14︎✘ 15Excellent! Yes, we know you can add. We just wanted you to keep in mind what the sum is for the next question, which is just about as easy. 16︎✘ 17︎✘ Question B What is the cumulative sum? The sequence 4, 9, 12, 13, 15Right!  The sequence 2, 3, 6, 11, 15︎✘ That’s backwards! The sequence 0, 4, 9, 13, 15︎✘ The first number in the original sequence is 4, so the cumulative sum will start with that. Question C Which entry in the cumulative sum matches the sum?     The first︎✘        The last\\(\\heartsuit\\ \\)       None of them︎✘        All of them︎✘ Exercise 30.12: ljCxcH The result of applying the Euler method to a function is also another function, but it comes in the form of a vector of numbers all ready to be displayed graphically. So keep in mind the the function produced by Euler will be known only over a specified domain, just as the graph of a function covers only the specified domain. For instance, here is the graph of the natural logarithm function over the domain \\(1 \\leq x \\leq 21\\). slice_plot(log(x) ~ x, domain(x=c(1,21)), npts=11) %&gt;% gf_point() The command in the sandbox is a little different than the usual slice_plot(). We’ve added on two things: An argument npts=11 which says to use 11 discrete values of the input in plotting the graph. A second graphics layer that shows a dot at each input point where slice_plot() evaluated the function. Behind the seemingly smooth curves that slice_plot() produces is really a discrete set of points each of which is the output of the function at some numerical input. In our typical use of slice_plot() we leave out the dots and show only the straight line segments that connect the positions where the dots would be plotted. If the positions are spaced closely enough, your eye will not see the joints between successive straight lines and you will perceive the graph as a smooth curve. Question A For the graph of the log function over the domain \\(1 \\leq x \\leq 21\\) with npts=11 (that is, the initial command shown in the sandbox), what is the horizontal spacing between the discrete \\(x\\) values?     0.5︎✘        1︎✘        2\\(\\heartsuit\\ \\)       4︎✘        5︎✘ Now take away the npts= argument. This will implicitly set npts to a default value, which is what we have been using for most plots in this course. Question B What is the default value of npts in slice_plot()?     25︎✘        50︎✘        100\\(\\heartsuit\\ \\)       200︎✘        500︎✘        1000︎✘ We could use a much larger value for npts, but there is no reason so long as a smaller value produces a graph faithful to the function being graphed. Keeping the domain the same, \\(1 \\leq x \\leq 21\\), plot out a sinusoid with a period of 0.3 using the default npts: \\(g(x) \\equiv \\sin(2\\pi x/0.3)\\). The graph, which shows about 67 cycles of the sinusoid, will not look much like a sinusoid. In particular, although the sine function should reach from -1 to 1 over each cycle, the graph does not. Question C How large should npts be in order for each of the 67 cycles in the graph to come close enough to -1 and 1 that you cannot easily see the discrepancy?     125︎✘        150︎✘        200︎✘        400︎✘        800\\(\\heartsuit\\ \\)       1600︎✘        3200︎✘ Exercise 30.14: rfO0EG Methods such as Euler are tedious, ideal for the computer. So let’s look at some basic R functions for implementing the Euler Method when we know the function to be anti-differentiated \\(f(x)\\), the step size \\(h\\), and the domain \\(a \\leq x \\leq b\\). At the heart of the implementation is a function cumsum(), the “cumulative sum.” This does something very simple. The cumulative sum of the sequence 1, 2, 3, 4 is another sequence: 1, 3, 6, 10. The following code has commands for using cumsum() to approximate the anti-derivative of a function \\(f()\\) over the domain \\(a \\leq x \\leq b\\) f &lt;- makeFun(sin(2*pi*x/0.3) ~ x) # the function to be anti-differentiated. a &lt;- 1 # the lower bound. b &lt;- 2 # the upper bound. h &lt;- 0.01 # the step size x_discrete &lt;- seq(a, b, by = h) # all of the discrete x values based on a, b, and h f_discrete &lt;- f(x_discrete) # all of the values of f(x) when the discrete x values are used as the input F_discrete &lt;- cumsum(h * f_discrete) # the discrete values of the anti-derivative, F(x) gf_point(F_discrete ~ x_discrete) %&gt;% slice_plot(f(x) ~ x, color = &quot;gray&quot;, domain(x=c(a,b))) Here is a function: g &lt;- makeFun(exp(-0.2*(x^2))~x) Using a SANDBOX, find and plot the anti-derivative of \\(g(x)\\) over the domain \\(-6 \\leq x \\leq 6\\). Your task: Describe the shape of \\(G(x)\\). Your description can be one word from earlier in the book, if you choose it carefully. If your graph looks like a straight line, you did not appropriately change the domain above. ECONOMIST PICTURES https://www.economist.com/img/b/600/653/90/sites/default/files/images/print-edition/20210710_EUC776.png knitr::include_graphics(&quot;www/sputnik.png&quot;) https://www.economist.com/img/b/600/653/90/sites/default/files/images/print-edition/20210710_BRC783.png knitr::include_graphics(&quot;www/NHS.png&quot;) https://www.economist.com/img/b/600/653/90/sites/default/files/images/print-edition/20210710_EUC775.png knitr::include_graphics(&quot;www/Turkish-lira.png&quot;) The root of the word “data” is the Latin for “given.”↩︎ "],["accum-symbolic.html", "Chapter 31 Symbolic anti-differentiation 31.1 The cataloged functions 31.2 Differentials 31.3 U-substitution 31.4 Integration by parts 31.5 Integrating polynomials 31.6 Polynomials 31.7 Exercises", " Chapter 31 Symbolic anti-differentiation You have already learned how to write down, by sight, the anti-derivative of the many of the pattern-book functions. As a reminder, here is an (almost) complete list of the derivatives and anti-derivatives of the pattern-book functions. \\(\\partial_x f(x)\\) \\(f(x)\\) \\(\\int f(x) dx\\) \\(e^x\\) \\(e^x\\) \\(e^x\\) \\(\\sin(x+\\pi/2)\\) \\(sin(x)\\) \\(\\sin(x - \\pi/2)\\) \\(p x^{p-1}\\) power-law \\(x^p\\) \\(\\frac{1}{p+1} x^{p+1}\\) \\(\\ \\ \\ \\ 2x\\) \\(\\ \\ \\ \\ x^2\\) \\(\\frac{1}{3} x^3\\) \\(\\ \\ \\ \\ 1\\) \\(\\ \\ \\ \\ x\\) \\(\\frac{1}{2} x^2\\) \\(\\ \\ \\ \\ 0\\) \\(\\ \\ \\ \\ 1\\) \\(x\\) \\(\\ \\ \\ \\ -x^{-2}\\) \\(\\ \\ \\ \\ 1/x\\) \\(\\ln(x)\\) \\(1/x\\) \\(\\ln(x)\\) \\(x \\left(\\strut\\ln(x) - 1\\right)\\) \\(-x \\dnorm(x)\\) \\(\\dnorm(x)\\) \\(\\pnorm()\\) \\(\\dnorm(x)\\) \\(\\pnorm(x)\\) See below. You can see that the derivatives and anti-derivatives of the pattern-book functions can be written in terms of the pattern-book functions. The left column contains the symbolic derivatives of the pattern book functions. The right column contains the symbolic anti-derivatives. We call them “symbolic,” because they are written down with the same kind of symbols that we use for writing the pattern-book functions themselves.51 We’re stretching things a bit by including \\(\\dnorm(x)\\) and \\(\\pnorm(x)\\) among the functions that can be integrated symbolically. As you’ll see later, \\(\\dnorm(x)\\) is special when it comes to integration. Think of the above table as the “basic facts” of differentiation and anti-differentiation. It’s well worth memorizing the table since it shows many of the relationships among the functions that are central to this book. You may prefer to use the name \\(\\cos(x)\\) to refer to \\(\\sin(x + \\pi/2)\\) and to use \\(-\\cos(x)\\) instead of \\(\\sin(x - \\pi/2)\\). For differentiation, any function that can be written using combinations of the pattern-book functions by multiplication, composition, and linear combination has a derivative that can be written using the pattern-book functions. So a complete story of symbolic differentiation is told by the above table and the differentiation rules: linear combination: \\(\\partial_x \\left[{\\strut}a\\, f(x) + b\\, g(x)\\right] = a\\, \\partial_x f(x) + b\\, \\partial_x g(x)\\) product: \\(\\partial_x \\left[{\\strut}f(x)\\cdot g(x)\\right] = g(x) \\partial_x f(x) + f(x) \\partial_x g(x)\\) composition: \\(\\partial_x \\left[{\\strut}f(g(x))\\right] = \\left[\\partial_y f(g(x))] \\cdot \\partial_x g(x)\\) This chapter is about the analogous rules for anti-differentiation. The anti-differentiation rule for linear combination is simple: essentially the same as the rule for differentiation. \\[\\int \\left[\\strut a\\, f(x) + b\\, g(x)\\right] = a\\!\\int\\! f(x) dx + b\\!\\int\\! g(x) dx\\] How about the rules for function products and for composition? The surprising answer is that there are no such rules. There is no template analogous to the product and chain rules for derivatives, that can consistently be used for anti-derivatives. What we have instead are techniques of integration, somewhat vague rules that will sometimes guide a successful search for the anti-derivative, but often will lead you astray. Indeed, there are many functions for which a symbolic anti-derivative cannot be constructed from compositions and/or multiplication of pattern-book functions that can be written using pattern-book functions.52 Fortunately, we already know the symbolic anti-derivative form of many functions. We’ll call those the cataloged functions, but this is not a term in general use in mathematics. For functions not in the catalog, it is non-trivial to find out whether the function has a symbolic anti-derivative or not. This is one reason why the techniques of integration do not always provide a result. The following sections provide an overview of techniques of integration. We start with a description of the cataloged functions and direct you to computer-based systems for looking up the catalog. (These are almost always faster and more reliable than trying to do things by hand.) Then we introduce a new interpretation of the notation for anti-differentiation: differentials. This interpretation makes it somewhat easier to understand the major techniques of integration: substitution and integration by parts. We’ll finish by returning to a setting where symbolic integration is easy: polynomials. Remember that, even if we cannot always find a symbolic anti-derivative, that we can always construct a numerical anti-derivative that will be precise enough for almost any genuine purpose. 31.1 The cataloged functions In a traditional science or mathematics education, students encounter (almost exclusively) basic functions from a mid-sized catalog. For instance: \\(\\sqrt{\\strut\\_\\_\\_\\ }\\), \\(\\sin()\\), \\(\\cos()\\), \\(\\tan()\\), square(), cube(), recip(), \\(\\ln()\\), \\(\\exp()\\), negate(), gaussian(), and so on. This catalog also includes some functions that take two arguments but are traditionally written without using parentheses. For instance, \\(a+b\\) doesn’t look like a function but is entirely equivalent to \\(+(a, b)\\). Others in this class are \\(\\times(\\ ,\\ )\\), \\(\\div(\\ , \\ )\\), \\(-(\\ ,\\ )\\), and ^( , ). The professional applied mathematician’s catalog is much larger. You can see an example published by the US National Institute of Standards and Technology as the Digital Library of Mathematical Functions. (Almost all of the 36 chapters in this catalog, important though they be, are highly specialized and not of general interest across fields.) There is a considerable body of theory for these cataloged functions, which often takes the form of relating them to one another. For instance, \\(\\ln(a \\times b) = \\ln(a) + \\ln(b)\\) demonstrates a relationship among \\(\\ln()\\), \\(+\\) and \\(\\times\\). Along the same lines of relating the cataloged functions to one another is \\(\\partial_x \\sin(x) = \\cos(x)\\) and other statements about derivatives such as those listed in Section 19.4.6. Simply to illustrate what a function catalog looks like, Figure 31.1 shows a page from an 1899 handbook entitled A Short Table of Integrals. Figure 31.1: Entries 124-135 from A Short Table of Integrals (1899) by Benjamin Osgood Pierce. The book includes 938 such entries. The use of cataloged functions is particularly prevalent in textbooks, so the quantitatively sophisticated student will encounter symbolic anti-derivatives of these functions throughout his or her studies. The cataloged functions were assembled with great effort by mathematicians over the decades. The techniques and tricks they used to find symbolic anti-derivatives are not part of the everyday experience of technical workers, although many mathematically minded people find them a good source of recreation. Calculus textbooks that include extensive coverage of the techniques and tricks should be understood as telling a story of the historical construction of catalogs, rather than conveying skills that are widely used today. In a practical sense, when the techniques are needed, it’s more reliable to access them via computer interface such as WolframAlpha, as depicted in Figure 31.2. Figure 31.2: Pierce’s entry 125 as computed by the WolframAlpha system. The systems can do a good job identifying cases where the techniques will not work. In such systems, they provide the anti-derivative as constructed by numerical integration. The R/mosaic antiD() function works in this same way, although its catalog contains only a tiny fraction of the functions found in professional systems. (But then, only a tiny fraction of the professional cataloged function are widely used in applied work.) 31.2 Differentials Breathing some life into the symbol \\(dx\\) will help in understanding the algebra of techniques for anti-differentiating function compositions and products. We’ve thus far presented \\(dx\\) as a bit of notation: punctuation for identifying the with-respect-to input in anti-derivatives. That is, in interpreting a sequence of symbols like \\(\\int f(x,t) dx\\), we’ve parsed the sequence of symbols into three parts: \\[\\underbrace{\\int}_{\\text{integral sign}} \\overbrace{f(x, t)}^{\\text{function to be anti-differentiated}} \\underbrace{dx}_{\\text{&#39;with respect to&#39;}}\\] By analogy, the English sentence \\[\\text{We loaded up on snacks.}\\] consists of five parts: the five words in the sentence. But you can also see “We loaded up on snacks” as having three parts: \\[\\underbrace{\\text{We}}_{\\text{subject}}\\ \\overbrace{\\text{loaded up on}}^{\\text{verb}}\\ \\ \\ \\underbrace{\\text{snacks}}_{\\text{object}}\\] Likewise, the integrate sentence can be seen as consisting of just two parts: \\[\\underbrace{\\int}_{\\text{integral sign}} \\overbrace{f(x, t) dx}^{\\text{differential}}\\] A differential corresponds to the little sloped segments that we add up when calculating a definite integral numerically using the slope function visualization. That is \\[\\underbrace{\\int}_{\\text{Sum}} \\underbrace{\\overbrace{f(x,t)}^\\text{slope of segment}\\ \\ \\overbrace{dx}^\\text{run}}_\\text{rise}\\] A differential is a genuine mathematical object and is used, for example, in analyzing the geometry of curved spaces, as in the Theory of General Relativity. But this is well beyond the scope of this introductory calculus course. 3710 Our use here for differentials will be to express rules for anti-differentiation of function compositions and products. You should be thinking in terms of differentials when you see a sentence like the following: “In \\(\\int \\sin(x) \\cos(x) dx\\), make the substitution \\(u = \\sin(x)\\), implying that \\(du = \\cos(x) dx\\) and getting \\(\\int u du\\), which is simple to integrate.” The table gives some examples of functions and their differentials. “w.r.t” means “with respect to.” Function derivative w.r.t. differential \\(v(x) \\equiv x\\) \\(\\partial_x v(x) = 1\\) x \\(dv = dx\\) \\(u(x) \\equiv x^2\\) \\(\\partial_x u(x) = 2x\\) x \\(du = 2x dx\\) \\(f(x) \\equiv \\sin(x)\\) \\(\\partial_x f(x) = \\cos(x)\\) x \\(df = \\cos(x)dx\\) \\(u(x) \\equiv e^{3 x}\\) \\(\\partial_x u(x) = 3 e^{3 x}\\) x \\(du = 3 e^{3 x} dx\\) \\(g(x) \\equiv t^3\\) \\(\\partial_t v(t) = 3 t^2\\) t \\(dg = 3 t^2 dt\\) As you can see, the differential of a function is simply the derivative of that function followed by the little \\(dx\\) or \\(dt\\) or whatever is appropriate for the “with respect to” variable. Notice that the differential of a function is not written with parentheses: The function \\(u(x)\\) corresponds to the differential \\(du\\). Example 31.1 What is the differential of \\(\\sin(x)\\)? As we’ve seen, \\(\\partial_x \\sin(x) = cos(x)\\). For form the differential of \\(\\sin()\\), take the derivative and suffix it with a \\(dx\\) (since \\(x\\) is the name of the input): \\[\\cos(x)\\ dx\\] 31.3 U-substitution There is little reason to use \\(\\partial_t\\) and \\(\\int \\left[\\right]dt\\) to cancel each other out, but it is the basis of an often successful strategy—u-substitution—for finding anti-derivatives symbolically. Here’s the differentiate/integrate algorithm behind u-substitution. 3725 Pick a function \\(f()\\) and another function \\(g()\\). Typically \\(f()\\) and \\(g()\\) belong to the family of basic modeling functions, e.g. \\(e^x\\), \\(\\sin(t)\\), \\(x^n\\), \\(\\ln(x)\\), and so on. For the purpose of illustration, we’ll use \\(f(x) = \\ln(x)\\) and \\(g(t) = \\cos(t)\\). Compose \\(f()\\) with \\(g()\\) to produce a new function \\(f(g())\\) which, in our case, will be \\(\\ln(\\cos(t))\\). Use the chain rule to find \\(\\partial_t f(g(t))\\). In the example, the derivative of \\(\\ln(x)\\) is \\(1/x\\), the derivative of \\(g(t)\\) is \\(-\\sin(t)\\). By the chain rule, \\[\\partial_t f(g(t)) = - \\frac{1}{g(t)} \\sin(t)= - \\frac{\\sin(t)}{\\cos(t)} = - \\tan(t)\\] 3730 In a sense, we have just watched a function give birth to another through the straightforward process of differentiation. Having witnessed the birth, we know who is the integration parent of \\(\\tan(t)\\), namely \\(\\int \\tan(t) dt = \\ln(\\cos(t)\\). For future reference, we might write this down in our diary of integrals: \\[\\int \\tan(t) dt = - \\ln(\\cos(t)) + C\\] Saving this fact in your diary is helpful. The next time you need to find \\(\\int \\tan(x) dx\\), you can look up the answer (\\(-\\ln(\\cos(x)) + C\\)) from your diary. If you use \\(\\int \\tan(x) dx\\) a lot, you will probably come to memorize the answer, just as you have already memorized that \\(\\int \\cos(t) dt = \\sin(t)\\) (a fact that you actually will use a lot in the rest of this course). 3735 Now for the u-substitution game. The trick is to take a problem of the form \\(\\int h(t) dt\\) and extract from \\(h(t)\\) two functions, an \\(f()\\) and a \\(g()\\). You’re going to do this so that \\(h(t) = \\partial_t F(g(t))\\), where \\(\\partial_x F(x) = f(x)\\) Once you’ve done this, you have an answer to the original integration question: \\(\\int h(t) dt = F(g(t)) + C\\). 3740 ::: {.example data-latex=\"\"} Task: Evaluate the definite integral \\(\\int \\frac{\\sin(\\ln(x))}{x} dx\\). You don’t know ahead of time that this is an integral amenable to solution by u-substitution. For all you know, it’s not. So before you start, look at the function to see if it one of those for which you already know the anti-derivative, for example any of the pattern-book functions or their parameterized cousins the basic modeling functions. 3745 If so, you’ve already memorized the answer and you are done. If not … Assume for a moment—without any guarantee that this will work, mind you—that the answer can be built using u-substitution. You will therefore look hard at \\(h()\\) and try to see in it a plausible form that looks like the derivative of some \\(f(g(x))\\). 3750 In the problem at hand, we can readily see something of the form \\(f(g(x))\\) in the \\(\\sin(\\ln(x))\\). This immediately gives you a candidate for \\(g(x)\\), namely \\(g(x)\\equiv \\ln(x)\\) We don’t know \\(f()\\) yet, but if \\(g()\\) is the right guess, and if u-substitution is going to work, we know that \\(f()\\) has to be something that produces \\(\\sin()\\) when you differentiate it. That’s \\(-\\cos()\\). So now we have a guess \\[h_\\text{guess}(x) = -\\cos(\\ln(x)) \\partial_x \\ln(x) = - \\cos(\\ln(x)) \\frac{dx}{x}\\] 3755 If this guess matches the actual \\(h()\\) then you win. The answer to \\(\\int h(x) dx\\) will be \\(f(g(x)) = -\\cos(\\ln(x))\\). If not, see if there is any other plausible guess for \\(g(x)\\) to try. If you can’t find one that works, try integration by parts. 3760 31.4 Integration by parts Integration by parts applies to integrals that are recognizably of the form \\[\\int f(x) g(x) dx\\] Step 1: Split up the integrand into an \\(f(x)\\) and a \\(g(x)\\) multiplied together. That is, split the integrand into parts that are multiplied together. The way we wrote the integrand, this was trivial. Step 2: Pick one of \\(f(x)\\) or \\(g(x)\\). Typically, you pick the one that has a dead-easy anti-derivative. For our general description, let’s suppose this is \\(g(x)\\) which has anti-derivative \\(G(x)\\) (where we know \\(G()\\)). Step 3: Construct a helper function \\(h(x) \\equiv f(x) G(x)\\). This requires no work, since we’ve already identified \\(f(x)\\) and \\(G(x)\\) in step (2). Step 4: Find \\(\\partial_x h(x)\\). It’s always easy to find derivatives, and here we just use the product rule: \\[\\partial_x h(x) = \\partial_x f(x) \\cdot G(x) + f(x)\\cdot\\partial_x G(x)\\] We know from the way we constructed \\(G(x)\\) that \\(\\partial_x G(x) = g(x)\\), so the equation is \\[\\partial_x h(x) = \\partial_x f(x) \\cdot G(x) + f(x)\\cdot g(x)\\] Step 5: Anti-differentiate both sides of the previous equation. From the fundamental theorem of calculus, we know how to do the left side of the equation. \\[\\int \\partial_x h(x) = h(x) \\equiv f(x)g(x)\\] The right side of the equation has two parts: \\[\\int \\left[{\\large\\strut}\\partial_x f(x) \\cdot G(x) + f(x)\\cdot g(x)\\right]dx = \\underbrace{\\int \\partial_x f(x) \\cdot G(x) dx}_\\text{Some NEW integral!}\\ \\ \\ \\ + \\underbrace{\\int f(x) g(x) dx}_\\text{The original integral we sought!}\\] Putting together the left and right sides of the equation, and re-arranging gives us a new expression for the original integral we sought to calculate: \\[\\text{Integration by parts re-arrangement}\\\\\\underbrace{\\int f(x) g(x) dx}_\\text{The original integral we sought.} = \\underbrace{f(x) g(x)}_\\text{We know this!} - \\underbrace{\\int \\partial_x f(x) \\cdot G(x) dx}_\\text{Some NEW integral!}\\] It may seem that we haven’t accomplished much with this re-organization. But we have done something. We took a problem we didn’t otherwise know how to solve (that is \\(\\int f(x) g(x) dx\\)) and broke it down into two parts. One is very simple. The other is an integral. If we’re clever in picking \\(g()\\) and lucky, we’ll be able to figure out the new integral and, thereby, we’ll have computed the original integral. But everything depends on cleverness and luck! Example 31.2 Task: Find \\(\\int x \\cos(x) dx\\). An obvious choice for the two parts is \\(x\\) and \\(\\cos(x)\\). But which one to call \\(g(x)\\). We’ll just guess and say \\(g(x)\\equiv \\cos(x)\\) which implies \\(G(x) = \\sin(x)\\). The helper function is \\(h(x) \\equiv f(x) G(x) = x \\sin(x)\\). Differentiating \\(h(x)\\) can be done by the product rule. \\[\\partial_x h(x) = \\sin(x) + x \\cos(x)\\ .\\] Now anti-differentiate both sides of the above, the left side by the fundamental theorem of algebra and the right side by other means: \\[\\int \\partial_x h(x) = h(x) = x \\sin(x)= \\underbrace{\\int\\sin(x)dx}_{-\\cos(x)} + \\underbrace{\\int x \\cos(x) dx}_\\text{The original integral}\\] Re-arranging gives the answer \\[\\underbrace{\\int x \\cos(x) dx}_\\text{The original integral} = x \\sin(x) + \\cos(x) + C\\] The constant of integration \\(C\\) needs to be included to make the equality true. To confirm the result, you can differentiate the right-hand side; differentiation is always easy. Alternatively, we can check numerically if \\(\\int x \\cos(x) dx - (x\\sin(x)+cos(x))\\) is really a constant. F1 &lt;- antiD(x*cos(x) ~ x) F2 &lt;- makeFun(x*sin(x) + cos(x) ~ x) slice_plot(F1(x) - F2(x) ~ x, domain(x=c(-5,5))) Yes! The graph shows a constant function: \\(C\\). Example 31.3 Task: Find \\(\\int \\ln(x) dx\\). The easy solution is to recognize that the anti-derivative of \\(\\ln(x)\\) is contained in the table at the top of the chapter. But let’s try doing it by parts as an example (and to show you how it got into the table in the first place). It’s hard to see a separate \\(f(x)\\) and \\(g(x)\\) in the integrand \\(\\ln(x)\\). But sometimes you need to be clever. We’ll set \\(f(x) \\equiv \\ln(x)\\) and \\(g(x) \\equiv 1\\). This means that \\(G(x) = x\\). The helper function is therefore \\(h(x) = x\\ln(x)\\) Differentiating the helper function gives (by the product rule): \\(\\partial_x h(x) = \\ln(x) + x \\frac{1}{x} = \\ln(x) + 1\\) Integrating the differentiated helper function, we find \\[\\int \\partial_x h(x) dx = f(x)g(x) = x \\ln(x) = \\underbrace{\\int \\ln(x) dx}_\\text{The original integral} + \\underbrace{\\int 1 dx}_{x}\\] Re-arranging, we have \\[\\underbrace{\\int \\ln(x) dx}_\\text{The original integral} = x \\ln(x) - x\\ \\ =\\ \\ x\\left[\\strut \\ln(x) - 1\\right]\\] Example 31.4 Task: Find \\(\\int \\sin(x) e^x dx\\). This isn’t the integral of a pattern book or basic modeling function, and substitution didn’t work, so we try integration by parts. The obvious choice for the two parts is \\(\\sin(x)\\) and \\(e^x\\). Both are really easy to anti-differentiate. Let’s choose \\(g(x) = \\sin(x)\\), giving \\(G(x) = -\\cos(x)\\). The re-arrangement of the original integral will be \\[\\sin(x) e^x + \\int \\cos(x) e^x dx\\] The new integral that we need to compute doesn’t look any friendlier than the original, but who knows? We’ll do \\(\\int cos(x) e^x dx\\) by parts as well and keep our fingers crossed. That integral turns out to be \\[\\int \\cos(x) e^x dx = \\cos(x) e^x - \\int \\sin(x) e^x dx\\] This may look like we’re going in circles, and maybe we are, but let’s put everything together. \\[\\underbrace{\\int \\sin(x) e^x dx}_\\text{The original problem} = \\underbrace{\\sin(x) e^x + \\cos(x) e^x}_\\text{Easy stuff!}\\ \\ \\ - \\underbrace{\\int \\sin(x) e^x dx}_\\text{Also the original problem}\\] Rearranging gives \\[\\int \\sin(x) e^x dx = \\frac{\\sin(x) e^x + \\cos(x) e^x}{2} = \\frac{e^x}{2}\\left[{\\large\\strut} \\sin(x) + \\cos(x)\\right]\\] And don’t forget the constant of integration. [The presentation of integration by parts in this section was formulated by Prof. Michael Brilleslyper.] If integration by parts doesn’t work … and it doesn’t always work! … there is a variety of possibilities such as asking a math professor (who has a much larger set of functions at hand than you), looking through a table of integrals (which is to say, the collective calculus diary of generations of math professors), using a computer algebra system, or using numerical integration. One of these will work. 3765 If you have difficulty using u-substitution or integration by parts, you will be in the same league as the vast majority of calculus students. Think of your fellow students who master the topic in the way you think of ice dancers. It’s beautiful to watch, but you need a special talent and it hardly solves every problem. People who would fall on their face if strapped to a pair of skates have nonetheless made huge contributions in technical fields, even those that involve ice. Prof. Kaplan once had a heart-to-heart with a 2009 Nobel-prize winner who confessed to always feeling bad and inadequate as a scientist because he had not done well in introductory calculus. It was only when he was nominated for the Nobel that he felt comfortable admitting to his “failure.” Even if you don’t master u-substitution or integration by parts, remember that you can integrate any function using easily accessible resources. 3840 31.5 Integrating polynomials 31.6 Polynomials One of the most famous settings for integration comes from the physics of free fall under gravity. Here’s the setting. An object—a ball, let’s imagine—is being held at height \\(x_0\\). At \\(t=0\\) the ball is released. Perhaps the ball is released from a standstill in which case it’s velocity at release is \\(v_0 = v(t=0) =0\\). Or perhaps the ball has been tossed upward so that \\(v_0 &gt; 0\\), or downward so that \\(v_0 &lt; 0\\). Whichever it is, the initial velocity will be labelled \\(v_0\\). On release, the force that held the ball steady is removed and the object moves under the influence of only one factor: gravity. The effect of gravity near the Earth’s surface is easy to describe: it accelerates the object at a constant rate of about 9.8 m/s\\(^2\\). Acceleration is the derivative with respect to time of velocity. Since we know acceleration, to find velocity we find an anti-derivative of acceleration: \\[v(t) = \\int -9.8\\ dt = -9.8\\ t + C\\] The constant of integration \\(C\\) is not just a formality. It has physical meaning. In this case, we see that \\(C=v(0)\\), that is, \\(C = v_0\\). Velocity is the derivative of position: height in this case. So height is an anti-derivative of velocity. \\[x(t) = \\int v(t) dt = \\int \\left[\\strut -9.8\\ t + v_0\\right]dt = - \\frac{9.8}{2} t^2 + v_0\\ t + C\\] Why is \\(C\\) back again? It’s a convention to use \\(C\\) to denote the constant of integration. Those experienced with this convention know, from context, that the value of \\(C\\) in the integration that produced \\(v(t)\\) has nothing to do with the value of \\(C\\) involved in the production of \\(x(t)\\). The situation is a bit like the presentation of prices in US stores: to the price of the item itself, you must always add “plus taxes.” Nobody with experience would assume that “taxes” is always the same number. It depends on the price and type of the item itself.53 You won’t have to deal with the taxes at the time you pick the item from the shelf, but eventually you’ll see them when you check out of the store. Think of \\(+\\ C\\) as meaning, “plus some number that we’ll have to deal with at some point, but not until checkout.” Let’s checkout the function \\(x(t)\\) now. For that, we need to figure out the value of \\(C\\). We can do that by noticing that \\(x(0) = C\\). So in the anti-differentiation producing \\(x()\\), \\(C = x_0\\) giving, altogether the formula for free-fall famous from physics classes \\[x(t) = - \\frac{9.8}{2} t^2 + v_0\\ t + x_0\\] An important thing to notice about \\(x(t)\\): it’s a polynomial in \\(t\\). Polynomials can be birthed by successive anti-differentiations of a constant. At each anti-differentiation, each of the previous terms is promoted by one order. That is, the previous constant becomes the first order term. The previous first-order term becomes the second order term, with the division by 2 familiar from anti-differentiating \\(t\\). A previous second-order term will become the new third-order term, again with the division by 3 familiar from anti-differentiating \\(t^2\\). Stated generally, the anti-derivative of a polynomial is \\[{\\Large\\int} \\left[\\strut \\underbrace{a + b t + ct^2 + \\ldots}_\\text{original polynomial}\\right] dt = \\underbrace{C + a\\,t + \\frac{b}{2} t^2 + \\frac{c}{3} t^3 + \\ldots}_\\text{new polynomial}\\] By use of the symbol \\(C\\), it’s easy to spot how the constant of integration fits in with the new polynomial. But if we were to anti-differentiate the new polynomial, we had better replace \\(C\\) with some more specific symbol to that we don’t confuse the old \\(C\\) with the one that’s going to be produced in the new anti-differentiation. In exercise 26.16, we introduced a Taylor polynomial approximation to the gaussian function. That might have seemed like a mere exercise in high-order differentiation at the time, but there is something more important at work. The gaussian is one of those functions for which the anti-derivative cannot be written exactly in terms of what the mathematicians call “elementary functions.” (See Section 31.1.) Yet integrals of the gaussian are very commonly used in science, especially in statistics where the gaussian is called the normal PDF. The approach we’ve taken in this book is simply to give a name and a computer implementation of the anti-derivative of the gaussian. This is the function we’ve called \\(\\pnorm()\\) with the R computer implementation pnorm(). We never told you the algorithm contained in pnorm(). Nor do we really need to. We all depend on experts and specialists to design and build the computers we use. The same is true of software implementation of functions like pnorm(). And for that matter, for implementations of functions like exp(), log(), sin(), and so on. You don’t have to know about semi-conductors in order to use a computer productively, and you don’t need to know about numerical algorithms in order to use those functions. One feasible algorithm for implementing \\(\\pnorm()\\) is to integrate the Taylor polynomial. It’s very easy integrate polynomials. To ensure accuracy, different Taylor polynomials can be computed for different centers, say \\(x=0\\), \\(x=1\\), \\(x=2\\), and so on. Another feasible algorithm is simply to integrate \\(\\dnorm()\\) numerically using an advanced algorithm such as Gauss-Hermite quadrature. In today’s world, software is the means by which expert knowledge and capability is communicated and applied. Before modern computers were available, the expertise was committed to print in the form of tables. Figure ?? shows part of the table from the previously mentioned 1899 A Short Table of Integrals. Incredibly, such tables were a standard feature of statistics textbooks up through 2010. In addition to software being more compact and easier to use than printed tables, the interface to numerical integrals can be presented in the same format as any other mathematical function. That’s enabled us to include \\(\\pnorm()\\) among the pattern book functions. 31.7 Exercises Exercise 31.03: HoQaaq Question A What is the differential of \\(u = x + 5\\)? \\(du = dx\\)Good. Since \\(\\partial_x (x+5) = 1\\). \\(du = (x+5)dx\\)︎✘ You should have used \\(\\partial_x (x+5)\\) instead of \\((x+5)\\) on the right side. \\(du = 5 dx\\)︎✘ Is \\(\\partial_x (x+5) = 5\\)? No! \\(du = x dx\\)︎✘ You should have used \\(\\partial_x (x+5) = 1\\) instead of \\(x\\) on the right side. Question B What is the differential of \\(u = \\sin(2x + 5)\\)? \\(du = 2 \\cos(2x + 5) dx\\)Excellent! Since \\(\\partial_x \\sin(2x + 5) = 2 \\cos(2x + 5)\\). \\(du = (2x+5)dx\\)︎✘ You should have used \\(\\partial_x \\sin(2x+5)\\) instead of \\((2x+5)\\) on the right side. \\(du = 5 dx\\)︎✘ Is \\(\\partial_x \\sin(2x+5) = 5\\)? No! \\(du = 2x dx\\)︎✘ You should have used \\(\\partial_x \\sin(2x+5) = 2 \\cos(2x + 5)\\) instead of \\(2x\\) on the right side. Question C What is the differential of \\(v = e^x\\)? \\(du = e^x dx\\)︎✘ The name of the function here is \\(v()\\), not \\(u\\). So the differential should be written \\(dv\\). \\(dv = e^x dx\\)Correct. Since \\(\\partial_x e^x = 1\\). \\(du = x dx\\)︎✘ The name of the function here is \\(v()\\), not \\(u\\). So the differential should be written \\(dv\\). \\(dv = x dx\\)︎✘ But \\(\\partial e^x = e^x\\), not \\(x\\). Question D What is the differential of \\(f = \\cos(\\ln(t))\\)? \\(df = -\\sin(\\ln(t))/t dt\\)Excellent! Since the chain rule tells us \\(\\partial_t\\cos(\\ln(t)) = -\\sin(\\ln(t))/x\\). \\(du = -\\sin(\\ln(t))/t dt\\)︎✘ There’s no \\(u\\) in sight in this problem. It’s \\(f\\). \\(dv = -\\sin(\\ln(t))/t dt\\)︎✘ There’s no \\(v\\) being used in this problem. It’s \\(f\\) that we’re asking about. \\(df = -\\sin(\\ln(x))/x dx\\)︎✘ \\(f\\) is a function of \\(t\\), not \\(x\\). Exercise XX.XX: 1qDQZz Go through the steps above to find the anti-derivative of \\(g(x) \\equiv x \\cos(x)\\). Step 1 hint: We know the anti-derivative of \\(\\cos(x)\\) is \\(\\sin(x)\\), so an appropriate helper function is the function \\(x\\, \\sin(x)\\). Now do steps (2) and (3): (2) take the derivative of the helper function and then (3) integrate each term in the result. Question A What is the derivative of the helper function with respect to \\(x\\)? \\(\\partial_x \\text{helper}(x) = \\sin(x) + x \\cos(x)\\)Right!  \\(\\partial_x \\text{helper}(x) = \\sin(x) + x \\sin(x)\\)︎✘ \\(\\partial_x \\text{helper}(x) = \\sin(x) + \\cos(x)\\)︎✘ \\(\\partial_x \\text{helper}(x) = \\sin(x)\\cos(x)\\)︎✘ Question B What is \\[\\int \\partial_x \\text{helper}(x)\\ ?\\] \\(\\text{helper}(x) + C\\)Good. We included the constant of integration \\(C\\) just as a reminder. \\(\\frac{1}{2} \\text{helper}^2(x)\\)︎✘ \\(1 / \\text{helper}(x)\\)︎✘ Whatever it is, it’s just as complicated as the original integral. No obvious way to do it.︎✘ Actually, the answer is simple, even if it doesn’t seem to get us anywhere. Wait for the next problem! Question C What is the integral with respect to \\(x\\) of the first part of the expanded form of the helper function, that is, \\(\\int \\sin(x) dx\\)? \\(-\\cos(x)\\)Correct. This is one of our basic modeling functions. \\(\\cos(x)\\)︎✘ Close. \\(\\cos(x) = \\partial_x \\sin(x)\\), but we want \\(\\int \\sin(x) dx.\\) \\(e^x \\sin(x)\\)︎✘ \\(e^x \\cos(x)\\)︎✘ Question D What is the integral with respect to \\(x\\) of the second part of the expanded form of the helper function, that is, \\(\\int x\\, \\cos(x)\\)? It’s the same as the original problem! I thought you were showing us how to do the problem. If we didn’t know the answer when we started, why should we be able to do it now?︎✘ An understandable frustration. But think! Now you have the original problem written out as part of an equation with two integrals that you do know. It’s the same as the original problem. I’ve got an equation involving the original problem and two bits of algebra/calculus that I know how to do. Thanks!Nice!  \\(\\sin(x)\\)︎✘ If this were true, then \\(\\partial_x \\sin(x)\\) would give us \\(x\\, \\cos(x)\\). But, as you know, \\(\\partial_x \\sin(x) = \\cos(x)\\), so this answer must be wrong. Solve for the answer to the original function and write the function in R notation here: makeFun( ...your stuff here... ~ x) Exercise XX.XX: YMuG92 Use the same procedure to find the anti-derivative of \\(x\\, \\cos(2x)\\). Since \\[\\cos(2x) = \\frac{1}{2}\\partial_x \\sin(2 x)\\] a reasonable guess for a helper function will be \\(x \\sin(2x)\\). (We have intentionally dropped the \\(1/2\\) to simplify the rest of the procedure. You’ll see that such multiplicative constants don’t matter, since they will be on both sides of the equation showing the derivative of the helper function. You can see this by keeping the \\(1/2\\) in the helper function and watching what happens to it.) As you work through the steps be very careful about the constants and make sure you check your final answer by differentiating. Question A What is \\(\\partial_x x\\, \\sin(x)\\)? \\(\\sin(x) + x\\, \\cos(x)\\)Excellent!  \\(\\sin(x) + x\\, \\sin(x)\\)︎✘ \\(\\cos(x) + x\\, \\sin(x)\\)︎✘ \\(\\cos(x) + x\\, \\cos(x)\\)︎✘ Question B What is \\(\\int \\partial_x [ x\\, \\sin(x)] dx\\)? \\(x\\, \\sin(x)+C\\)Nice! Integration undoes differentiation! \\(\\sin(x)+C\\)︎✘ \\(\\cos(x)+C\\)︎✘ \\(x\\, \\cos(x)+C\\)︎✘ Question C What is \\(\\int x\\, \\cos(x) dx\\)? \\(x\\, \\sin(x) + \\cos(x)\\)Excellent!  \\(x\\, \\cos(x) + \\cos(x)\\)︎✘ \\(x\\, \\cos(x) + \\sin(x)\\)︎✘ \\(x\\, \\sin(x) + \\sin(x)\\)︎✘ Exercise XX.XX: Y7ecmI Question A In \\(h(x) = 2x/(x^2 + 2)\\) which of the following is a plausible candidate for an interior function \\(g(x)\\)? \\(\\sin(x)\\)︎✘ \\(\\ln(x)\\)︎✘ \\(2x\\)︎✘ In order for this to be an interior function \\(g(x)\\) there has to be some other function embracing it. \\(2x\\) is standing proudly on its own, so it’s not a good choice for \\(g(x)\\) \\(x^2 + 2\\)Nice!  Question B Continuing with the integral of \\(h(x) = 2x/(x^2 + 2)\\) and the working guess that \\(g(x) = x^2 + 2\\), do you see any part of \\(h()\\) which is a match to \\(\\partial_x g()\\)?     \\(1/x\\)︎✘ But that’s not anything like \\(\\partial_x g(x)\\).       \\(\\ln(x)\\)︎✘        \\(2x\\)\\(\\heartsuit\\ \\) Question C Taking seriously the progress we made in the previous two questions, we now need to write \\(h(x)\\) as \\(f(x^2 + 2) 2x\\)? What should \\(f()\\) be to make this match \\(h(x)\\)?     \\(f(x) = \\sin(x)\\)︎✘        \\(f(x) = \\ln(x)\\)︎✘        \\(f(x) = 1/x\\)\\(\\heartsuit\\ \\)       \\(x^2 + 2\\)︎✘ Now that you have found both \\(g()\\) and \\(f()\\), you simply need to find a function \\(F(x)\\) such that \\(\\partial_x F(x) = f(x)\\). Since \\(\\partial_x \\ln(x) = 1/x\\), we know that \\(F(x) = \\ln(x)\\). Thus, \\(\\int h(x) dx = F(g(x)) = F(x^2 + 2) = \\ln(x^2 + 2)\\). Exercise XX.XX: LPlcgV Question A \\[\\text{Find a plausible interior g(x) in} \\ x \\exp(x^2 + 3)\\] \\(\\exp(x)\\)︎✘ \\(x\\)︎✘ \\(x^2 + 3\\)Excellent!  \\(x^2\\)︎✘ The interior function has to be everything embraced by the parentheses of the exterior function \\(f()\\). Question B Using your candidate for \\(g()\\) from the previous question, which of these is a exterior f(x) in \\(x \\exp(x^2 + 3)\\) \\(f(x) = \\exp(x)\\)Good.  \\(f(x) = x\\)︎✘ \\(f(x) = x \\exp(x)\\)︎✘ If this were so, the resulting \\(h()\\) would have something like \\((x^2 + 3) \\exp(x^2 + 3)\\) in it. \\(f(x) = \\ln(x)\\)︎✘ Confirm that \\(h(x) = f(g(x)) \\partial_x g(x)\\) and you win. The answer will be \\(F(g(x)) + C\\) Exercise XX.XX: LpYZy4 A giant tortoise (with very good eyesight and standing on an unobstructed plane!) spies a head of lettuce on the ground 65 meters away. Being hungry (and knowing the shortest path between two points on the plane!), the tortoise takes off in a straight line for the lettuce. She pretty quickly reaches her top speed, but then starts to tire. If her velocity as a function of time (in meters per minute) is modeled by \\(v(t) = 7 t e^{-0.3t}\\), how long does it take the tortoise to reach her lunch? Answer this question by finding an calculus/algebra formula for the tortoise’s displacement and then use it to approximate how long it takes to get to the lettuce. 3775 We’re going to be looking at \\(\\int v(t) dt = 7 \\int t e^{-0.3 t} dt\\). We’ll call the left side of the equation “displacement(t).” Use integration by parts to find displacement(t) as a simple formula in \\(t\\). The tortoise to reach the cabbage at time \\(t^\\star\\) such that \\(\\text{displacement}(t^\\star) = 65\\) meters. Graph your displacement function to find \\(t^\\star\\). You can use the sandbox. (Note that the graphics domain isn’t necessarily the best choice for answering the question.) 3780 displacement &lt;- makeFun(77.77 * WHAT ~ t) slice_plot(displacement(t) ~ t, domain(t=c(0,5))) Question A At what time \\(t^\\star\\) does the tortoise reach the cabbage?     5.95 sec︎✘        10.85 sec\\(\\heartsuit\\ \\)       15.75 sec︎✘        Never! (That is, \\(t^\\star\\) is infinite.︎✘ Exercise XX.XX: A0u94a Question A Which of these candidates for \\(f()\\) and \\(g()\\) will produce \\[f(g(x))\\, \\partial_x g(x) = x^3 \\cos(x^4)\\ ?\\] \\(f(x) = \\cos(x)/4\\) and \\(g(x) = x^4\\)Excellent! The 1/4 cancels out the 4 produced by \\(\\partial_x g(x)\\). \\(f(x) = \\cos(x)\\) and \\(g(x) = x^4\\)︎✘ \\(f(x) = x^4\\) and \\(g(x) = \\cos(x)\\)︎✘ But \\(h(x)\\) involves \\(\\cos(x^4)\\) not \\(cos^4(x)\\). Once again, \\(\\int h(x) dx = F(g(x))\\), where \\(\\partial_x F(x) = f(x)\\). Exercise XX.XX: kay2zx Question A What is \\[\\int \\frac{\\sin(x)}{\\cos^5(x)}dx\\ ?\\]     \\(\\ln(cos(x))\\)︎✘        \\(- \\frac{1}{4} \\cos^{-4}(x)\\)\\(\\heartsuit\\ \\)       \\(\\frac{1}{6} \\cos^{-6}(x)\\)︎✘ Exercise XX.XX: nef1lB Question A Use u-substitution to find \\[\\int \\frac{4 e^{4x} + 4}{e^{4x}}dx\\] \\(\\ln(e^{4x} + 4)\\)Excellent!  \\(1/(e^{4x} + 4)\\)︎✘ \\(\\frac{1}{4} e^{4x} + 4\\)︎✘ \\(\\frac{1}{2} 1/(e^{4x} + 4)^2\\)︎✘ Exercise 31.07: f6C4Ia Tables of integrals Although any function has an anti-derivative, that anti-derivative cannot always be presented in algebraic notation. This poses no fundamental problem to the construction of the anti-derivative, particularly when a computer is available to handle the book-keeping of numerical integration. 3845 Still, it is convenient to have an algebraic form when it can be found. Many people have devoted considerable effort to constructing extensive collections of functions for which an algebraic form of anti-derivative is known. Think of such collections as a gallery of portraits of people who happen to have red hair. No matter how large the collection, you’ll often have to deal people who are not redheads. And unlike real redheads, it can be hard to know whether a function has an anti-derivative that can be expressed simply in algebraic form. For instance, \\(f(x) \\equiv \\exp(-x^2)\\) does not, even though it is ubiquitous in fields such as statistics. 3850 The US National Institute of Standards and Technology (NIST) has been a primary publisher for more than 50 years of information about functions encountered in applied mathematics. The work, published originally in book form, is also available via the internet as the NIST Digital Library of Mathematical Functions. 3855 So, how to organize the gallery of redheads? Let’s take a field trip to the NIST DLMF (The US National Institute of Standards and Technology (NIST) has been a primary publisher for more than 50 years of information about functions encountered in applied mathematics. The work, published originally in book form, is also available via the internet as the NIST Digital Library of Mathematical Functions! 3860 Warning! Many visitors to NIST DLMF encounter dizziness, fatigue, and anxiety. Should you experience such symptoms, close your eyes and remember that DLMF is a reference work and that you will not be examined on its use. Nonetheless, to help you benefit maximally from the field trip, there are a few questions in this Daily Digital for you to answer from DLMF. 3865 You should also note that the techniques in almost universal use to help you navigate through voluminous collections of data (e.g. Twitter, Facebook, Instagram, YouTube) such as ratings, subscribing, “friending,” following, etc. are entirely absent from DLMF. There’s not even a friendly introduction to each chapter saying who the material might be of interest to. 3870 We’re going to focus on Chapter 4, “Elementary Functions,” and indeed just a few sections from that chapter. (A better name for the chapter would be “The Functions Most Often Used.” They are not “elementary” as in “elementary school” but as in the “periodic table of elements.”) 3875 Section 4.10 covers integrals and anti-derivatives of logarithmic, exponential and power-law functions. Section 4.26 is similar, but for trigonometric functions. Navigate to equation 4.10.1. This is one of the anti-derivatives you are expected to know by heart in CalcZ. Notice that the variable name \\(z\\) is used. They could have selected any other name; \\(x\\) and \\(t\\) are popular, \\(y\\) less so, and \\(\\xi\\) even less so. The use of \\(z\\) is a signal to the cognoscenti that the function can be applied to both real and complex numbers. Look at equation 4.10.8. This is another of the functions whose anti-derivative you should know by heart. Perhaps it would have avoided some confusion if 4.10.1 had been written in terms of \\[\\int \\frac{1}{az}dz\\] so that you would know what to do if you had encountered such a function. Some exercises: Question A Which of these is \\[\\int \\frac{1}{az}dz \\ \\text{?}\\] \\[\\frac{1}{a} \\ln(z)\\]Nice! The level of the DLMF is such that you would be expected to know on your own that \\(\\int \\frac{1}{az} dz = \\frac{1}{a}\\int \\frac{1}{z}dz\\). In other words, the \\(\\frac{1}{a}\\) here is a scalar multiple of the function \\(\\frac{1}{z}\\) and “the integral of a scalar multiple of a function is the scalar multiple of the integral of the function.” Really. There is no anti-derivative of \\(1/az\\).︎✘ Every function has an anti-derivative. \\[a \\ln(z)\\]︎✘ You lost track of a reciprocal somewhere. askMC( &quot;Use Section 4.10 of DLMF to find $$\\\\int \\\\frac{1}{3 t + 5}dt$$&quot;, &quot;+$$\\\\frac{1}{15}(3t - \\\\ln(e^{3t} + 5))$$+&quot;, &quot;There&#39;s no such function listed in Section 4.10.&quot; = &quot;Although DLFM wrote the function using the variable name $z$, using $t$ instead is perfectly legitimate.&quot;, &quot;$$\\\\frac{1}{15}(5 t - \\\\ln(e^{5t} + 3))$$&quot; = &quot;Looks like you mixed up the $a$ and $b$.&quot; ) Question B Use Section 4.10 of DLMF to find \\[\\int \\frac{1}{3 t + 5}dt\\] \\[\\frac{1}{15}(3t - \\ln(e^{3t} + 5))\\]Excellent!  There’s no such function listed in Section 4.10.︎✘ Although DLFM wrote the function using the variable name \\(z\\), using \\(t\\) instead is perfectly legitimate. \\[\\frac{1}{15}(5 t - \\ln(e^{5t} + 3))\\]︎✘ Looks like you mixed up the \\(a\\) and \\(b\\). askMC( &quot;Is $\\\\frac{1}{e^{az} + b}$ different from $e^{-(az + b)}$?&quot;, &quot;+Yes+&quot; = &quot;$e^{-(az + b)}$ is a simple exponential with the linear interior function $-(az + b)$.&quot;, &quot;No&quot; = &quot;They look similar, but $1/(e^{az} + b)$ is not an exponential function and it&#39;s not $1/e^{az} + 1/b$ either.&quot;, &quot;Depends on the value of $b$.&quot; = &quot;A technically correct answer but misleading, since it&#39;s only for $b=0$ that the two functions are equal.&quot; ) Question C Is \\(\\frac{1}{e^{az} + b}\\) different from \\(e^{-(az + b)}\\)? YesGood. \\(e^{-(az + b)}\\) is a simple exponential with the linear interior function \\(-(az + b)\\). No︎✘ They look similar, but \\(1/(e^{az} + b)\\) is not an exponential function and it’s not \\(1/e^{az} + 1/b\\) either. Depends on the value of \\(b\\).︎✘ A technically correct answer but misleading, since it’s only for \\(b=0\\) that the two functions are equal. askMC( &quot;Using section 4.26, find $\\\\int \\\\tan(\\\\theta) d\\\\theta$.&quot;, &quot;+$-\\\\ln(\\\\cos(\\\\theta)$+&quot;, &quot;$\\\\tan(\\\\theta)$ doesn&#39;t have an anti-derivative.&quot; = &quot;All functions have an anti-derivative.&quot;, &quot;There&#39;s no $\\\\theta$ in section 4.26&quot; = &quot;The authors didn&#39;t use $\\\\theta$ as the name of the variable, but $\\\\theta$ (\\&quot;theta\\&quot;) is every bit as good a name to use as $x$ or $t$.&quot; ) Question D Using section 4.26, find \\(\\int \\tan(\\theta) d\\theta\\). \\(-\\ln(\\cos(\\theta)\\)Correct.  \\(\\tan(\\theta)\\) doesn’t have an anti-derivative.︎✘ All functions have an anti-derivative. There’s no \\(\\theta\\) in section 4.26︎✘ The authors didn’t use \\(\\theta\\) as the name of the variable, but \\(\\theta\\) (“theta”) is every bit as good a name to use as \\(x\\) or \\(t\\). Mathematicians have a list that is a bit longer than our pattern-book functions—they call them elementary functions and include the tangent and other trig functions and their inverses, as well as what are called “hyperbolic functions” and their inverses.↩︎ Again, mathematicians prefer to refer to the “elementary functions” rather than the pattern-book functions. \\(\\dnorm()\\) and \\(\\pnorm()\\) are not elementary functions, and there are several elementary function that we don’t include in the pattern-book list.↩︎ Many jurisdictions tax food and clothing, etc. at a different rate than other items.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
